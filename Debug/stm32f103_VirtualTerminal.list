
stm32f103_VirtualTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006208  08006208  00007208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006624  08006624  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006624  08006624  00007624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800662c  0800662c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800662c  0800662c  0000762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006630  08006630  00007630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006634  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001d4  08006808  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08006808  000083c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a8d  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af8  00000000  00000000  00010c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  00012788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065b  00000000  00000000  00012ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018248  00000000  00000000  0001364b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a563  00000000  00000000  0002b893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086af9  00000000  00000000  00035df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  000bc934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000bfcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080061f0 	.word	0x080061f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080061f0 	.word	0x080061f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_f2iz>:
 8000c14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c18:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c1c:	d30f      	bcc.n	8000c3e <__aeabi_f2iz+0x2a>
 8000c1e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c26:	d90d      	bls.n	8000c44 <__aeabi_f2iz+0x30>
 8000c28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c30:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c34:	fa23 f002 	lsr.w	r0, r3, r2
 8000c38:	bf18      	it	ne
 8000c3a:	4240      	negne	r0, r0
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr
 8000c44:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c48:	d101      	bne.n	8000c4e <__aeabi_f2iz+0x3a>
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	d105      	bne.n	8000c5a <__aeabi_f2iz+0x46>
 8000c4e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c52:	bf08      	it	eq
 8000c54:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	4770      	bx	lr

08000c60 <Lcd_create>:
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c6e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000c72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000c7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c7e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000c82:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f80e 	bl	8000cb6 <Lcd_init>

	return lcd;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	461d      	mov	r5, r3
 8000c9e:	f107 0410 	add.w	r4, r7, #16
 8000ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000caa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}

08000cb6 <Lcd_init>:

/**++++++++++++++++++++++++++++++++++++
 * Initialize 20x4-lcd without cursor
 *++++++++++++++++++++++++++++++++++++*/
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7d9b      	ldrb	r3, [r3, #22]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000cc6:	2133      	movs	r1, #51	@ 0x33
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f87b 	bl	8000dc4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000cce:	2132      	movs	r1, #50	@ 0x32
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f877 	bl	8000dc4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N); // Set LCD in 4-bit mode
 8000cd6:	2128      	movs	r1, #40	@ 0x28
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f873 	bl	8000dc4 <lcd_write_command>
 8000cde:	e003      	b.n	8000ce8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000ce0:	2138      	movs	r1, #56	@ 0x38
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f86e 	bl	8000dc4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);			       // Clear screen
 8000ce8:	2101      	movs	r1, #1
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f86a 	bl	8000dc4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000cf0:	210c      	movs	r1, #12
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f866 	bl	8000dc4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);		// Increment cursor
 8000cf8:	2106      	movs	r1, #6
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f862 	bl	8000dc4 <lcd_write_command>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Lcd_int>:

/**+++++++++++++++++++++++++++++++++++++++++++
 * Write a number on the current position
 **+++++++++++++++++++++++++++++++++++++++++++*/
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4906      	ldr	r1, [pc, #24]	@ (8000d34 <Lcd_int+0x2c>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f92a 	bl	8003f74 <siprintf>

	Lcd_string(lcd, buffer);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f806 	bl	8000d38 <Lcd_string>
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08006208 	.word	0x08006208

08000d38 <Lcd_string>:

/**+++++++++++++++++++++++++++++++++++++++
 * Write a string on the current position
 *++++++++++++++++++++++++++++++++++++++++*/
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e00a      	b.n	8000d5e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f864 	bl	8000e20 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfc      	ldrb	r4, [r7, #15]
 8000d60:	6838      	ldr	r0, [r7, #0]
 8000d62:	f7ff f9f5 	bl	8000150 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d3ed      	bcc.n	8000d48 <Lcd_string+0x10>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
	...

08000d78 <Lcd_cursor>:

/**++++++++++++++++++++++++++++++++++++++++++*
 * Set the cursor position
 *+++++++++++++++++++++++++++++++++++++++++++*/
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
 8000d84:	4613      	mov	r3, r2
 8000d86:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <Lcd_cursor+0x30>)
 8000d8c:	5cd2      	ldrb	r2, [r2, r3]
 8000d8e:	78bb      	ldrb	r3, [r7, #2]
 8000d90:	4413      	add	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	3b80      	subs	r3, #128	@ 0x80
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f812 	bl	8000dc4 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08006270 	.word	0x08006270

08000dac <Lcd_clear>:

/**++++++++++++++++++*
 * Clear the screen
 *++++++++++++++++++++*/
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000db4:	2101      	movs	r1, #1
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f804 	bl	8000dc4 <lcd_write_command>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <lcd_write_command>:

/**+++++++++++++++++++++++++++++++++++++++*
 * Write a byte to the command register
 *+++++++++++++++++++++++++++++++++++++++*/
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);	 // Write to command register
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	899b      	ldrh	r3, [r3, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f001 fc14 	bl	8002608 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7d9b      	ldrb	r3, [r3, #22]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d111      	bne.n	8000e0c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2204      	movs	r2, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f842 	bl	8000e7c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2204      	movs	r2, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f839 	bl	8000e7c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e0a:	e005      	b.n	8000e18 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f832 	bl	8000e7c <lcd_write>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <lcd_write_data>:

/**+++++++++++++++++++++++++++++++++++*
 * Write a byte to the data register
 *++++++++++++++++++++++++++++++++++++*/
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);  // Write to data register
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6898      	ldr	r0, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	899b      	ldrh	r3, [r3, #12]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	f001 fbe6 	bl	8002608 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7d9b      	ldrb	r3, [r3, #22]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d111      	bne.n	8000e68 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f814 	bl	8000e7c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f80b 	bl	8000e7c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e66:	e005      	b.n	8000e74 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f804 	bl	8000e7c <lcd_write>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <lcd_write>:

/**+++++++++++++++++++++++++++++++++++++++++++++++++++*
 * Set len bits on the bus and toggle the enable line
 *++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e019      	b.n	8000ec6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	8819      	ldrh	r1, [r3, #0]
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	fa42 f303 	asr.w	r3, r2, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f001 fba4 	bl	8002608 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	78bb      	ldrb	r3, [r7, #2]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3e1      	bcc.n	8000e92 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6918      	ldr	r0, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8a9b      	ldrh	r3, [r3, #20]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 fb95 	bl	8002608 <HAL_GPIO_WritePin>
	DELAY(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 fce2 	bl	80018a8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 	 // Data receive on falling edge
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6918      	ldr	r0, [r3, #16]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8a9b      	ldrh	r3, [r3, #20]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 fb8a 	bl	8002608 <HAL_GPIO_WritePin>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <display_int_on_lcd>:

/**++++++++++++++++++++++++*
 * Display Interger on LCD
 *+++++++++++++++++++++++++*/
void display_int_on_lcd(Lcd_HandleTypeDef *lcd, int number) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    char buffer[12]; // Buffer to hold the converted string. Size 12 to hold up to 10 digits plus sign and null terminator.
    snprintf(buffer, sizeof(buffer), "%d", number); // Convert integer to string
 8000f06:	f107 000c 	add.w	r0, r7, #12
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <display_int_on_lcd+0x2c>)
 8000f0e:	210c      	movs	r1, #12
 8000f10:	f002 fffa 	bl	8003f08 <sniprintf>

    if(number < 1000){
    	//Lcd_clear(&lcd);
    }
    Lcd_string(lcd, buffer); // Pass the string to the Lcd_string function
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff0c 	bl	8000d38 <Lcd_string>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08006208 	.word	0x08006208

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b0a0      	sub	sp, #128	@ 0x80
 8000f30:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f000 fc57 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f90f 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 f9c5 	bl	80012c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f3e:	f000 f95b 	bl	80011f8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f42:	f000 f997 	bl	8001274 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // LCD Configuration - 4-bit mode with specific GPIO pins
  Lcd_PortType ports[] = { GPIOC, GPIOC, GPIOC, GPIOC };  // Data ports
 8000f46:	4b77      	ldr	r3, [pc, #476]	@ (8001124 <main+0x1f8>)
 8000f48:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};  // Data pins
 8000f52:	4a75      	ldr	r2, [pc, #468]	@ (8001128 <main+0x1fc>)
 8000f54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5c:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, GPIOC, GPIO_PIN_4, GPIOC, GPIO_PIN_5, LCD_4_BIT_MODE);
 8000f60:	4638      	mov	r0, r7
 8000f62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000f66:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9303      	str	r3, [sp, #12]
 8000f6e:	2320      	movs	r3, #32
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	4b6e      	ldr	r3, [pc, #440]	@ (800112c <main+0x200>)
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2310      	movs	r3, #16
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800112c <main+0x200>)
 8000f7c:	f7ff fe70 	bl	8000c60 <Lcd_create>
 8000f80:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000f84:	463d      	mov	r5, r7
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f8e:	e884 0003 	stmia.w	r4, {r0, r1}

  // Display welcome screen with project information
  Lcd_cursor(&lcd, 0,5);
 8000f92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f96:	2205      	movs	r2, #5
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feec 	bl	8000d78 <Lcd_cursor>
  Lcd_string(&lcd, "WELCOME");
 8000fa0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fa4:	4962      	ldr	r1, [pc, #392]	@ (8001130 <main+0x204>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fec6 	bl	8000d38 <Lcd_string>
  Lcd_cursor(&lcd, 1,0);
 8000fac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fedf 	bl	8000d78 <Lcd_cursor>
  Lcd_string(&lcd, "SMART");
 8000fba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbe:	495d      	ldr	r1, [pc, #372]	@ (8001134 <main+0x208>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff feb9 	bl	8000d38 <Lcd_string>
  Lcd_cursor(&lcd, 2,8);
 8000fc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fca:	2208      	movs	r2, #8
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fed2 	bl	8000d78 <Lcd_cursor>
  Lcd_string(&lcd, "TEMPERATURE");
 8000fd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd8:	4957      	ldr	r1, [pc, #348]	@ (8001138 <main+0x20c>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff feac 	bl	8000d38 <Lcd_string>
  Lcd_cursor(&lcd, 3,0);
 8000fe0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fec5 	bl	8000d78 <Lcd_cursor>
  Lcd_string(&lcd, "PROJECT");
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	4952      	ldr	r1, [pc, #328]	@ (800113c <main+0x210>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe9f 	bl	8000d38 <Lcd_string>

  // Display countdown from 1 to 5 seconds
  for ( int x = 1; x <= 5 ; x++ )
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ffe:	e013      	b.n	8001028 <main+0xfc>
  {
    Lcd_cursor(&lcd, 1,6);
 8001000:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001004:	2206      	movs	r2, #6
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff feb5 	bl	8000d78 <Lcd_cursor>
    Lcd_int(&lcd, x);
 800100e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001012:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe77 	bl	8000d08 <Lcd_int>
    HAL_Delay (1000);  // 1 second delay
 800101a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800101e:	f000 fc43 	bl	80018a8 <HAL_Delay>
  for ( int x = 1; x <= 5 ; x++ )
 8001022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001024:	3301      	adds	r3, #1
 8001026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800102a:	2b05      	cmp	r3, #5
 800102c:	dde8      	ble.n	8001000 <main+0xd4>
  }

  Lcd_clear(&lcd);  // Clear LCD after welcome screen
 800102e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff feba 	bl	8000dac <Lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Read current temperature from TMP36 sensor
    float temp = Read_Temperature();
 8001038:	f000 f9a6 	bl	8001388 <Read_Temperature>
 800103c:	66b8      	str	r0, [r7, #104]	@ 0x68

    // Display temperature on LCD
    Lcd_cursor(&lcd, 1,0);
 800103e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe96 	bl	8000d78 <Lcd_cursor>
    Lcd_string(&lcd, "Temperature:");
 800104c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001050:	493b      	ldr	r1, [pc, #236]	@ (8001140 <main+0x214>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fe70 	bl	8000d38 <Lcd_string>
    Lcd_cursor(&lcd, 1,13);
 8001058:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800105c:	220d      	movs	r2, #13
 800105e:	2101      	movs	r1, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe89 	bl	8000d78 <Lcd_cursor>
    display_int_on_lcd(&lcd, temp);  // Display temperature value
 8001066:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001068:	f7ff fdd4 	bl	8000c14 <__aeabi_f2iz>
 800106c:	4602      	mov	r2, r0
 800106e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff41 	bl	8000efc <display_int_on_lcd>

    // Send temperature data via UART for monitoring/logging
    sprintf(msg, "Temperature: %.2f C\r\n", temp);
 800107a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800107c:	f7ff f9d4 	bl	8000428 <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	f107 0018 	add.w	r0, r7, #24
 8001088:	492e      	ldr	r1, [pc, #184]	@ (8001144 <main+0x218>)
 800108a:	f002 ff73 	bl	8003f74 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f85c 	bl	8000150 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0118 	add.w	r1, r7, #24
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	4828      	ldr	r0, [pc, #160]	@ (8001148 <main+0x21c>)
 80010a6:	f002 f893 	bl	80031d0 <HAL_UART_Transmit>

    // LED Control Logic - High Temperature Warning (Red LED)
    if (temp >= 60.0) {
 80010aa:	4928      	ldr	r1, [pc, #160]	@ (800114c <main+0x220>)
 80010ac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010ae:	f7ff fd9d 	bl	8000bec <__aeabi_fcmpge>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <main+0x198>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);    // Red LED ON - Hot
 80010b8:	2201      	movs	r2, #1
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	4824      	ldr	r0, [pc, #144]	@ (8001150 <main+0x224>)
 80010be:	f001 faa3 	bl	8002608 <HAL_GPIO_WritePin>
 80010c2:	e004      	b.n	80010ce <main+0x1a2>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);  // Red LED OFF
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	4821      	ldr	r0, [pc, #132]	@ (8001150 <main+0x224>)
 80010ca:	f001 fa9d 	bl	8002608 <HAL_GPIO_WritePin>
    }

    if (temp >= 60.0) {
 80010ce:	491f      	ldr	r1, [pc, #124]	@ (800114c <main+0x220>)
 80010d0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010d2:	f7ff fd8b 	bl	8000bec <__aeabi_fcmpge>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <main+0x1be>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // Motor ON
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	481b      	ldr	r0, [pc, #108]	@ (8001150 <main+0x224>)
 80010e4:	f001 fa90 	bl	8002608 <HAL_GPIO_WritePin>
 80010e8:	e005      	b.n	80010f6 <main+0x1ca>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // Motor OFF
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <main+0x224>)
 80010f2:	f001 fa89 	bl	8002608 <HAL_GPIO_WritePin>
    }

    // LED Control Logic - Low Temperature Warning (Green LED)
    if (temp < 20.0) {
 80010f6:	4917      	ldr	r1, [pc, #92]	@ (8001154 <main+0x228>)
 80010f8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010fa:	f7ff fd63 	bl	8000bc4 <__aeabi_fcmplt>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <main+0x1e4>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);    // Green LED ON - Cold
 8001104:	2201      	movs	r2, #1
 8001106:	2120      	movs	r1, #32
 8001108:	4811      	ldr	r0, [pc, #68]	@ (8001150 <main+0x224>)
 800110a:	f001 fa7d 	bl	8002608 <HAL_GPIO_WritePin>
 800110e:	e004      	b.n	800111a <main+0x1ee>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Green LED OFF
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	480e      	ldr	r0, [pc, #56]	@ (8001150 <main+0x224>)
 8001116:	f001 fa77 	bl	8002608 <HAL_GPIO_WritePin>
    }

    HAL_Delay(500);  // 500ms delay between readings
 800111a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111e:	f000 fbc3 	bl	80018a8 <HAL_Delay>
  {
 8001122:	e789      	b.n	8001038 <main+0x10c>
 8001124:	08006258 	.word	0x08006258
 8001128:	08006268 	.word	0x08006268
 800112c:	40011000 	.word	0x40011000
 8001130:	0800620c 	.word	0x0800620c
 8001134:	08006214 	.word	0x08006214
 8001138:	0800621c 	.word	0x0800621c
 800113c:	08006228 	.word	0x08006228
 8001140:	08006230 	.word	0x08006230
 8001144:	08006240 	.word	0x08006240
 8001148:	20000220 	.word	0x20000220
 800114c:	42700000 	.word	0x42700000
 8001150:	40010800 	.word	0x40010800
 8001154:	41a00000 	.word	0x41a00000

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	@ 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2228      	movs	r2, #40	@ 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ff69 	bl	800403e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fa4b 	bl	8002638 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80011a8:	f000 f944 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	230f      	movs	r3, #15
 80011ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fcb8 	bl	8002b3c <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80011d2:	f000 f92f 	bl	8001434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d6:	2302      	movs	r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fe39 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011ec:	f000 f922 	bl	8001434 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	@ 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_ADC1_Init+0x74>)
 800120a:	4a19      	ldr	r2, [pc, #100]	@ (8001270 <MX_ADC1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_ADC1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_ADC1_Init+0x74>)
 8001216:	2201      	movs	r2, #1
 8001218:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_ADC1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_ADC1_Init+0x74>)
 8001222:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001226:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_ADC1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_ADC1_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001234:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_ADC1_Init+0x74>)
 8001236:	f000 fb5b 	bl	80018f0 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 f8f8 	bl	8001434 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001244:	2301      	movs	r3, #1
 8001246:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001248:	2301      	movs	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_ADC1_Init+0x74>)
 8001256:	f000 fde3 	bl	8001e20 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001260:	f000 f8e8 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001f0 	.word	0x200001f0
 8001270:	40012400 	.word	0x40012400

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_USART2_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001280:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012ac:	f001 ff40 	bl	8003130 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 f8bd 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000220 	.word	0x20000220
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_GPIO_Init+0xb4>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a26      	ldr	r2, [pc, #152]	@ (800137c <MX_GPIO_Init+0xb4>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_GPIO_Init+0xb4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_GPIO_Init+0xb4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a20      	ldr	r2, [pc, #128]	@ (800137c <MX_GPIO_Init+0xb4>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <MX_GPIO_Init+0xb4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <MX_GPIO_Init+0xb4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <MX_GPIO_Init+0xb4>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MX_GPIO_Init+0xb4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001324:	2200      	movs	r2, #0
 8001326:	213f      	movs	r1, #63	@ 0x3f
 8001328:	4815      	ldr	r0, [pc, #84]	@ (8001380 <MX_GPIO_Init+0xb8>)
 800132a:	f001 f96d 	bl	8002608 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001334:	4813      	ldr	r0, [pc, #76]	@ (8001384 <MX_GPIO_Init+0xbc>)
 8001336:	f001 f967 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800133a:	233f      	movs	r3, #63	@ 0x3f
 800133c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2302      	movs	r3, #2
 8001348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_GPIO_Init+0xb8>)
 8001352:	f000 ffdd 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001356:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_GPIO_Init+0xbc>)
 8001370:	f000 ffce 	bl	8002310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	40011000 	.word	0x40011000
 8001384:	40010800 	.word	0x40010800

08001388 <Read_Temperature>:
  * @note   TMP36 outputs 10mV per degree Celsius with 500mV offset
  *         Formula: Temperature(°C) = (ADC_Voltage - 0.5V) × 100
  * @retval Temperature in degrees Celsius
  */
float Read_Temperature(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 800138e:	4823      	ldr	r0, [pc, #140]	@ (800141c <Read_Temperature+0x94>)
 8001390:	f000 fb86 	bl	8001aa0 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	4820      	ldr	r0, [pc, #128]	@ (800141c <Read_Temperature+0x94>)
 800139a:	f000 fc2f 	bl	8001bfc <HAL_ADC_PollForConversion>

    // Get the raw ADC value (0-4095 for 12-bit ADC)
    adc_val1 = HAL_ADC_GetValue(&hadc1);
 800139e:	481f      	ldr	r0, [pc, #124]	@ (800141c <Read_Temperature+0x94>)
 80013a0:	f000 fd32 	bl	8001e08 <HAL_ADC_GetValue>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <Read_Temperature+0x98>)
 80013a8:	6013      	str	r3, [r2, #0]

    // Convert ADC value to voltage (assuming 5V reference)
    float voltage = (adc_val1 * 5.0) / 4096.0;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <Read_Temperature+0x98>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f818 	bl	80003e4 <__aeabi_ui2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <Read_Temperature+0x9c>)
 80013ba:	f7ff f88d 	bl	80004d8 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <Read_Temperature+0xa0>)
 80013cc:	f7ff f9ae 	bl	800072c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fb56 	bl	8000a88 <__aeabi_d2f>
 80013dc:	4603      	mov	r3, r0
 80013de:	607b      	str	r3, [r7, #4]

    // Convert voltage to temperature using TMP36 formula
    // TMP36: 10mV/°C with 500mV offset at 0°C
    float temperature = (voltage - 0.5) * 100.0;
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff f821 	bl	8000428 <__aeabi_f2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <Read_Temperature+0xa4>)
 80013ec:	f7fe febc 	bl	8000168 <__aeabi_dsub>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <Read_Temperature+0xa8>)
 80013fe:	f7ff f86b 	bl	80004d8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb3d 	bl	8000a88 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	603b      	str	r3, [r7, #0]

    return temperature;
 8001412:	683b      	ldr	r3, [r7, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200001f0 	.word	0x200001f0
 8001420:	20000268 	.word	0x20000268
 8001424:	40140000 	.word	0x40140000
 8001428:	40b00000 	.word	0x40b00000
 800142c:	3fe00000 	.word	0x3fe00000
 8001430:	40590000 	.word	0x40590000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();  // Disable all interrupts
  while (1)         // Stay in infinite loop for debugging
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_MspInit+0x5c>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a14      	ldr	r2, [pc, #80]	@ (800149c <HAL_MspInit+0x5c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_MspInit+0x5c>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_MspInit+0x5c>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <HAL_MspInit+0x5c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_MspInit+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_MspInit+0x60>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_MspInit+0x60>)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000

080014a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <HAL_ADC_MspInit+0x6c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d121      	bne.n	8001508 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_ADC_MspInit+0x70>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014f4:	2302      	movs	r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f8:	2303      	movs	r3, #3
 80014fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <HAL_ADC_MspInit+0x74>)
 8001504:	f000 ff04 	bl	8002310 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012400 	.word	0x40012400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_UART_MspInit+0x88>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d12f      	bne.n	800159c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 8001542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001546:	61d3      	str	r3, [r2, #28]
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_UART_MspInit+0x8c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800156c:	2304      	movs	r3, #4
 800156e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	480b      	ldr	r0, [pc, #44]	@ (80015ac <HAL_UART_MspInit+0x90>)
 8001580:	f000 fec6 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001584:	2308      	movs	r3, #8
 8001586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <HAL_UART_MspInit+0x90>)
 8001598:	f000 feba 	bl	8002310 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40004400 	.word	0x40004400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f936 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <_kill>:

int _kill(int pid, int sig)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001620:	f002 fd60 	bl	80040e4 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	2216      	movs	r2, #22
 8001628:	601a      	str	r2, [r3, #0]
  return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_exit>:

void _exit (int status)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800163e:	f04f 31ff 	mov.w	r1, #4294967295
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffe7 	bl	8001616 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <_exit+0x12>

0800164c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
  }

  return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e009      	b.n	80016ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf1      	blt.n	8001698 <_write+0x12>
  }
  return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_close>:

int _close(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e4:	605a      	str	r2, [r3, #4]
  return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f002 fcc8 	bl	80040e4 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20002800 	.word	0x20002800
 8001780:	00000400 	.word	0x00000400
 8001784:	2000026c 	.word	0x2000026c
 8001788:	200003c0 	.word	0x200003c0

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001798:	f7ff fff8 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179e:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a0:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b4:	4c09      	ldr	r4, [pc, #36]	@ (80017dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c2:	f002 fc95 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff fbb1 	bl	8000f2c <main>
  bx lr
 80017ca:	4770      	bx	lr
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017d4:	08006634 	.word	0x08006634
  ldr r2, =_sbss
 80017d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017dc:	200003c0 	.word	0x200003c0

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 fd57 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe1e 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fd61 	bl	80022f6 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 fd37 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	@ (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	20000008 	.word	0x20000008
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_IncTick+0x1c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_IncTick+0x20>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a03      	ldr	r2, [pc, #12]	@ (8001890 <HAL_IncTick+0x20>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000008 	.word	0x20000008
 8001890:	20000270 	.word	0x20000270

08001894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b02      	ldr	r3, [pc, #8]	@ (80018a4 <HAL_GetTick+0x10>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000270 	.word	0x20000270

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff fff0 	bl	8001894 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffe0 	bl	8001894 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0be      	b.n	8001a90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fdb8 	bl	80014a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fbc5 	bl	80020c4 <ADC_ConversionStop_Disable>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8099 	bne.w	8001a7e <HAL_ADC_Init+0x18e>
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8095 	bne.w	8001a7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800195c:	f023 0302 	bic.w	r3, r3, #2
 8001960:	f043 0202 	orr.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001970:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7b1b      	ldrb	r3, [r3, #12]
 8001976:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001978:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4313      	orrs	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001988:	d003      	beq.n	8001992 <HAL_ADC_Init+0xa2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d102      	bne.n	8001998 <HAL_ADC_Init+0xa8>
 8001992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001996:	e000      	b.n	800199a <HAL_ADC_Init+0xaa>
 8001998:	2300      	movs	r3, #0
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7d1b      	ldrb	r3, [r3, #20]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d119      	bne.n	80019dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7b1b      	ldrb	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	035a      	lsls	r2, r3, #13
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	e00b      	b.n	80019dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <HAL_ADC_Init+0x1a8>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a0c:	d003      	beq.n	8001a16 <HAL_ADC_Init+0x126>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d104      	bne.n	8001a20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_ADC_Init+0x1ac>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a5a:	e018      	b.n	8001a8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	f023 0312 	bic.w	r3, r3, #18
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a7c:	e007      	b.n	8001a8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	ffe1f7fd 	.word	0xffe1f7fd
 8001a9c:	ff1f0efe 	.word	0xff1f0efe

08001aa0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Start+0x1a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e098      	b.n	8001bec <HAL_ADC_Start+0x14c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 faa4 	bl	8002010 <ADC_Enable>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8087 	bne.w	8001be2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a41      	ldr	r2, [pc, #260]	@ (8001bf4 <HAL_ADC_Start+0x154>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_Start+0x5e>
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <HAL_ADC_Start+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d115      	bne.n	8001b2a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d026      	beq.n	8001b66 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b28:	e01d      	b.n	8001b66 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <HAL_ADC_Start+0x158>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_Start+0xaa>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf4 <HAL_ADC_Start+0x154>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10d      	bne.n	8001b66 <HAL_ADC_Start+0xc6>
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf8 <HAL_ADC_Start+0x158>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	f023 0206 	bic.w	r2, r3, #6
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b7e:	e002      	b.n	8001b86 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0202 	mvn.w	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ba2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ba6:	d113      	bne.n	8001bd0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bac:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <HAL_ADC_Start+0x154>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_ADC_Start+0x158>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	e00c      	b.n	8001bea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e003      	b.n	8001bea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40012800 	.word	0x40012800
 8001bf8:	40012400 	.word	0x40012400

08001bfc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c12:	f7ff fe3f 	bl	8001894 <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	f043 0220 	orr.w	r2, r3, #32
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0d3      	b.n	8001de6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d131      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d12a      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c5a:	e021      	b.n	8001ca0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c62:	d01d      	beq.n	8001ca0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_ADC_PollForConversion+0x7e>
 8001c6a:	f7ff fe13 	bl	8001894 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d212      	bcs.n	8001ca0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0a2      	b.n	8001de6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0d6      	beq.n	8001c5c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cae:	e070      	b.n	8001d92 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <HAL_ADC_PollForConversion+0x1f4>)
 8001cb2:	681c      	ldr	r4, [r3, #0]
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f001 f985 	bl	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <HAL_ADC_PollForConversion+0x1f8>)
 8001cc8:	400b      	ands	r3, r1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x104>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68d9      	ldr	r1, [r3, #12]
 8001cd4:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <HAL_ADC_PollForConversion+0x1fc>)
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x104>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	4b46      	ldr	r3, [pc, #280]	@ (8001dfc <HAL_ADC_PollForConversion+0x200>)
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x100>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <HAL_ADC_PollForConversion+0x204>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x100>
 8001cf8:	2314      	movs	r3, #20
 8001cfa:	e020      	b.n	8001d3e <HAL_ADC_PollForConversion+0x142>
 8001cfc:	2329      	movs	r3, #41	@ 0x29
 8001cfe:	e01e      	b.n	8001d3e <HAL_ADC_PollForConversion+0x142>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6919      	ldr	r1, [r3, #16]
 8001d06:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_ADC_PollForConversion+0x200>)
 8001d08:	400b      	ands	r3, r1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x120>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68d9      	ldr	r1, [r3, #12]
 8001d14:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <HAL_ADC_PollForConversion+0x204>)
 8001d16:	400b      	ands	r3, r1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <HAL_ADC_PollForConversion+0x13c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_ADC_PollForConversion+0x208>)
 8001d24:	400b      	ands	r3, r1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x140>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <HAL_ADC_PollForConversion+0x208>)
 8001d32:	400b      	ands	r3, r1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x140>
 8001d38:	2354      	movs	r3, #84	@ 0x54
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_PollForConversion+0x142>
 8001d3c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d44:	e021      	b.n	8001d8a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d01a      	beq.n	8001d84 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_ADC_PollForConversion+0x168>
 8001d54:	f7ff fd9e 	bl	8001894 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d20f      	bcs.n	8001d84 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d90b      	bls.n	8001d84 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	f043 0204 	orr.w	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e030      	b.n	8001de6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d8d9      	bhi.n	8001d46 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0212 	mvn.w	r2, #18
 8001d9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001db2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001db6:	d115      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000
 8001df4:	24924924 	.word	0x24924924
 8001df8:	00924924 	.word	0x00924924
 8001dfc:	12492492 	.word	0x12492492
 8001e00:	00492492 	.word	0x00492492
 8001e04:	00249249 	.word	0x00249249

08001e08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x20>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0dc      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1da>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d81c      	bhi.n	8001e8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b05      	subs	r3, #5
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b05      	subs	r3, #5
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e88:	e03c      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d81c      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b23      	subs	r3, #35	@ 0x23
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4019      	ands	r1, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b23      	subs	r3, #35	@ 0x23
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eca:	e01b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b41      	subs	r3, #65	@ 0x41
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4019      	ands	r1, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	@ 0x41
 8001ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d91c      	bls.n	8001f46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4019      	ands	r1, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6898      	ldr	r0, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	3b1e      	subs	r3, #30
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e019      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6919      	ldr	r1, [r3, #16]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	2207      	movs	r2, #7
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4019      	ands	r1, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b10      	cmp	r3, #16
 8001f80:	d003      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f86:	2b11      	cmp	r3, #17
 8001f88:	d132      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002004 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d125      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001fb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d11a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40012400 	.word	0x40012400
 8002008:	20000000 	.word	0x20000000
 800200c:	431bde83 	.word	0x431bde83

08002010 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d040      	beq.n	80020b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <ADC_Enable+0xac>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <ADC_Enable+0xb0>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9b      	lsrs	r3, r3, #18
 800204a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204c:	e002      	b.n	8002054 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3b01      	subs	r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f9      	bne.n	800204e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff fc1b 	bl	8001894 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002060:	e01f      	b.n	80020a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002062:	f7ff fc17 	bl	8001894 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d918      	bls.n	80020a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d011      	beq.n	80020a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e007      	b.n	80020b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d1d8      	bne.n	8002062 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d12e      	bne.n	800213c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ee:	f7ff fbd1 	bl	8001894 <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f4:	e01b      	b.n	800212e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f6:	f7ff fbcd 	bl	8001894 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d914      	bls.n	800212e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10d      	bne.n	800212e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d0dc      	beq.n	80020f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	@ (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	@ 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff90 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff49 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff5e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff90 	bl	8002200 <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5f 	bl	80021ac <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffb0 	bl	8002264 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	@ 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e161      	b.n	80025e8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8150 	bne.w	80025e2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a97      	ldr	r2, [pc, #604]	@ (80025a4 <HAL_GPIO_Init+0x294>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800234c:	4a95      	ldr	r2, [pc, #596]	@ (80025a4 <HAL_GPIO_Init+0x294>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d875      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002352:	4a95      	ldr	r2, [pc, #596]	@ (80025a8 <HAL_GPIO_Init+0x298>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d058      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002358:	4a93      	ldr	r2, [pc, #588]	@ (80025a8 <HAL_GPIO_Init+0x298>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d86f      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800235e:	4a93      	ldr	r2, [pc, #588]	@ (80025ac <HAL_GPIO_Init+0x29c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d052      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002364:	4a91      	ldr	r2, [pc, #580]	@ (80025ac <HAL_GPIO_Init+0x29c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d869      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800236a:	4a91      	ldr	r2, [pc, #580]	@ (80025b0 <HAL_GPIO_Init+0x2a0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04c      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002370:	4a8f      	ldr	r2, [pc, #572]	@ (80025b0 <HAL_GPIO_Init+0x2a0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d863      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002376:	4a8f      	ldr	r2, [pc, #572]	@ (80025b4 <HAL_GPIO_Init+0x2a4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d046      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800237c:	4a8d      	ldr	r2, [pc, #564]	@ (80025b4 <HAL_GPIO_Init+0x2a4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d85d      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d82a      	bhi.n	80023dc <HAL_GPIO_Init+0xcc>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d859      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800238a:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <HAL_GPIO_Init+0x80>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240b 	.word	0x0800240b
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023f7 	.word	0x080023f7
 800239c:	08002439 	.word	0x08002439
 80023a0:	0800243f 	.word	0x0800243f
 80023a4:	0800243f 	.word	0x0800243f
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	0800243f 	.word	0x0800243f
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	0800243f 	.word	0x0800243f
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800243f 	.word	0x0800243f
 80023c0:	0800243f 	.word	0x0800243f
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	0800243f 	.word	0x0800243f
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	0800243f 	.word	0x0800243f
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	08002401 	.word	0x08002401
 80023dc:	4a76      	ldr	r2, [pc, #472]	@ (80025b8 <HAL_GPIO_Init+0x2a8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e2:	e02c      	b.n	800243e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e029      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	3308      	adds	r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e01f      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e01a      	b.n	8002440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2304      	movs	r3, #4
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e013      	b.n	8002440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	611a      	str	r2, [r3, #16]
          break;
 800242a:	e009      	b.n	8002440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
          break;
 8002436:	e003      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x130>
          break;
 800243e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	@ 0xff
 8002444:	d801      	bhi.n	800244a <HAL_GPIO_Init+0x13a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <HAL_GPIO_Init+0x13e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	@ 0xff
 8002454:	d802      	bhi.n	800245c <HAL_GPIO_Init+0x14c>
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x152>
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	3b08      	subs	r3, #8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	210f      	movs	r1, #15
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a9 	beq.w	80025e2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002490:	4b4a      	ldr	r3, [pc, #296]	@ (80025bc <HAL_GPIO_Init+0x2ac>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a49      	ldr	r2, [pc, #292]	@ (80025bc <HAL_GPIO_Init+0x2ac>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_GPIO_Init+0x2ac>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a8:	4a45      	ldr	r2, [pc, #276]	@ (80025c0 <HAL_GPIO_Init+0x2b0>)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3d      	ldr	r2, [pc, #244]	@ (80025c4 <HAL_GPIO_Init+0x2b4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1e0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3c      	ldr	r2, [pc, #240]	@ (80025c8 <HAL_GPIO_Init+0x2b8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1dc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3b      	ldr	r2, [pc, #236]	@ (80025cc <HAL_GPIO_Init+0x2bc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1d8>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e004      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024e8:	2303      	movs	r3, #3
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024f0:	2300      	movs	r3, #0
 80024f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002502:	492f      	ldr	r1, [pc, #188]	@ (80025c0 <HAL_GPIO_Init+0x2b0>)
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800251c:	4b2c      	ldr	r3, [pc, #176]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	492b      	ldr	r1, [pc, #172]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800252a:	4b29      	ldr	r3, [pc, #164]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	43db      	mvns	r3, r3
 8002532:	4927      	ldr	r1, [pc, #156]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002534:	4013      	ands	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4921      	ldr	r1, [pc, #132]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	60cb      	str	r3, [r1, #12]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002552:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	491d      	ldr	r1, [pc, #116]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800255c:	4013      	ands	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800256c:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4917      	ldr	r1, [pc, #92]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	4913      	ldr	r1, [pc, #76]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002584:	4013      	ands	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01f      	beq.n	80025d4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002594:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	490d      	ldr	r1, [pc, #52]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e01f      	b.n	80025e2 <HAL_GPIO_Init+0x2d2>
 80025a2:	bf00      	nop
 80025a4:	10320000 	.word	0x10320000
 80025a8:	10310000 	.word	0x10310000
 80025ac:	10220000 	.word	0x10220000
 80025b0:	10210000 	.word	0x10210000
 80025b4:	10120000 	.word	0x10120000
 80025b8:	10110000 	.word	0x10110000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	40010c00 	.word	0x40010c00
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_GPIO_Init+0x2f4>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4909      	ldr	r1, [pc, #36]	@ (8002604 <HAL_GPIO_Init+0x2f4>)
 80025de:	4013      	ands	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f ae96 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	372c      	adds	r7, #44	@ 0x2c
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e272      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8087 	beq.w	8002766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002658:	4b92      	ldr	r3, [pc, #584]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00c      	beq.n	800267e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002664:	4b8f      	ldr	r3, [pc, #572]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d112      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
 8002670:	4b8c      	ldr	r3, [pc, #560]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b89      	ldr	r3, [pc, #548]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06c      	beq.n	8002764 <HAL_RCC_OscConfig+0x12c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d168      	bne.n	8002764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e24c      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x76>
 80026a0:	4b80      	ldr	r3, [pc, #512]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7f      	ldr	r2, [pc, #508]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e02e      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x98>
 80026b6:	4b7b      	ldr	r3, [pc, #492]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a7a      	ldr	r2, [pc, #488]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b78      	ldr	r3, [pc, #480]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a77      	ldr	r2, [pc, #476]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbc>
 80026da:	4b72      	ldr	r3, [pc, #456]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a71      	ldr	r2, [pc, #452]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026f4:	4b6b      	ldr	r3, [pc, #428]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6a      	ldr	r2, [pc, #424]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b68      	ldr	r3, [pc, #416]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a67      	ldr	r2, [pc, #412]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f8be 	bl	8001894 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f8ba 	bl	8001894 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e200      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5d      	ldr	r3, [pc, #372]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xe4>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f8aa 	bl	8001894 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f8a6 	bl	8001894 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1ec      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b53      	ldr	r3, [pc, #332]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x10c>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002772:	4b4c      	ldr	r3, [pc, #304]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
 800278a:	4b46      	ldr	r3, [pc, #280]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c0      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4939      	ldr	r1, [pc, #228]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff f85f 	bl	8001894 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff f85b 	bl	8001894 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a1      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2d      	ldr	r3, [pc, #180]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4927      	ldr	r1, [pc, #156]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <HAL_RCC_OscConfig+0x270>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff f83e 	bl	8001894 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff f83a 	bl	8001894 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e180      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d03a      	beq.n	80028bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d019      	beq.n	8002882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff f81e 	bl	8001894 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff f81a 	bl	8001894 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e160      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f000 face 	bl	8002e1c <RCC_Delay>
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_RCC_OscConfig+0x274>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff f804 	bl	8001894 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7ff f800 	bl	8001894 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d908      	bls.n	80028b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e146      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	42420000 	.word	0x42420000
 80028ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b92      	ldr	r3, [pc, #584]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e9      	bne.n	8002890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a6 	beq.w	8002a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b8b      	ldr	r3, [pc, #556]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a87      	ldr	r2, [pc, #540]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b82      	ldr	r3, [pc, #520]	@ (8002b00 <HAL_RCC_OscConfig+0x4c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <HAL_RCC_OscConfig+0x4c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7e      	ldr	r2, [pc, #504]	@ (8002b00 <HAL_RCC_OscConfig+0x4c8>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe ffc1 	bl	8001894 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe ffbd 	bl	8001894 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	@ 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e103      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <HAL_RCC_OscConfig+0x4c8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x312>
 800293c:	4b6f      	ldr	r3, [pc, #444]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a6e      	ldr	r2, [pc, #440]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e02d      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x334>
 8002952:	4b6a      	ldr	r3, [pc, #424]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a69      	ldr	r2, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	4b67      	ldr	r3, [pc, #412]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a66      	ldr	r2, [pc, #408]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	e01c      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x356>
 8002974:	4b61      	ldr	r3, [pc, #388]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a60      	ldr	r2, [pc, #384]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	4b5e      	ldr	r3, [pc, #376]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e00b      	b.n	80029a6 <HAL_RCC_OscConfig+0x36e>
 800298e:	4b5b      	ldr	r3, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a5a      	ldr	r2, [pc, #360]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6213      	str	r3, [r2, #32]
 800299a:	4b58      	ldr	r3, [pc, #352]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a57      	ldr	r2, [pc, #348]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d015      	beq.n	80029da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe ff71 	bl	8001894 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe ff6d 	bl	8001894 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0b1      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b4b      	ldr	r3, [pc, #300]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ee      	beq.n	80029b6 <HAL_RCC_OscConfig+0x37e>
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe ff5b 	bl	8001894 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe ff57 	bl	8001894 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e09b      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	4b40      	ldr	r3, [pc, #256]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8087 	beq.w	8002b2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d061      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d146      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <HAL_RCC_OscConfig+0x4cc>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe ff2b 	bl	8001894 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe ff27 	bl	8001894 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e06d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a54:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a68:	d108      	bne.n	8002a7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a6a:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4921      	ldr	r1, [pc, #132]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a19      	ldr	r1, [r3, #32]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	491b      	ldr	r1, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fefb 	bl	8001894 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fef7 	bl	8001894 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e03d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46a>
 8002ac0:	e035      	b.n	8002b2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_OscConfig+0x4cc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fee4 	bl	8001894 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fee0 	bl	8001894 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e026      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x498>
 8002aee:	e01e      	b.n	8002b2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e019      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCC_OscConfig+0x500>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d0      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d910      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b67      	ldr	r3, [pc, #412]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4965      	ldr	r1, [pc, #404]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d040      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d115      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b41      	ldr	r3, [pc, #260]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e073      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06b      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b39      	ldr	r3, [pc, #228]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4936      	ldr	r1, [pc, #216]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fe32 	bl	8001894 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7fe fe2e 	bl	8001894 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e053      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d210      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b24      	ldr	r3, [pc, #144]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4922      	ldr	r1, [pc, #136]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fd90 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08006274 	.word	0x08006274
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x30>
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x36>
 8002d3e:	e027      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d42:	613b      	str	r3, [r7, #16]
      break;
 8002d44:	e027      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4a17      	ldr	r2, [pc, #92]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0c5b      	lsrs	r3, r3, #17
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	4a11      	ldr	r2, [pc, #68]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d72:	fb03 f202 	mul.w	r2, r3, r2
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e004      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	613b      	str	r3, [r7, #16]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	613b      	str	r3, [r7, #16]
      break;
 8002d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d96:	693b      	ldr	r3, [r7, #16]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	0800628c 	.word	0x0800628c
 8002db0:	0800629c 	.word	0x0800629c
 8002db4:	003d0900 	.word	0x003d0900

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff2 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08006284 	.word	0x08006284

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0adb      	lsrs	r3, r3, #11
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08006284 	.word	0x08006284

08002e1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e24:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <RCC_Delay+0x34>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <RCC_Delay+0x38>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0a5b      	lsrs	r3, r3, #9
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e38:	bf00      	nop
  }
  while (Delay --);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	60fa      	str	r2, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f9      	bne.n	8002e38 <RCC_Delay+0x1c>
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	20000000 	.word	0x20000000
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d07d      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e78:	4b4f      	ldr	r3, [pc, #316]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	61d3      	str	r3, [r2, #28]
 8002e90:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b46      	ldr	r3, [pc, #280]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d118      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eac:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fcec 	bl	8001894 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fe fce8 	bl	8001894 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06d      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ede:	4b36      	ldr	r3, [pc, #216]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02e      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d027      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efc:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f06:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f12:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d014      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fcb7 	bl	8001894 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fcb3 	bl	8001894 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e036      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4917      	ldr	r1, [pc, #92]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	490b      	ldr	r1, [pc, #44]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4904      	ldr	r1, [pc, #16]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42420440 	.word	0x42420440

08002fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b10      	cmp	r3, #16
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	f200 808a 	bhi.w	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d045      	beq.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d075      	beq.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ffa:	e082      	b.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ffc:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003002:	4b45      	ldr	r3, [pc, #276]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d07b      	beq.n	8003106 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	4a41      	ldr	r2, [pc, #260]	@ (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003026:	4b3c      	ldr	r3, [pc, #240]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0c5b      	lsrs	r3, r3, #17
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	4a3b      	ldr	r2, [pc, #236]	@ (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003040:	4a38      	ldr	r2, [pc, #224]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e004      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4a34      	ldr	r2, [pc, #208]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800305c:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003068:	d102      	bne.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	61bb      	str	r3, [r7, #24]
      break;
 800306e:	e04a      	b.n	8003106 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4a2d      	ldr	r2, [pc, #180]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
      break;
 800307e:	e042      	b.n	8003106 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003080:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003090:	d108      	bne.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800309c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e01f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ae:	d109      	bne.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e00f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ce:	d11c      	bne.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030e0:	61bb      	str	r3, [r7, #24]
      break;
 80030e2:	e012      	b.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030e4:	e011      	b.n	800310a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030e6:	f7ff fe85 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0b9b      	lsrs	r3, r3, #14
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	61bb      	str	r3, [r7, #24]
      break;
 8003100:	e004      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800310a:	bf00      	nop
    }
  }
  return (frequency);
 800310c:	69bb      	ldr	r3, [r7, #24]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	080062a0 	.word	0x080062a0
 8003120:	080062b0 	.word	0x080062b0
 8003124:	007a1200 	.word	0x007a1200
 8003128:	003d0900 	.word	0x003d0900
 800312c:	aaaaaaab 	.word	0xaaaaaaab

08003130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe f9e0 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	@ 0x24
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f91d 	bl	80033b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d16d      	bne.n	80032cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Transmit+0x2c>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e066      	b.n	80032ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2221      	movs	r2, #33	@ 0x21
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320e:	f7fe fb41 	bl	8001894 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003228:	d108      	bne.n	800323c <HAL_UART_Transmit+0x6c>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e003      	b.n	8003244 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003244:	e02a      	b.n	800329c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	2180      	movs	r1, #128	@ 0x80
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f840 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e036      	b.n	80032ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	3302      	adds	r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e007      	b.n	800328e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3301      	adds	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1cf      	bne.n	8003246 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2140      	movs	r1, #64	@ 0x40
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f810 	bl	80032d6 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e006      	b.n	80032ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b090      	sub	sp, #64	@ 0x40
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	e050      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d04c      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <UART_WaitOnFlagUntilTimeout+0x30>
 80032f6:	f7fe facd 	bl	8001894 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003302:	429a      	cmp	r2, r3
 8003304:	d241      	bcs.n	800338a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003326:	637a      	str	r2, [r7, #52]	@ 0x34
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800332c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	613b      	str	r3, [r7, #16]
   return(result);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800335a:	623a      	str	r2, [r7, #32]
 800335c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	69f9      	ldr	r1, [r7, #28]
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	61bb      	str	r3, [r7, #24]
   return(result);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e5      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e00f      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d09f      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3740      	adds	r7, #64	@ 0x40
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033ee:	f023 030c 	bic.w	r3, r3, #12
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2c      	ldr	r2, [pc, #176]	@ (80034c8 <UART_SetConfig+0x114>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d103      	bne.n	8003424 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7ff fcea 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	e002      	b.n	800342a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff fcd2 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009a      	lsls	r2, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	4a22      	ldr	r2, [pc, #136]	@ (80034cc <UART_SetConfig+0x118>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	0119      	lsls	r1, r3, #4
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009a      	lsls	r2, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003460:	4b1a      	ldr	r3, [pc, #104]	@ (80034cc <UART_SetConfig+0x118>)
 8003462:	fba3 0302 	umull	r0, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2064      	movs	r0, #100	@ 0x64
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	3332      	adds	r3, #50	@ 0x32
 8003474:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <UART_SetConfig+0x118>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003480:	4419      	add	r1, r3
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fbb2 f2f3 	udiv	r2, r2, r3
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <UART_SetConfig+0x118>)
 800349a:	fba3 0302 	umull	r0, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2064      	movs	r0, #100	@ 0x64
 80034a2:	fb00 f303 	mul.w	r3, r0, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	@ 0x32
 80034ac:	4a07      	ldr	r2, [pc, #28]	@ (80034cc <UART_SetConfig+0x118>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	440a      	add	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40013800 	.word	0x40013800
 80034cc:	51eb851f 	.word	0x51eb851f

080034d0 <__cvt>:
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d6:	461d      	mov	r5, r3
 80034d8:	bfbb      	ittet	lt
 80034da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80034de:	461d      	movlt	r5, r3
 80034e0:	2300      	movge	r3, #0
 80034e2:	232d      	movlt	r3, #45	@ 0x2d
 80034e4:	b088      	sub	sp, #32
 80034e6:	4614      	mov	r4, r2
 80034e8:	bfb8      	it	lt
 80034ea:	4614      	movlt	r4, r2
 80034ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80034ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80034f0:	7013      	strb	r3, [r2, #0]
 80034f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80034f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80034f8:	f023 0820 	bic.w	r8, r3, #32
 80034fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003500:	d005      	beq.n	800350e <__cvt+0x3e>
 8003502:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003506:	d100      	bne.n	800350a <__cvt+0x3a>
 8003508:	3601      	adds	r6, #1
 800350a:	2302      	movs	r3, #2
 800350c:	e000      	b.n	8003510 <__cvt+0x40>
 800350e:	2303      	movs	r3, #3
 8003510:	aa07      	add	r2, sp, #28
 8003512:	9204      	str	r2, [sp, #16]
 8003514:	aa06      	add	r2, sp, #24
 8003516:	e9cd a202 	strd	sl, r2, [sp, #8]
 800351a:	e9cd 3600 	strd	r3, r6, [sp]
 800351e:	4622      	mov	r2, r4
 8003520:	462b      	mov	r3, r5
 8003522:	f000 fea5 	bl	8004270 <_dtoa_r>
 8003526:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800352a:	4607      	mov	r7, r0
 800352c:	d119      	bne.n	8003562 <__cvt+0x92>
 800352e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003530:	07db      	lsls	r3, r3, #31
 8003532:	d50e      	bpl.n	8003552 <__cvt+0x82>
 8003534:	eb00 0906 	add.w	r9, r0, r6
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	4620      	mov	r0, r4
 800353e:	4629      	mov	r1, r5
 8003540:	f7fd fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8003544:	b108      	cbz	r0, 800354a <__cvt+0x7a>
 8003546:	f8cd 901c 	str.w	r9, [sp, #28]
 800354a:	2230      	movs	r2, #48	@ 0x30
 800354c:	9b07      	ldr	r3, [sp, #28]
 800354e:	454b      	cmp	r3, r9
 8003550:	d31e      	bcc.n	8003590 <__cvt+0xc0>
 8003552:	4638      	mov	r0, r7
 8003554:	9b07      	ldr	r3, [sp, #28]
 8003556:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003558:	1bdb      	subs	r3, r3, r7
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	b008      	add	sp, #32
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003562:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003566:	eb00 0906 	add.w	r9, r0, r6
 800356a:	d1e5      	bne.n	8003538 <__cvt+0x68>
 800356c:	7803      	ldrb	r3, [r0, #0]
 800356e:	2b30      	cmp	r3, #48	@ 0x30
 8003570:	d10a      	bne.n	8003588 <__cvt+0xb8>
 8003572:	2200      	movs	r2, #0
 8003574:	2300      	movs	r3, #0
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800357e:	b918      	cbnz	r0, 8003588 <__cvt+0xb8>
 8003580:	f1c6 0601 	rsb	r6, r6, #1
 8003584:	f8ca 6000 	str.w	r6, [sl]
 8003588:	f8da 3000 	ldr.w	r3, [sl]
 800358c:	4499      	add	r9, r3
 800358e:	e7d3      	b.n	8003538 <__cvt+0x68>
 8003590:	1c59      	adds	r1, r3, #1
 8003592:	9107      	str	r1, [sp, #28]
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e7d9      	b.n	800354c <__cvt+0x7c>

08003598 <__exponent>:
 8003598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800359a:	2900      	cmp	r1, #0
 800359c:	bfb6      	itet	lt
 800359e:	232d      	movlt	r3, #45	@ 0x2d
 80035a0:	232b      	movge	r3, #43	@ 0x2b
 80035a2:	4249      	neglt	r1, r1
 80035a4:	2909      	cmp	r1, #9
 80035a6:	7002      	strb	r2, [r0, #0]
 80035a8:	7043      	strb	r3, [r0, #1]
 80035aa:	dd29      	ble.n	8003600 <__exponent+0x68>
 80035ac:	f10d 0307 	add.w	r3, sp, #7
 80035b0:	461d      	mov	r5, r3
 80035b2:	270a      	movs	r7, #10
 80035b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80035b8:	461a      	mov	r2, r3
 80035ba:	fb07 1416 	mls	r4, r7, r6, r1
 80035be:	3430      	adds	r4, #48	@ 0x30
 80035c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035c4:	460c      	mov	r4, r1
 80035c6:	2c63      	cmp	r4, #99	@ 0x63
 80035c8:	4631      	mov	r1, r6
 80035ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80035ce:	dcf1      	bgt.n	80035b4 <__exponent+0x1c>
 80035d0:	3130      	adds	r1, #48	@ 0x30
 80035d2:	1e94      	subs	r4, r2, #2
 80035d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035d8:	4623      	mov	r3, r4
 80035da:	1c41      	adds	r1, r0, #1
 80035dc:	42ab      	cmp	r3, r5
 80035de:	d30a      	bcc.n	80035f6 <__exponent+0x5e>
 80035e0:	f10d 0309 	add.w	r3, sp, #9
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	42ac      	cmp	r4, r5
 80035e8:	bf88      	it	hi
 80035ea:	2300      	movhi	r3, #0
 80035ec:	3302      	adds	r3, #2
 80035ee:	4403      	add	r3, r0
 80035f0:	1a18      	subs	r0, r3, r0
 80035f2:	b003      	add	sp, #12
 80035f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80035fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80035fe:	e7ed      	b.n	80035dc <__exponent+0x44>
 8003600:	2330      	movs	r3, #48	@ 0x30
 8003602:	3130      	adds	r1, #48	@ 0x30
 8003604:	7083      	strb	r3, [r0, #2]
 8003606:	70c1      	strb	r1, [r0, #3]
 8003608:	1d03      	adds	r3, r0, #4
 800360a:	e7f1      	b.n	80035f0 <__exponent+0x58>

0800360c <_printf_float>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	b091      	sub	sp, #68	@ 0x44
 8003612:	460c      	mov	r4, r1
 8003614:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003618:	4616      	mov	r6, r2
 800361a:	461f      	mov	r7, r3
 800361c:	4605      	mov	r5, r0
 800361e:	f000 fd17 	bl	8004050 <_localeconv_r>
 8003622:	6803      	ldr	r3, [r0, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	9308      	str	r3, [sp, #32]
 8003628:	f7fc fd92 	bl	8000150 <strlen>
 800362c:	2300      	movs	r3, #0
 800362e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003630:	f8d8 3000 	ldr.w	r3, [r8]
 8003634:	9009      	str	r0, [sp, #36]	@ 0x24
 8003636:	3307      	adds	r3, #7
 8003638:	f023 0307 	bic.w	r3, r3, #7
 800363c:	f103 0208 	add.w	r2, r3, #8
 8003640:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003644:	f8d4 b000 	ldr.w	fp, [r4]
 8003648:	f8c8 2000 	str.w	r2, [r8]
 800364c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003650:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003654:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003656:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800365a:	f04f 32ff 	mov.w	r2, #4294967295
 800365e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003662:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003666:	4b9c      	ldr	r3, [pc, #624]	@ (80038d8 <_printf_float+0x2cc>)
 8003668:	f7fd f9d0 	bl	8000a0c <__aeabi_dcmpun>
 800366c:	bb70      	cbnz	r0, 80036cc <_printf_float+0xc0>
 800366e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	4b98      	ldr	r3, [pc, #608]	@ (80038d8 <_printf_float+0x2cc>)
 8003678:	f7fd f9aa 	bl	80009d0 <__aeabi_dcmple>
 800367c:	bb30      	cbnz	r0, 80036cc <_printf_float+0xc0>
 800367e:	2200      	movs	r2, #0
 8003680:	2300      	movs	r3, #0
 8003682:	4640      	mov	r0, r8
 8003684:	4649      	mov	r1, r9
 8003686:	f7fd f999 	bl	80009bc <__aeabi_dcmplt>
 800368a:	b110      	cbz	r0, 8003692 <_printf_float+0x86>
 800368c:	232d      	movs	r3, #45	@ 0x2d
 800368e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003692:	4a92      	ldr	r2, [pc, #584]	@ (80038dc <_printf_float+0x2d0>)
 8003694:	4b92      	ldr	r3, [pc, #584]	@ (80038e0 <_printf_float+0x2d4>)
 8003696:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800369a:	bf8c      	ite	hi
 800369c:	4690      	movhi	r8, r2
 800369e:	4698      	movls	r8, r3
 80036a0:	2303      	movs	r3, #3
 80036a2:	f04f 0900 	mov.w	r9, #0
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	f02b 0304 	bic.w	r3, fp, #4
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	4633      	mov	r3, r6
 80036b0:	4621      	mov	r1, r4
 80036b2:	4628      	mov	r0, r5
 80036b4:	9700      	str	r7, [sp, #0]
 80036b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80036b8:	f000 f9d4 	bl	8003a64 <_printf_common>
 80036bc:	3001      	adds	r0, #1
 80036be:	f040 8090 	bne.w	80037e2 <_printf_float+0x1d6>
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295
 80036c6:	b011      	add	sp, #68	@ 0x44
 80036c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	4640      	mov	r0, r8
 80036d2:	4649      	mov	r1, r9
 80036d4:	f7fd f99a 	bl	8000a0c <__aeabi_dcmpun>
 80036d8:	b148      	cbz	r0, 80036ee <_printf_float+0xe2>
 80036da:	464b      	mov	r3, r9
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bfb8      	it	lt
 80036e0:	232d      	movlt	r3, #45	@ 0x2d
 80036e2:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <_printf_float+0x2d8>)
 80036e4:	bfb8      	it	lt
 80036e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80036ea:	4b7f      	ldr	r3, [pc, #508]	@ (80038e8 <_printf_float+0x2dc>)
 80036ec:	e7d3      	b.n	8003696 <_printf_float+0x8a>
 80036ee:	6863      	ldr	r3, [r4, #4]
 80036f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	d13f      	bne.n	8003778 <_printf_float+0x16c>
 80036f8:	2306      	movs	r3, #6
 80036fa:	6063      	str	r3, [r4, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	9206      	str	r2, [sp, #24]
 8003706:	aa0e      	add	r2, sp, #56	@ 0x38
 8003708:	e9cd a204 	strd	sl, r2, [sp, #16]
 800370c:	aa0d      	add	r2, sp, #52	@ 0x34
 800370e:	9203      	str	r2, [sp, #12]
 8003710:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003714:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003718:	6863      	ldr	r3, [r4, #4]
 800371a:	4642      	mov	r2, r8
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4628      	mov	r0, r5
 8003720:	464b      	mov	r3, r9
 8003722:	910a      	str	r1, [sp, #40]	@ 0x28
 8003724:	f7ff fed4 	bl	80034d0 <__cvt>
 8003728:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800372a:	4680      	mov	r8, r0
 800372c:	2947      	cmp	r1, #71	@ 0x47
 800372e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003730:	d128      	bne.n	8003784 <_printf_float+0x178>
 8003732:	1cc8      	adds	r0, r1, #3
 8003734:	db02      	blt.n	800373c <_printf_float+0x130>
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	4299      	cmp	r1, r3
 800373a:	dd40      	ble.n	80037be <_printf_float+0x1b2>
 800373c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003740:	fa5f fa8a 	uxtb.w	sl, sl
 8003744:	4652      	mov	r2, sl
 8003746:	3901      	subs	r1, #1
 8003748:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800374c:	910d      	str	r1, [sp, #52]	@ 0x34
 800374e:	f7ff ff23 	bl	8003598 <__exponent>
 8003752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003754:	4681      	mov	r9, r0
 8003756:	1813      	adds	r3, r2, r0
 8003758:	2a01      	cmp	r2, #1
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	dc02      	bgt.n	8003764 <_printf_float+0x158>
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	07d2      	lsls	r2, r2, #31
 8003762:	d501      	bpl.n	8003768 <_printf_float+0x15c>
 8003764:	3301      	adds	r3, #1
 8003766:	6123      	str	r3, [r4, #16]
 8003768:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800376c:	2b00      	cmp	r3, #0
 800376e:	d09e      	beq.n	80036ae <_printf_float+0xa2>
 8003770:	232d      	movs	r3, #45	@ 0x2d
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003776:	e79a      	b.n	80036ae <_printf_float+0xa2>
 8003778:	2947      	cmp	r1, #71	@ 0x47
 800377a:	d1bf      	bne.n	80036fc <_printf_float+0xf0>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1bd      	bne.n	80036fc <_printf_float+0xf0>
 8003780:	2301      	movs	r3, #1
 8003782:	e7ba      	b.n	80036fa <_printf_float+0xee>
 8003784:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003788:	d9dc      	bls.n	8003744 <_printf_float+0x138>
 800378a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800378e:	d118      	bne.n	80037c2 <_printf_float+0x1b6>
 8003790:	2900      	cmp	r1, #0
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	dd0b      	ble.n	80037ae <_printf_float+0x1a2>
 8003796:	6121      	str	r1, [r4, #16]
 8003798:	b913      	cbnz	r3, 80037a0 <_printf_float+0x194>
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	07d0      	lsls	r0, r2, #31
 800379e:	d502      	bpl.n	80037a6 <_printf_float+0x19a>
 80037a0:	3301      	adds	r3, #1
 80037a2:	440b      	add	r3, r1
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	f04f 0900 	mov.w	r9, #0
 80037aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80037ac:	e7dc      	b.n	8003768 <_printf_float+0x15c>
 80037ae:	b913      	cbnz	r3, 80037b6 <_printf_float+0x1aa>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	07d2      	lsls	r2, r2, #31
 80037b4:	d501      	bpl.n	80037ba <_printf_float+0x1ae>
 80037b6:	3302      	adds	r3, #2
 80037b8:	e7f4      	b.n	80037a4 <_printf_float+0x198>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e7f2      	b.n	80037a4 <_printf_float+0x198>
 80037be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037c4:	4299      	cmp	r1, r3
 80037c6:	db05      	blt.n	80037d4 <_printf_float+0x1c8>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	6121      	str	r1, [r4, #16]
 80037cc:	07d8      	lsls	r0, r3, #31
 80037ce:	d5ea      	bpl.n	80037a6 <_printf_float+0x19a>
 80037d0:	1c4b      	adds	r3, r1, #1
 80037d2:	e7e7      	b.n	80037a4 <_printf_float+0x198>
 80037d4:	2900      	cmp	r1, #0
 80037d6:	bfcc      	ite	gt
 80037d8:	2201      	movgt	r2, #1
 80037da:	f1c1 0202 	rsble	r2, r1, #2
 80037de:	4413      	add	r3, r2
 80037e0:	e7e0      	b.n	80037a4 <_printf_float+0x198>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	055a      	lsls	r2, r3, #21
 80037e6:	d407      	bmi.n	80037f8 <_printf_float+0x1ec>
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	4642      	mov	r2, r8
 80037ec:	4631      	mov	r1, r6
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b8      	blx	r7
 80037f2:	3001      	adds	r0, #1
 80037f4:	d12b      	bne.n	800384e <_printf_float+0x242>
 80037f6:	e764      	b.n	80036c2 <_printf_float+0xb6>
 80037f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80037fc:	f240 80dc 	bls.w	80039b8 <_printf_float+0x3ac>
 8003800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003804:	2200      	movs	r2, #0
 8003806:	2300      	movs	r3, #0
 8003808:	f7fd f8ce 	bl	80009a8 <__aeabi_dcmpeq>
 800380c:	2800      	cmp	r0, #0
 800380e:	d033      	beq.n	8003878 <_printf_float+0x26c>
 8003810:	2301      	movs	r3, #1
 8003812:	4631      	mov	r1, r6
 8003814:	4628      	mov	r0, r5
 8003816:	4a35      	ldr	r2, [pc, #212]	@ (80038ec <_printf_float+0x2e0>)
 8003818:	47b8      	blx	r7
 800381a:	3001      	adds	r0, #1
 800381c:	f43f af51 	beq.w	80036c2 <_printf_float+0xb6>
 8003820:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003824:	4543      	cmp	r3, r8
 8003826:	db02      	blt.n	800382e <_printf_float+0x222>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	07d8      	lsls	r0, r3, #31
 800382c:	d50f      	bpl.n	800384e <_printf_float+0x242>
 800382e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003832:	4631      	mov	r1, r6
 8003834:	4628      	mov	r0, r5
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f af42 	beq.w	80036c2 <_printf_float+0xb6>
 800383e:	f04f 0900 	mov.w	r9, #0
 8003842:	f108 38ff 	add.w	r8, r8, #4294967295
 8003846:	f104 0a1a 	add.w	sl, r4, #26
 800384a:	45c8      	cmp	r8, r9
 800384c:	dc09      	bgt.n	8003862 <_printf_float+0x256>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	079b      	lsls	r3, r3, #30
 8003852:	f100 8102 	bmi.w	8003a5a <_printf_float+0x44e>
 8003856:	68e0      	ldr	r0, [r4, #12]
 8003858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800385a:	4298      	cmp	r0, r3
 800385c:	bfb8      	it	lt
 800385e:	4618      	movlt	r0, r3
 8003860:	e731      	b.n	80036c6 <_printf_float+0xba>
 8003862:	2301      	movs	r3, #1
 8003864:	4652      	mov	r2, sl
 8003866:	4631      	mov	r1, r6
 8003868:	4628      	mov	r0, r5
 800386a:	47b8      	blx	r7
 800386c:	3001      	adds	r0, #1
 800386e:	f43f af28 	beq.w	80036c2 <_printf_float+0xb6>
 8003872:	f109 0901 	add.w	r9, r9, #1
 8003876:	e7e8      	b.n	800384a <_printf_float+0x23e>
 8003878:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800387a:	2b00      	cmp	r3, #0
 800387c:	dc38      	bgt.n	80038f0 <_printf_float+0x2e4>
 800387e:	2301      	movs	r3, #1
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <_printf_float+0x2e0>)
 8003886:	47b8      	blx	r7
 8003888:	3001      	adds	r0, #1
 800388a:	f43f af1a 	beq.w	80036c2 <_printf_float+0xb6>
 800388e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003892:	ea59 0303 	orrs.w	r3, r9, r3
 8003896:	d102      	bne.n	800389e <_printf_float+0x292>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	07d9      	lsls	r1, r3, #31
 800389c:	d5d7      	bpl.n	800384e <_printf_float+0x242>
 800389e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	f43f af0a 	beq.w	80036c2 <_printf_float+0xb6>
 80038ae:	f04f 0a00 	mov.w	sl, #0
 80038b2:	f104 0b1a 	add.w	fp, r4, #26
 80038b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038b8:	425b      	negs	r3, r3
 80038ba:	4553      	cmp	r3, sl
 80038bc:	dc01      	bgt.n	80038c2 <_printf_float+0x2b6>
 80038be:	464b      	mov	r3, r9
 80038c0:	e793      	b.n	80037ea <_printf_float+0x1de>
 80038c2:	2301      	movs	r3, #1
 80038c4:	465a      	mov	r2, fp
 80038c6:	4631      	mov	r1, r6
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b8      	blx	r7
 80038cc:	3001      	adds	r0, #1
 80038ce:	f43f aef8 	beq.w	80036c2 <_printf_float+0xb6>
 80038d2:	f10a 0a01 	add.w	sl, sl, #1
 80038d6:	e7ee      	b.n	80038b6 <_printf_float+0x2aa>
 80038d8:	7fefffff 	.word	0x7fefffff
 80038dc:	080062b6 	.word	0x080062b6
 80038e0:	080062b2 	.word	0x080062b2
 80038e4:	080062be 	.word	0x080062be
 80038e8:	080062ba 	.word	0x080062ba
 80038ec:	080062c2 	.word	0x080062c2
 80038f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038f6:	4553      	cmp	r3, sl
 80038f8:	bfa8      	it	ge
 80038fa:	4653      	movge	r3, sl
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	4699      	mov	r9, r3
 8003900:	dc36      	bgt.n	8003970 <_printf_float+0x364>
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800390a:	f104 021a 	add.w	r2, r4, #26
 800390e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003910:	930a      	str	r3, [sp, #40]	@ 0x28
 8003912:	eba3 0309 	sub.w	r3, r3, r9
 8003916:	455b      	cmp	r3, fp
 8003918:	dc31      	bgt.n	800397e <_printf_float+0x372>
 800391a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800391c:	459a      	cmp	sl, r3
 800391e:	dc3a      	bgt.n	8003996 <_printf_float+0x38a>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	07da      	lsls	r2, r3, #31
 8003924:	d437      	bmi.n	8003996 <_printf_float+0x38a>
 8003926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003928:	ebaa 0903 	sub.w	r9, sl, r3
 800392c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800392e:	ebaa 0303 	sub.w	r3, sl, r3
 8003932:	4599      	cmp	r9, r3
 8003934:	bfa8      	it	ge
 8003936:	4699      	movge	r9, r3
 8003938:	f1b9 0f00 	cmp.w	r9, #0
 800393c:	dc33      	bgt.n	80039a6 <_printf_float+0x39a>
 800393e:	f04f 0800 	mov.w	r8, #0
 8003942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003946:	f104 0b1a 	add.w	fp, r4, #26
 800394a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800394c:	ebaa 0303 	sub.w	r3, sl, r3
 8003950:	eba3 0309 	sub.w	r3, r3, r9
 8003954:	4543      	cmp	r3, r8
 8003956:	f77f af7a 	ble.w	800384e <_printf_float+0x242>
 800395a:	2301      	movs	r3, #1
 800395c:	465a      	mov	r2, fp
 800395e:	4631      	mov	r1, r6
 8003960:	4628      	mov	r0, r5
 8003962:	47b8      	blx	r7
 8003964:	3001      	adds	r0, #1
 8003966:	f43f aeac 	beq.w	80036c2 <_printf_float+0xb6>
 800396a:	f108 0801 	add.w	r8, r8, #1
 800396e:	e7ec      	b.n	800394a <_printf_float+0x33e>
 8003970:	4642      	mov	r2, r8
 8003972:	4631      	mov	r1, r6
 8003974:	4628      	mov	r0, r5
 8003976:	47b8      	blx	r7
 8003978:	3001      	adds	r0, #1
 800397a:	d1c2      	bne.n	8003902 <_printf_float+0x2f6>
 800397c:	e6a1      	b.n	80036c2 <_printf_float+0xb6>
 800397e:	2301      	movs	r3, #1
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	920a      	str	r2, [sp, #40]	@ 0x28
 8003986:	47b8      	blx	r7
 8003988:	3001      	adds	r0, #1
 800398a:	f43f ae9a 	beq.w	80036c2 <_printf_float+0xb6>
 800398e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003990:	f10b 0b01 	add.w	fp, fp, #1
 8003994:	e7bb      	b.n	800390e <_printf_float+0x302>
 8003996:	4631      	mov	r1, r6
 8003998:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800399c:	4628      	mov	r0, r5
 800399e:	47b8      	blx	r7
 80039a0:	3001      	adds	r0, #1
 80039a2:	d1c0      	bne.n	8003926 <_printf_float+0x31a>
 80039a4:	e68d      	b.n	80036c2 <_printf_float+0xb6>
 80039a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80039a8:	464b      	mov	r3, r9
 80039aa:	4631      	mov	r1, r6
 80039ac:	4628      	mov	r0, r5
 80039ae:	4442      	add	r2, r8
 80039b0:	47b8      	blx	r7
 80039b2:	3001      	adds	r0, #1
 80039b4:	d1c3      	bne.n	800393e <_printf_float+0x332>
 80039b6:	e684      	b.n	80036c2 <_printf_float+0xb6>
 80039b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039bc:	f1ba 0f01 	cmp.w	sl, #1
 80039c0:	dc01      	bgt.n	80039c6 <_printf_float+0x3ba>
 80039c2:	07db      	lsls	r3, r3, #31
 80039c4:	d536      	bpl.n	8003a34 <_printf_float+0x428>
 80039c6:	2301      	movs	r3, #1
 80039c8:	4642      	mov	r2, r8
 80039ca:	4631      	mov	r1, r6
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b8      	blx	r7
 80039d0:	3001      	adds	r0, #1
 80039d2:	f43f ae76 	beq.w	80036c2 <_printf_float+0xb6>
 80039d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039da:	4631      	mov	r1, r6
 80039dc:	4628      	mov	r0, r5
 80039de:	47b8      	blx	r7
 80039e0:	3001      	adds	r0, #1
 80039e2:	f43f ae6e 	beq.w	80036c2 <_printf_float+0xb6>
 80039e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039ea:	2200      	movs	r2, #0
 80039ec:	2300      	movs	r3, #0
 80039ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039f2:	f7fc ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 80039f6:	b9c0      	cbnz	r0, 8003a2a <_printf_float+0x41e>
 80039f8:	4653      	mov	r3, sl
 80039fa:	f108 0201 	add.w	r2, r8, #1
 80039fe:	4631      	mov	r1, r6
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b8      	blx	r7
 8003a04:	3001      	adds	r0, #1
 8003a06:	d10c      	bne.n	8003a22 <_printf_float+0x416>
 8003a08:	e65b      	b.n	80036c2 <_printf_float+0xb6>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	465a      	mov	r2, fp
 8003a0e:	4631      	mov	r1, r6
 8003a10:	4628      	mov	r0, r5
 8003a12:	47b8      	blx	r7
 8003a14:	3001      	adds	r0, #1
 8003a16:	f43f ae54 	beq.w	80036c2 <_printf_float+0xb6>
 8003a1a:	f108 0801 	add.w	r8, r8, #1
 8003a1e:	45d0      	cmp	r8, sl
 8003a20:	dbf3      	blt.n	8003a0a <_printf_float+0x3fe>
 8003a22:	464b      	mov	r3, r9
 8003a24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a28:	e6e0      	b.n	80037ec <_printf_float+0x1e0>
 8003a2a:	f04f 0800 	mov.w	r8, #0
 8003a2e:	f104 0b1a 	add.w	fp, r4, #26
 8003a32:	e7f4      	b.n	8003a1e <_printf_float+0x412>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4642      	mov	r2, r8
 8003a38:	e7e1      	b.n	80039fe <_printf_float+0x3f2>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f ae3c 	beq.w	80036c2 <_printf_float+0xb6>
 8003a4a:	f108 0801 	add.w	r8, r8, #1
 8003a4e:	68e3      	ldr	r3, [r4, #12]
 8003a50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003a52:	1a5b      	subs	r3, r3, r1
 8003a54:	4543      	cmp	r3, r8
 8003a56:	dcf0      	bgt.n	8003a3a <_printf_float+0x42e>
 8003a58:	e6fd      	b.n	8003856 <_printf_float+0x24a>
 8003a5a:	f04f 0800 	mov.w	r8, #0
 8003a5e:	f104 0919 	add.w	r9, r4, #25
 8003a62:	e7f4      	b.n	8003a4e <_printf_float+0x442>

08003a64 <_printf_common>:
 8003a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	4616      	mov	r6, r2
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	688a      	ldr	r2, [r1, #8]
 8003a6e:	690b      	ldr	r3, [r1, #16]
 8003a70:	4607      	mov	r7, r0
 8003a72:	4293      	cmp	r3, r2
 8003a74:	bfb8      	it	lt
 8003a76:	4613      	movlt	r3, r2
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a84:	b10a      	cbz	r2, 8003a8a <_printf_common+0x26>
 8003a86:	3301      	adds	r3, #1
 8003a88:	6033      	str	r3, [r6, #0]
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	0699      	lsls	r1, r3, #26
 8003a8e:	bf42      	ittt	mi
 8003a90:	6833      	ldrmi	r3, [r6, #0]
 8003a92:	3302      	addmi	r3, #2
 8003a94:	6033      	strmi	r3, [r6, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	f015 0506 	ands.w	r5, r5, #6
 8003a9c:	d106      	bne.n	8003aac <_printf_common+0x48>
 8003a9e:	f104 0a19 	add.w	sl, r4, #25
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	6832      	ldr	r2, [r6, #0]
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dc2b      	bgt.n	8003b04 <_printf_common+0xa0>
 8003aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	3b00      	subs	r3, #0
 8003ab4:	bf18      	it	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	0692      	lsls	r2, r2, #26
 8003aba:	d430      	bmi.n	8003b1e <_printf_common+0xba>
 8003abc:	4641      	mov	r1, r8
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ac4:	47c8      	blx	r9
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d023      	beq.n	8003b12 <_printf_common+0xae>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	6922      	ldr	r2, [r4, #16]
 8003ace:	f003 0306 	and.w	r3, r3, #6
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf14      	ite	ne
 8003ad6:	2500      	movne	r5, #0
 8003ad8:	6833      	ldreq	r3, [r6, #0]
 8003ada:	f04f 0600 	mov.w	r6, #0
 8003ade:	bf08      	it	eq
 8003ae0:	68e5      	ldreq	r5, [r4, #12]
 8003ae2:	f104 041a 	add.w	r4, r4, #26
 8003ae6:	bf08      	it	eq
 8003ae8:	1aed      	subeq	r5, r5, r3
 8003aea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003aee:	bf08      	it	eq
 8003af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfc4      	itt	gt
 8003af8:	1a9b      	subgt	r3, r3, r2
 8003afa:	18ed      	addgt	r5, r5, r3
 8003afc:	42b5      	cmp	r5, r6
 8003afe:	d11a      	bne.n	8003b36 <_printf_common+0xd2>
 8003b00:	2000      	movs	r0, #0
 8003b02:	e008      	b.n	8003b16 <_printf_common+0xb2>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4652      	mov	r2, sl
 8003b08:	4641      	mov	r1, r8
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	47c8      	blx	r9
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d103      	bne.n	8003b1a <_printf_common+0xb6>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1a:	3501      	adds	r5, #1
 8003b1c:	e7c1      	b.n	8003aa2 <_printf_common+0x3e>
 8003b1e:	2030      	movs	r0, #48	@ 0x30
 8003b20:	18e1      	adds	r1, r4, r3
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b2c:	4422      	add	r2, r4
 8003b2e:	3302      	adds	r3, #2
 8003b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b34:	e7c2      	b.n	8003abc <_printf_common+0x58>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4622      	mov	r2, r4
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c8      	blx	r9
 8003b40:	3001      	adds	r0, #1
 8003b42:	d0e6      	beq.n	8003b12 <_printf_common+0xae>
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7d9      	b.n	8003afc <_printf_common+0x98>

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	4691      	mov	r9, r2
 8003b50:	2f78      	cmp	r7, #120	@ 0x78
 8003b52:	4680      	mov	r8, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	469a      	mov	sl, r3
 8003b58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	@ 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d1 	beq.w	8003d0c <_printf_i+0x1c4>
 8003b6a:	2f58      	cmp	r7, #88	@ 0x58
 8003b6c:	f000 80b8 	beq.w	8003ce0 <_printf_i+0x198>
 8003b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	@ (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf3 	.word	0x08003cf3
 8003bb8:	08003c1f 	.word	0x08003c1f
 8003bbc:	08003cad 	.word	0x08003cad
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d15 	.word	0x08003d15
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c1f 	.word	0x08003c1f
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cb5 	.word	0x08003cb5
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6032      	str	r2, [r6, #0]
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09c      	b.n	8003d2e <_printf_i+0x1e6>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6031      	str	r1, [r6, #0]
 8003bfc:	0606      	lsls	r6, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xbc>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <_printf_i+0xc4>
 8003c04:	0645      	lsls	r5, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xb8>
 8003c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	da03      	bge.n	8003c18 <_printf_i+0xd0>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	426d      	negs	r5, r5
 8003c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c18:	230a      	movs	r3, #10
 8003c1a:	4858      	ldr	r0, [pc, #352]	@ (8003d7c <_printf_i+0x234>)
 8003c1c:	e011      	b.n	8003c42 <_printf_i+0xfa>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	0608      	lsls	r0, r1, #24
 8003c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0xe8>
 8003c2a:	0649      	lsls	r1, r1, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2ad      	uxthmi	r5, r5
 8003c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	bf14      	ite	ne
 8003c36:	230a      	movne	r3, #10
 8003c38:	2308      	moveq	r3, #8
 8003c3a:	4850      	ldr	r0, [pc, #320]	@ (8003d7c <_printf_i+0x234>)
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c42:	6866      	ldr	r6, [r4, #4]
 8003c44:	2e00      	cmp	r6, #0
 8003c46:	60a6      	str	r6, [r4, #8]
 8003c48:	db05      	blt.n	8003c56 <_printf_i+0x10e>
 8003c4a:	6821      	ldr	r1, [r4, #0]
 8003c4c:	432e      	orrs	r6, r5
 8003c4e:	f021 0104 	bic.w	r1, r1, #4
 8003c52:	6021      	str	r1, [r4, #0]
 8003c54:	d04b      	beq.n	8003cee <_printf_i+0x1a6>
 8003c56:	4616      	mov	r6, r2
 8003c58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003c60:	5dc7      	ldrb	r7, [r0, r7]
 8003c62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c66:	462f      	mov	r7, r5
 8003c68:	42bb      	cmp	r3, r7
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	d9f4      	bls.n	8003c58 <_printf_i+0x110>
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d10b      	bne.n	8003c8a <_printf_i+0x142>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	07df      	lsls	r7, r3, #31
 8003c76:	d508      	bpl.n	8003c8a <_printf_i+0x142>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	6861      	ldr	r1, [r4, #4]
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	bfde      	ittt	le
 8003c80:	2330      	movle	r3, #48	@ 0x30
 8003c82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c8a:	1b92      	subs	r2, r2, r6
 8003c8c:	6122      	str	r2, [r4, #16]
 8003c8e:	464b      	mov	r3, r9
 8003c90:	4621      	mov	r1, r4
 8003c92:	4640      	mov	r0, r8
 8003c94:	f8cd a000 	str.w	sl, [sp]
 8003c98:	aa03      	add	r2, sp, #12
 8003c9a:	f7ff fee3 	bl	8003a64 <_printf_common>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d14a      	bne.n	8003d38 <_printf_i+0x1f0>
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca6:	b004      	add	sp, #16
 8003ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	2778      	movs	r7, #120	@ 0x78
 8003cb6:	4832      	ldr	r0, [pc, #200]	@ (8003d80 <_printf_i+0x238>)
 8003cb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	6831      	ldr	r1, [r6, #0]
 8003cc0:	061f      	lsls	r7, r3, #24
 8003cc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cc6:	d402      	bmi.n	8003cce <_printf_i+0x186>
 8003cc8:	065f      	lsls	r7, r3, #25
 8003cca:	bf48      	it	mi
 8003ccc:	b2ad      	uxthmi	r5, r5
 8003cce:	6031      	str	r1, [r6, #0]
 8003cd0:	07d9      	lsls	r1, r3, #31
 8003cd2:	bf44      	itt	mi
 8003cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003cd8:	6023      	strmi	r3, [r4, #0]
 8003cda:	b11d      	cbz	r5, 8003ce4 <_printf_i+0x19c>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	e7ad      	b.n	8003c3c <_printf_i+0xf4>
 8003ce0:	4826      	ldr	r0, [pc, #152]	@ (8003d7c <_printf_i+0x234>)
 8003ce2:	e7e9      	b.n	8003cb8 <_printf_i+0x170>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	e7f6      	b.n	8003cdc <_printf_i+0x194>
 8003cee:	4616      	mov	r6, r2
 8003cf0:	e7bd      	b.n	8003c6e <_printf_i+0x126>
 8003cf2:	6833      	ldr	r3, [r6, #0]
 8003cf4:	6825      	ldr	r5, [r4, #0]
 8003cf6:	1d18      	adds	r0, r3, #4
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	6030      	str	r0, [r6, #0]
 8003cfc:	062e      	lsls	r6, r5, #24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	d501      	bpl.n	8003d06 <_printf_i+0x1be>
 8003d02:	6019      	str	r1, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <_printf_i+0x1c4>
 8003d06:	0668      	lsls	r0, r5, #25
 8003d08:	d5fb      	bpl.n	8003d02 <_printf_i+0x1ba>
 8003d0a:	8019      	strh	r1, [r3, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4616      	mov	r6, r2
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	e7bc      	b.n	8003c8e <_printf_i+0x146>
 8003d14:	6833      	ldr	r3, [r6, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	681e      	ldr	r6, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 fa0c 	bl	800413e <memchr>
 8003d26:	b108      	cbz	r0, 8003d2c <_printf_i+0x1e4>
 8003d28:	1b80      	subs	r0, r0, r6
 8003d2a:	6060      	str	r0, [r4, #4]
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	2300      	movs	r3, #0
 8003d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d36:	e7aa      	b.n	8003c8e <_printf_i+0x146>
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	47d0      	blx	sl
 8003d42:	3001      	adds	r0, #1
 8003d44:	d0ad      	beq.n	8003ca2 <_printf_i+0x15a>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	079b      	lsls	r3, r3, #30
 8003d4a:	d413      	bmi.n	8003d74 <_printf_i+0x22c>
 8003d4c:	68e0      	ldr	r0, [r4, #12]
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	4298      	cmp	r0, r3
 8003d52:	bfb8      	it	lt
 8003d54:	4618      	movlt	r0, r3
 8003d56:	e7a6      	b.n	8003ca6 <_printf_i+0x15e>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	4640      	mov	r0, r8
 8003d60:	47d0      	blx	sl
 8003d62:	3001      	adds	r0, #1
 8003d64:	d09d      	beq.n	8003ca2 <_printf_i+0x15a>
 8003d66:	3501      	adds	r5, #1
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	9903      	ldr	r1, [sp, #12]
 8003d6c:	1a5b      	subs	r3, r3, r1
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	dcf2      	bgt.n	8003d58 <_printf_i+0x210>
 8003d72:	e7eb      	b.n	8003d4c <_printf_i+0x204>
 8003d74:	2500      	movs	r5, #0
 8003d76:	f104 0619 	add.w	r6, r4, #25
 8003d7a:	e7f5      	b.n	8003d68 <_printf_i+0x220>
 8003d7c:	080062c4 	.word	0x080062c4
 8003d80:	080062d5 	.word	0x080062d5

08003d84 <std>:
 8003d84:	2300      	movs	r3, #0
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d92:	6083      	str	r3, [r0, #8]
 8003d94:	8181      	strh	r1, [r0, #12]
 8003d96:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d98:	81c2      	strh	r2, [r0, #14]
 8003d9a:	6183      	str	r3, [r0, #24]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	2208      	movs	r2, #8
 8003da0:	305c      	adds	r0, #92	@ 0x5c
 8003da2:	f000 f94c 	bl	800403e <memset>
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <std+0x58>)
 8003da8:	6224      	str	r4, [r4, #32]
 8003daa:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dac:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <std+0x5c>)
 8003dae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <std+0x60>)
 8003db2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <std+0x64>)
 8003db6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <std+0x68>)
 8003dba:	429c      	cmp	r4, r3
 8003dbc:	d006      	beq.n	8003dcc <std+0x48>
 8003dbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dc2:	4294      	cmp	r4, r2
 8003dc4:	d002      	beq.n	8003dcc <std+0x48>
 8003dc6:	33d0      	adds	r3, #208	@ 0xd0
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	d105      	bne.n	8003dd8 <std+0x54>
 8003dcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd4:	f000 b9b0 	b.w	8004138 <__retarget_lock_init_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	08003fb9 	.word	0x08003fb9
 8003de0:	08003fdb 	.word	0x08003fdb
 8003de4:	08004013 	.word	0x08004013
 8003de8:	08004037 	.word	0x08004037
 8003dec:	20000274 	.word	0x20000274

08003df0 <stdio_exit_handler>:
 8003df0:	4a02      	ldr	r2, [pc, #8]	@ (8003dfc <stdio_exit_handler+0xc>)
 8003df2:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <stdio_exit_handler+0x10>)
 8003df4:	4803      	ldr	r0, [pc, #12]	@ (8003e04 <stdio_exit_handler+0x14>)
 8003df6:	f000 b869 	b.w	8003ecc <_fwalk_sglue>
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	08005ab9 	.word	0x08005ab9
 8003e04:	2000001c 	.word	0x2000001c

08003e08 <cleanup_stdio>:
 8003e08:	6841      	ldr	r1, [r0, #4]
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e3c <cleanup_stdio+0x34>)
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4299      	cmp	r1, r3
 8003e10:	4604      	mov	r4, r0
 8003e12:	d001      	beq.n	8003e18 <cleanup_stdio+0x10>
 8003e14:	f001 fe50 	bl	8005ab8 <_fflush_r>
 8003e18:	68a1      	ldr	r1, [r4, #8]
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <cleanup_stdio+0x38>)
 8003e1c:	4299      	cmp	r1, r3
 8003e1e:	d002      	beq.n	8003e26 <cleanup_stdio+0x1e>
 8003e20:	4620      	mov	r0, r4
 8003e22:	f001 fe49 	bl	8005ab8 <_fflush_r>
 8003e26:	68e1      	ldr	r1, [r4, #12]
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <cleanup_stdio+0x3c>)
 8003e2a:	4299      	cmp	r1, r3
 8003e2c:	d004      	beq.n	8003e38 <cleanup_stdio+0x30>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e34:	f001 be40 	b.w	8005ab8 <_fflush_r>
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000274 	.word	0x20000274
 8003e40:	200002dc 	.word	0x200002dc
 8003e44:	20000344 	.word	0x20000344

08003e48 <global_stdio_init.part.0>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <global_stdio_init.part.0+0x30>)
 8003e4c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e7c <global_stdio_init.part.0+0x34>)
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e80 <global_stdio_init.part.0+0x38>)
 8003e50:	4620      	mov	r0, r4
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	2104      	movs	r1, #4
 8003e56:	2200      	movs	r2, #0
 8003e58:	f7ff ff94 	bl	8003d84 <std>
 8003e5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e60:	2201      	movs	r2, #1
 8003e62:	2109      	movs	r1, #9
 8003e64:	f7ff ff8e 	bl	8003d84 <std>
 8003e68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e72:	2112      	movs	r1, #18
 8003e74:	f7ff bf86 	b.w	8003d84 <std>
 8003e78:	200003ac 	.word	0x200003ac
 8003e7c:	20000274 	.word	0x20000274
 8003e80:	08003df1 	.word	0x08003df1

08003e84 <__sfp_lock_acquire>:
 8003e84:	4801      	ldr	r0, [pc, #4]	@ (8003e8c <__sfp_lock_acquire+0x8>)
 8003e86:	f000 b958 	b.w	800413a <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	200003b5 	.word	0x200003b5

08003e90 <__sfp_lock_release>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__sfp_lock_release+0x8>)
 8003e92:	f000 b953 	b.w	800413c <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	200003b5 	.word	0x200003b5

08003e9c <__sinit>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	f7ff fff0 	bl	8003e84 <__sfp_lock_acquire>
 8003ea4:	6a23      	ldr	r3, [r4, #32]
 8003ea6:	b11b      	cbz	r3, 8003eb0 <__sinit+0x14>
 8003ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eac:	f7ff bff0 	b.w	8003e90 <__sfp_lock_release>
 8003eb0:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <__sinit+0x28>)
 8003eb2:	6223      	str	r3, [r4, #32]
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <__sinit+0x2c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f5      	bne.n	8003ea8 <__sinit+0xc>
 8003ebc:	f7ff ffc4 	bl	8003e48 <global_stdio_init.part.0>
 8003ec0:	e7f2      	b.n	8003ea8 <__sinit+0xc>
 8003ec2:	bf00      	nop
 8003ec4:	08003e09 	.word	0x08003e09
 8003ec8:	200003ac 	.word	0x200003ac

08003ecc <_fwalk_sglue>:
 8003ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003edc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee0:	d505      	bpl.n	8003eee <_fwalk_sglue+0x22>
 8003ee2:	6824      	ldr	r4, [r4, #0]
 8003ee4:	2c00      	cmp	r4, #0
 8003ee6:	d1f7      	bne.n	8003ed8 <_fwalk_sglue+0xc>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d907      	bls.n	8003f04 <_fwalk_sglue+0x38>
 8003ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	d003      	beq.n	8003f04 <_fwalk_sglue+0x38>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4638      	mov	r0, r7
 8003f00:	47c0      	blx	r8
 8003f02:	4306      	orrs	r6, r0
 8003f04:	3568      	adds	r5, #104	@ 0x68
 8003f06:	e7e9      	b.n	8003edc <_fwalk_sglue+0x10>

08003f08 <sniprintf>:
 8003f08:	b40c      	push	{r2, r3}
 8003f0a:	b530      	push	{r4, r5, lr}
 8003f0c:	4b18      	ldr	r3, [pc, #96]	@ (8003f70 <sniprintf+0x68>)
 8003f0e:	1e0c      	subs	r4, r1, #0
 8003f10:	681d      	ldr	r5, [r3, #0]
 8003f12:	b09d      	sub	sp, #116	@ 0x74
 8003f14:	da08      	bge.n	8003f28 <sniprintf+0x20>
 8003f16:	238b      	movs	r3, #139	@ 0x8b
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	b01d      	add	sp, #116	@ 0x74
 8003f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f24:	b002      	add	sp, #8
 8003f26:	4770      	bx	lr
 8003f28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003f36:	bf0c      	ite	eq
 8003f38:	4623      	moveq	r3, r4
 8003f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f46:	9002      	str	r0, [sp, #8]
 8003f48:	9006      	str	r0, [sp, #24]
 8003f4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f4e:	4628      	mov	r0, r5
 8003f50:	ab21      	add	r3, sp, #132	@ 0x84
 8003f52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f54:	a902      	add	r1, sp, #8
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	f001 fc32 	bl	80057c0 <_svfiprintf_r>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	bfbc      	itt	lt
 8003f60:	238b      	movlt	r3, #139	@ 0x8b
 8003f62:	602b      	strlt	r3, [r5, #0]
 8003f64:	2c00      	cmp	r4, #0
 8003f66:	d0da      	beq.n	8003f1e <sniprintf+0x16>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	9b02      	ldr	r3, [sp, #8]
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e7d6      	b.n	8003f1e <sniprintf+0x16>
 8003f70:	20000018 	.word	0x20000018

08003f74 <siprintf>:
 8003f74:	b40e      	push	{r1, r2, r3}
 8003f76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f7a:	b510      	push	{r4, lr}
 8003f7c:	2400      	movs	r4, #0
 8003f7e:	b09d      	sub	sp, #116	@ 0x74
 8003f80:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003f82:	9002      	str	r0, [sp, #8]
 8003f84:	9006      	str	r0, [sp, #24]
 8003f86:	9107      	str	r1, [sp, #28]
 8003f88:	9104      	str	r1, [sp, #16]
 8003f8a:	4809      	ldr	r0, [pc, #36]	@ (8003fb0 <siprintf+0x3c>)
 8003f8c:	4909      	ldr	r1, [pc, #36]	@ (8003fb4 <siprintf+0x40>)
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	9105      	str	r1, [sp, #20]
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	a902      	add	r1, sp, #8
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003f9c:	f001 fc10 	bl	80057c0 <_svfiprintf_r>
 8003fa0:	9b02      	ldr	r3, [sp, #8]
 8003fa2:	701c      	strb	r4, [r3, #0]
 8003fa4:	b01d      	add	sp, #116	@ 0x74
 8003fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003faa:	b003      	add	sp, #12
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000018 	.word	0x20000018
 8003fb4:	ffff0208 	.word	0xffff0208

08003fb8 <__sread>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	460c      	mov	r4, r1
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	f000 f86c 	bl	800409c <_read_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	bfab      	itete	ge
 8003fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fca:	89a3      	ldrhlt	r3, [r4, #12]
 8003fcc:	181b      	addge	r3, r3, r0
 8003fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fd2:	bfac      	ite	ge
 8003fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fd6:	81a3      	strhlt	r3, [r4, #12]
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <__swrite>:
 8003fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fde:	461f      	mov	r7, r3
 8003fe0:	898b      	ldrh	r3, [r1, #12]
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	05db      	lsls	r3, r3, #23
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	4616      	mov	r6, r2
 8003fea:	d505      	bpl.n	8003ff8 <__swrite+0x1e>
 8003fec:	2302      	movs	r3, #2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff4:	f000 f840 	bl	8004078 <_lseek_r>
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	4632      	mov	r2, r6
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	4628      	mov	r0, r5
 8004004:	463b      	mov	r3, r7
 8004006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800400e:	f000 b857 	b.w	80040c0 <_write_r>

08004012 <__sseek>:
 8004012:	b510      	push	{r4, lr}
 8004014:	460c      	mov	r4, r1
 8004016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401a:	f000 f82d 	bl	8004078 <_lseek_r>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	bf15      	itete	ne
 8004024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800402a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800402e:	81a3      	strheq	r3, [r4, #12]
 8004030:	bf18      	it	ne
 8004032:	81a3      	strhne	r3, [r4, #12]
 8004034:	bd10      	pop	{r4, pc}

08004036 <__sclose>:
 8004036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403a:	f000 b80d 	b.w	8004058 <_close_r>

0800403e <memset>:
 800403e:	4603      	mov	r3, r0
 8004040:	4402      	add	r2, r0
 8004042:	4293      	cmp	r3, r2
 8004044:	d100      	bne.n	8004048 <memset+0xa>
 8004046:	4770      	bx	lr
 8004048:	f803 1b01 	strb.w	r1, [r3], #1
 800404c:	e7f9      	b.n	8004042 <memset+0x4>
	...

08004050 <_localeconv_r>:
 8004050:	4800      	ldr	r0, [pc, #0]	@ (8004054 <_localeconv_r+0x4>)
 8004052:	4770      	bx	lr
 8004054:	20000158 	.word	0x20000158

08004058 <_close_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	2300      	movs	r3, #0
 800405c:	4d05      	ldr	r5, [pc, #20]	@ (8004074 <_close_r+0x1c>)
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	f7fd fb2b 	bl	80016be <_close>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_close_r+0x1a>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_close_r+0x1a>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	200003b0 	.word	0x200003b0

08004078 <_lseek_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	2200      	movs	r2, #0
 8004082:	4d05      	ldr	r5, [pc, #20]	@ (8004098 <_lseek_r+0x20>)
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fd fb3d 	bl	8001706 <_lseek>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_lseek_r+0x1e>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_lseek_r+0x1e>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	200003b0 	.word	0x200003b0

0800409c <_read_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	4d05      	ldr	r5, [pc, #20]	@ (80040bc <_read_r+0x20>)
 80040a8:	602a      	str	r2, [r5, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f7fd face 	bl	800164c <_read>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_read_r+0x1e>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_read_r+0x1e>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200003b0 	.word	0x200003b0

080040c0 <_write_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	4d05      	ldr	r5, [pc, #20]	@ (80040e0 <_write_r+0x20>)
 80040cc:	602a      	str	r2, [r5, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7fd fad9 	bl	8001686 <_write>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_write_r+0x1e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_write_r+0x1e>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200003b0 	.word	0x200003b0

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	@ (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000018 	.word	0x20000018

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	2600      	movs	r6, #0
 80040f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004128 <__libc_init_array+0x38>)
 80040f6:	4c0d      	ldr	r4, [pc, #52]	@ (800412c <__libc_init_array+0x3c>)
 80040f8:	1b64      	subs	r4, r4, r5
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	f002 f876 	bl	80061f0 <_init>
 8004104:	2600      	movs	r6, #0
 8004106:	4d0a      	ldr	r5, [pc, #40]	@ (8004130 <__libc_init_array+0x40>)
 8004108:	4c0a      	ldr	r4, [pc, #40]	@ (8004134 <__libc_init_array+0x44>)
 800410a:	1b64      	subs	r4, r4, r5
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	42a6      	cmp	r6, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f855 3b04 	ldr.w	r3, [r5], #4
 8004118:	4798      	blx	r3
 800411a:	3601      	adds	r6, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004122:	4798      	blx	r3
 8004124:	3601      	adds	r6, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	0800662c 	.word	0x0800662c
 800412c:	0800662c 	.word	0x0800662c
 8004130:	0800662c 	.word	0x0800662c
 8004134:	08006630 	.word	0x08006630

08004138 <__retarget_lock_init_recursive>:
 8004138:	4770      	bx	lr

0800413a <__retarget_lock_acquire_recursive>:
 800413a:	4770      	bx	lr

0800413c <__retarget_lock_release_recursive>:
 800413c:	4770      	bx	lr

0800413e <memchr>:
 800413e:	4603      	mov	r3, r0
 8004140:	b510      	push	{r4, lr}
 8004142:	b2c9      	uxtb	r1, r1
 8004144:	4402      	add	r2, r0
 8004146:	4293      	cmp	r3, r2
 8004148:	4618      	mov	r0, r3
 800414a:	d101      	bne.n	8004150 <memchr+0x12>
 800414c:	2000      	movs	r0, #0
 800414e:	e003      	b.n	8004158 <memchr+0x1a>
 8004150:	7804      	ldrb	r4, [r0, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	428c      	cmp	r4, r1
 8004156:	d1f6      	bne.n	8004146 <memchr+0x8>
 8004158:	bd10      	pop	{r4, pc}

0800415a <quorem>:
 800415a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415e:	6903      	ldr	r3, [r0, #16]
 8004160:	690c      	ldr	r4, [r1, #16]
 8004162:	4607      	mov	r7, r0
 8004164:	42a3      	cmp	r3, r4
 8004166:	db7e      	blt.n	8004266 <quorem+0x10c>
 8004168:	3c01      	subs	r4, #1
 800416a:	00a3      	lsls	r3, r4, #2
 800416c:	f100 0514 	add.w	r5, r0, #20
 8004170:	f101 0814 	add.w	r8, r1, #20
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004180:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004184:	3301      	adds	r3, #1
 8004186:	429a      	cmp	r2, r3
 8004188:	fbb2 f6f3 	udiv	r6, r2, r3
 800418c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004190:	d32e      	bcc.n	80041f0 <quorem+0x96>
 8004192:	f04f 0a00 	mov.w	sl, #0
 8004196:	46c4      	mov	ip, r8
 8004198:	46ae      	mov	lr, r5
 800419a:	46d3      	mov	fp, sl
 800419c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041a0:	b298      	uxth	r0, r3
 80041a2:	fb06 a000 	mla	r0, r6, r0, sl
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	0c02      	lsrs	r2, r0, #16
 80041aa:	fb06 2303 	mla	r3, r6, r3, r2
 80041ae:	f8de 2000 	ldr.w	r2, [lr]
 80041b2:	b280      	uxth	r0, r0
 80041b4:	b292      	uxth	r2, r2
 80041b6:	1a12      	subs	r2, r2, r0
 80041b8:	445a      	add	r2, fp
 80041ba:	f8de 0000 	ldr.w	r0, [lr]
 80041be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80041c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80041cc:	b292      	uxth	r2, r2
 80041ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80041d2:	45e1      	cmp	r9, ip
 80041d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80041d8:	f84e 2b04 	str.w	r2, [lr], #4
 80041dc:	d2de      	bcs.n	800419c <quorem+0x42>
 80041de:	9b00      	ldr	r3, [sp, #0]
 80041e0:	58eb      	ldr	r3, [r5, r3]
 80041e2:	b92b      	cbnz	r3, 80041f0 <quorem+0x96>
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	3b04      	subs	r3, #4
 80041e8:	429d      	cmp	r5, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	d32f      	bcc.n	800424e <quorem+0xf4>
 80041ee:	613c      	str	r4, [r7, #16]
 80041f0:	4638      	mov	r0, r7
 80041f2:	f001 f981 	bl	80054f8 <__mcmp>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	db25      	blt.n	8004246 <quorem+0xec>
 80041fa:	4629      	mov	r1, r5
 80041fc:	2000      	movs	r0, #0
 80041fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8004202:	f8d1 c000 	ldr.w	ip, [r1]
 8004206:	fa1f fe82 	uxth.w	lr, r2
 800420a:	fa1f f38c 	uxth.w	r3, ip
 800420e:	eba3 030e 	sub.w	r3, r3, lr
 8004212:	4403      	add	r3, r0
 8004214:	0c12      	lsrs	r2, r2, #16
 8004216:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800421a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800421e:	b29b      	uxth	r3, r3
 8004220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004224:	45c1      	cmp	r9, r8
 8004226:	ea4f 4022 	mov.w	r0, r2, asr #16
 800422a:	f841 3b04 	str.w	r3, [r1], #4
 800422e:	d2e6      	bcs.n	80041fe <quorem+0xa4>
 8004230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004238:	b922      	cbnz	r2, 8004244 <quorem+0xea>
 800423a:	3b04      	subs	r3, #4
 800423c:	429d      	cmp	r5, r3
 800423e:	461a      	mov	r2, r3
 8004240:	d30b      	bcc.n	800425a <quorem+0x100>
 8004242:	613c      	str	r4, [r7, #16]
 8004244:	3601      	adds	r6, #1
 8004246:	4630      	mov	r0, r6
 8004248:	b003      	add	sp, #12
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	3b04      	subs	r3, #4
 8004252:	2a00      	cmp	r2, #0
 8004254:	d1cb      	bne.n	80041ee <quorem+0x94>
 8004256:	3c01      	subs	r4, #1
 8004258:	e7c6      	b.n	80041e8 <quorem+0x8e>
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	3b04      	subs	r3, #4
 800425e:	2a00      	cmp	r2, #0
 8004260:	d1ef      	bne.n	8004242 <quorem+0xe8>
 8004262:	3c01      	subs	r4, #1
 8004264:	e7ea      	b.n	800423c <quorem+0xe2>
 8004266:	2000      	movs	r0, #0
 8004268:	e7ee      	b.n	8004248 <quorem+0xee>
 800426a:	0000      	movs	r0, r0
 800426c:	0000      	movs	r0, r0
	...

08004270 <_dtoa_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	69c7      	ldr	r7, [r0, #28]
 800427a:	b097      	sub	sp, #92	@ 0x5c
 800427c:	4681      	mov	r9, r0
 800427e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004282:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004284:	b97f      	cbnz	r7, 80042a6 <_dtoa_r+0x36>
 8004286:	2010      	movs	r0, #16
 8004288:	f000 fe0e 	bl	8004ea8 <malloc>
 800428c:	4602      	mov	r2, r0
 800428e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004292:	b920      	cbnz	r0, 800429e <_dtoa_r+0x2e>
 8004294:	21ef      	movs	r1, #239	@ 0xef
 8004296:	4bac      	ldr	r3, [pc, #688]	@ (8004548 <_dtoa_r+0x2d8>)
 8004298:	48ac      	ldr	r0, [pc, #688]	@ (800454c <_dtoa_r+0x2dc>)
 800429a:	f001 fc6d 	bl	8005b78 <__assert_func>
 800429e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80042a2:	6007      	str	r7, [r0, #0]
 80042a4:	60c7      	str	r7, [r0, #12]
 80042a6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	b159      	cbz	r1, 80042c6 <_dtoa_r+0x56>
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	2301      	movs	r3, #1
 80042b2:	4093      	lsls	r3, r2
 80042b4:	604a      	str	r2, [r1, #4]
 80042b6:	608b      	str	r3, [r1, #8]
 80042b8:	4648      	mov	r0, r9
 80042ba:	f000 feeb 	bl	8005094 <_Bfree>
 80042be:	2200      	movs	r2, #0
 80042c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	1e2b      	subs	r3, r5, #0
 80042c8:	bfaf      	iteee	ge
 80042ca:	2300      	movge	r3, #0
 80042cc:	2201      	movlt	r2, #1
 80042ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80042d2:	9307      	strlt	r3, [sp, #28]
 80042d4:	bfa8      	it	ge
 80042d6:	6033      	strge	r3, [r6, #0]
 80042d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80042dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004550 <_dtoa_r+0x2e0>)
 80042de:	bfb8      	it	lt
 80042e0:	6032      	strlt	r2, [r6, #0]
 80042e2:	ea33 0308 	bics.w	r3, r3, r8
 80042e6:	d112      	bne.n	800430e <_dtoa_r+0x9e>
 80042e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80042ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042f4:	4323      	orrs	r3, r4
 80042f6:	f000 855e 	beq.w	8004db6 <_dtoa_r+0xb46>
 80042fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004554 <_dtoa_r+0x2e4>
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8560 	beq.w	8004dc6 <_dtoa_r+0xb56>
 8004306:	f10a 0303 	add.w	r3, sl, #3
 800430a:	f000 bd5a 	b.w	8004dc2 <_dtoa_r+0xb52>
 800430e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004312:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800431a:	2200      	movs	r2, #0
 800431c:	2300      	movs	r3, #0
 800431e:	f7fc fb43 	bl	80009a8 <__aeabi_dcmpeq>
 8004322:	4607      	mov	r7, r0
 8004324:	b158      	cbz	r0, 800433e <_dtoa_r+0xce>
 8004326:	2301      	movs	r3, #1
 8004328:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800432e:	b113      	cbz	r3, 8004336 <_dtoa_r+0xc6>
 8004330:	4b89      	ldr	r3, [pc, #548]	@ (8004558 <_dtoa_r+0x2e8>)
 8004332:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800455c <_dtoa_r+0x2ec>
 800433a:	f000 bd44 	b.w	8004dc6 <_dtoa_r+0xb56>
 800433e:	ab14      	add	r3, sp, #80	@ 0x50
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	ab15      	add	r3, sp, #84	@ 0x54
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4648      	mov	r0, r9
 8004348:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800434c:	f001 f984 	bl	8005658 <__d2b>
 8004350:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004354:	9003      	str	r0, [sp, #12]
 8004356:	2e00      	cmp	r6, #0
 8004358:	d078      	beq.n	800444c <_dtoa_r+0x1dc>
 800435a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800435e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004360:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004368:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800436c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004370:	9712      	str	r7, [sp, #72]	@ 0x48
 8004372:	4619      	mov	r1, r3
 8004374:	2200      	movs	r2, #0
 8004376:	4b7a      	ldr	r3, [pc, #488]	@ (8004560 <_dtoa_r+0x2f0>)
 8004378:	f7fb fef6 	bl	8000168 <__aeabi_dsub>
 800437c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004530 <_dtoa_r+0x2c0>)
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f7fc f8a9 	bl	80004d8 <__aeabi_dmul>
 8004386:	a36c      	add	r3, pc, #432	@ (adr r3, 8004538 <_dtoa_r+0x2c8>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fb feee 	bl	800016c <__adddf3>
 8004390:	4604      	mov	r4, r0
 8004392:	4630      	mov	r0, r6
 8004394:	460d      	mov	r5, r1
 8004396:	f7fc f835 	bl	8000404 <__aeabi_i2d>
 800439a:	a369      	add	r3, pc, #420	@ (adr r3, 8004540 <_dtoa_r+0x2d0>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fc f89a 	bl	80004d8 <__aeabi_dmul>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fb fede 	bl	800016c <__adddf3>
 80043b0:	4604      	mov	r4, r0
 80043b2:	460d      	mov	r5, r1
 80043b4:	f7fc fb40 	bl	8000a38 <__aeabi_d2iz>
 80043b8:	2200      	movs	r2, #0
 80043ba:	4607      	mov	r7, r0
 80043bc:	2300      	movs	r3, #0
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fc fafb 	bl	80009bc <__aeabi_dcmplt>
 80043c6:	b140      	cbz	r0, 80043da <_dtoa_r+0x16a>
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7fc f81b 	bl	8000404 <__aeabi_i2d>
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	f7fc fae9 	bl	80009a8 <__aeabi_dcmpeq>
 80043d6:	b900      	cbnz	r0, 80043da <_dtoa_r+0x16a>
 80043d8:	3f01      	subs	r7, #1
 80043da:	2f16      	cmp	r7, #22
 80043dc:	d854      	bhi.n	8004488 <_dtoa_r+0x218>
 80043de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043e2:	4b60      	ldr	r3, [pc, #384]	@ (8004564 <_dtoa_r+0x2f4>)
 80043e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fc fae6 	bl	80009bc <__aeabi_dcmplt>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d04b      	beq.n	800448c <_dtoa_r+0x21c>
 80043f4:	2300      	movs	r3, #0
 80043f6:	3f01      	subs	r7, #1
 80043f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043fc:	1b9b      	subs	r3, r3, r6
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	bf49      	itett	mi
 8004402:	f1c3 0301 	rsbmi	r3, r3, #1
 8004406:	2300      	movpl	r3, #0
 8004408:	9304      	strmi	r3, [sp, #16]
 800440a:	2300      	movmi	r3, #0
 800440c:	9209      	str	r2, [sp, #36]	@ 0x24
 800440e:	bf54      	ite	pl
 8004410:	9304      	strpl	r3, [sp, #16]
 8004412:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004414:	2f00      	cmp	r7, #0
 8004416:	db3b      	blt.n	8004490 <_dtoa_r+0x220>
 8004418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800441a:	970e      	str	r7, [sp, #56]	@ 0x38
 800441c:	443b      	add	r3, r7
 800441e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004420:	2300      	movs	r3, #0
 8004422:	930a      	str	r3, [sp, #40]	@ 0x28
 8004424:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004426:	2b09      	cmp	r3, #9
 8004428:	d865      	bhi.n	80044f6 <_dtoa_r+0x286>
 800442a:	2b05      	cmp	r3, #5
 800442c:	bfc4      	itt	gt
 800442e:	3b04      	subgt	r3, #4
 8004430:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004432:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004434:	bfc8      	it	gt
 8004436:	2400      	movgt	r4, #0
 8004438:	f1a3 0302 	sub.w	r3, r3, #2
 800443c:	bfd8      	it	le
 800443e:	2401      	movle	r4, #1
 8004440:	2b03      	cmp	r3, #3
 8004442:	d864      	bhi.n	800450e <_dtoa_r+0x29e>
 8004444:	e8df f003 	tbb	[pc, r3]
 8004448:	2c385553 	.word	0x2c385553
 800444c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004450:	441e      	add	r6, r3
 8004452:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004456:	2b20      	cmp	r3, #32
 8004458:	bfc1      	itttt	gt
 800445a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800445e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004462:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004466:	fa24 f303 	lsrgt.w	r3, r4, r3
 800446a:	bfd6      	itet	le
 800446c:	f1c3 0320 	rsble	r3, r3, #32
 8004470:	ea48 0003 	orrgt.w	r0, r8, r3
 8004474:	fa04 f003 	lslle.w	r0, r4, r3
 8004478:	f7fb ffb4 	bl	80003e4 <__aeabi_ui2d>
 800447c:	2201      	movs	r2, #1
 800447e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004482:	3e01      	subs	r6, #1
 8004484:	9212      	str	r2, [sp, #72]	@ 0x48
 8004486:	e774      	b.n	8004372 <_dtoa_r+0x102>
 8004488:	2301      	movs	r3, #1
 800448a:	e7b5      	b.n	80043f8 <_dtoa_r+0x188>
 800448c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800448e:	e7b4      	b.n	80043fa <_dtoa_r+0x18a>
 8004490:	9b04      	ldr	r3, [sp, #16]
 8004492:	1bdb      	subs	r3, r3, r7
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	427b      	negs	r3, r7
 8004498:	930a      	str	r3, [sp, #40]	@ 0x28
 800449a:	2300      	movs	r3, #0
 800449c:	930e      	str	r3, [sp, #56]	@ 0x38
 800449e:	e7c1      	b.n	8004424 <_dtoa_r+0x1b4>
 80044a0:	2301      	movs	r3, #1
 80044a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044a6:	eb07 0b03 	add.w	fp, r7, r3
 80044aa:	f10b 0301 	add.w	r3, fp, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	9308      	str	r3, [sp, #32]
 80044b2:	bfb8      	it	lt
 80044b4:	2301      	movlt	r3, #1
 80044b6:	e006      	b.n	80044c6 <_dtoa_r+0x256>
 80044b8:	2301      	movs	r3, #1
 80044ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044be:	2b00      	cmp	r3, #0
 80044c0:	dd28      	ble.n	8004514 <_dtoa_r+0x2a4>
 80044c2:	469b      	mov	fp, r3
 80044c4:	9308      	str	r3, [sp, #32]
 80044c6:	2100      	movs	r1, #0
 80044c8:	2204      	movs	r2, #4
 80044ca:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80044ce:	f102 0514 	add.w	r5, r2, #20
 80044d2:	429d      	cmp	r5, r3
 80044d4:	d926      	bls.n	8004524 <_dtoa_r+0x2b4>
 80044d6:	6041      	str	r1, [r0, #4]
 80044d8:	4648      	mov	r0, r9
 80044da:	f000 fd9b 	bl	8005014 <_Balloc>
 80044de:	4682      	mov	sl, r0
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d143      	bne.n	800456c <_dtoa_r+0x2fc>
 80044e4:	4602      	mov	r2, r0
 80044e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80044ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <_dtoa_r+0x2f8>)
 80044ec:	e6d4      	b.n	8004298 <_dtoa_r+0x28>
 80044ee:	2300      	movs	r3, #0
 80044f0:	e7e3      	b.n	80044ba <_dtoa_r+0x24a>
 80044f2:	2300      	movs	r3, #0
 80044f4:	e7d5      	b.n	80044a2 <_dtoa_r+0x232>
 80044f6:	2401      	movs	r4, #1
 80044f8:	2300      	movs	r3, #0
 80044fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80044fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80044fe:	f04f 3bff 	mov.w	fp, #4294967295
 8004502:	2200      	movs	r2, #0
 8004504:	2312      	movs	r3, #18
 8004506:	f8cd b020 	str.w	fp, [sp, #32]
 800450a:	9221      	str	r2, [sp, #132]	@ 0x84
 800450c:	e7db      	b.n	80044c6 <_dtoa_r+0x256>
 800450e:	2301      	movs	r3, #1
 8004510:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004512:	e7f4      	b.n	80044fe <_dtoa_r+0x28e>
 8004514:	f04f 0b01 	mov.w	fp, #1
 8004518:	465b      	mov	r3, fp
 800451a:	f8cd b020 	str.w	fp, [sp, #32]
 800451e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004522:	e7d0      	b.n	80044c6 <_dtoa_r+0x256>
 8004524:	3101      	adds	r1, #1
 8004526:	0052      	lsls	r2, r2, #1
 8004528:	e7d1      	b.n	80044ce <_dtoa_r+0x25e>
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w
 8004530:	636f4361 	.word	0x636f4361
 8004534:	3fd287a7 	.word	0x3fd287a7
 8004538:	8b60c8b3 	.word	0x8b60c8b3
 800453c:	3fc68a28 	.word	0x3fc68a28
 8004540:	509f79fb 	.word	0x509f79fb
 8004544:	3fd34413 	.word	0x3fd34413
 8004548:	080062f3 	.word	0x080062f3
 800454c:	0800630a 	.word	0x0800630a
 8004550:	7ff00000 	.word	0x7ff00000
 8004554:	080062ef 	.word	0x080062ef
 8004558:	080062c3 	.word	0x080062c3
 800455c:	080062c2 	.word	0x080062c2
 8004560:	3ff80000 	.word	0x3ff80000
 8004564:	08006458 	.word	0x08006458
 8004568:	08006362 	.word	0x08006362
 800456c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004570:	6018      	str	r0, [r3, #0]
 8004572:	9b08      	ldr	r3, [sp, #32]
 8004574:	2b0e      	cmp	r3, #14
 8004576:	f200 80a1 	bhi.w	80046bc <_dtoa_r+0x44c>
 800457a:	2c00      	cmp	r4, #0
 800457c:	f000 809e 	beq.w	80046bc <_dtoa_r+0x44c>
 8004580:	2f00      	cmp	r7, #0
 8004582:	dd33      	ble.n	80045ec <_dtoa_r+0x37c>
 8004584:	4b9c      	ldr	r3, [pc, #624]	@ (80047f8 <_dtoa_r+0x588>)
 8004586:	f007 020f 	and.w	r2, r7, #15
 800458a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800458e:	05f8      	lsls	r0, r7, #23
 8004590:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004594:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800459c:	d516      	bpl.n	80045cc <_dtoa_r+0x35c>
 800459e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045a2:	4b96      	ldr	r3, [pc, #600]	@ (80047fc <_dtoa_r+0x58c>)
 80045a4:	2603      	movs	r6, #3
 80045a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045aa:	f7fc f8bf 	bl	800072c <__aeabi_ddiv>
 80045ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045b2:	f004 040f 	and.w	r4, r4, #15
 80045b6:	4d91      	ldr	r5, [pc, #580]	@ (80047fc <_dtoa_r+0x58c>)
 80045b8:	b954      	cbnz	r4, 80045d0 <_dtoa_r+0x360>
 80045ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045c2:	f7fc f8b3 	bl	800072c <__aeabi_ddiv>
 80045c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80045ca:	e028      	b.n	800461e <_dtoa_r+0x3ae>
 80045cc:	2602      	movs	r6, #2
 80045ce:	e7f2      	b.n	80045b6 <_dtoa_r+0x346>
 80045d0:	07e1      	lsls	r1, r4, #31
 80045d2:	d508      	bpl.n	80045e6 <_dtoa_r+0x376>
 80045d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045dc:	f7fb ff7c 	bl	80004d8 <__aeabi_dmul>
 80045e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045e4:	3601      	adds	r6, #1
 80045e6:	1064      	asrs	r4, r4, #1
 80045e8:	3508      	adds	r5, #8
 80045ea:	e7e5      	b.n	80045b8 <_dtoa_r+0x348>
 80045ec:	f000 80af 	beq.w	800474e <_dtoa_r+0x4de>
 80045f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045f4:	427c      	negs	r4, r7
 80045f6:	4b80      	ldr	r3, [pc, #512]	@ (80047f8 <_dtoa_r+0x588>)
 80045f8:	f004 020f 	and.w	r2, r4, #15
 80045fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fb ff68 	bl	80004d8 <__aeabi_dmul>
 8004608:	2602      	movs	r6, #2
 800460a:	2300      	movs	r3, #0
 800460c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004610:	4d7a      	ldr	r5, [pc, #488]	@ (80047fc <_dtoa_r+0x58c>)
 8004612:	1124      	asrs	r4, r4, #4
 8004614:	2c00      	cmp	r4, #0
 8004616:	f040 808f 	bne.w	8004738 <_dtoa_r+0x4c8>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1d3      	bne.n	80045c6 <_dtoa_r+0x356>
 800461e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8094 	beq.w	8004752 <_dtoa_r+0x4e2>
 800462a:	2200      	movs	r2, #0
 800462c:	4620      	mov	r0, r4
 800462e:	4629      	mov	r1, r5
 8004630:	4b73      	ldr	r3, [pc, #460]	@ (8004800 <_dtoa_r+0x590>)
 8004632:	f7fc f9c3 	bl	80009bc <__aeabi_dcmplt>
 8004636:	2800      	cmp	r0, #0
 8004638:	f000 808b 	beq.w	8004752 <_dtoa_r+0x4e2>
 800463c:	9b08      	ldr	r3, [sp, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8087 	beq.w	8004752 <_dtoa_r+0x4e2>
 8004644:	f1bb 0f00 	cmp.w	fp, #0
 8004648:	dd34      	ble.n	80046b4 <_dtoa_r+0x444>
 800464a:	4620      	mov	r0, r4
 800464c:	2200      	movs	r2, #0
 800464e:	4629      	mov	r1, r5
 8004650:	4b6c      	ldr	r3, [pc, #432]	@ (8004804 <_dtoa_r+0x594>)
 8004652:	f7fb ff41 	bl	80004d8 <__aeabi_dmul>
 8004656:	465c      	mov	r4, fp
 8004658:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800465c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004660:	3601      	adds	r6, #1
 8004662:	4630      	mov	r0, r6
 8004664:	f7fb fece 	bl	8000404 <__aeabi_i2d>
 8004668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800466c:	f7fb ff34 	bl	80004d8 <__aeabi_dmul>
 8004670:	2200      	movs	r2, #0
 8004672:	4b65      	ldr	r3, [pc, #404]	@ (8004808 <_dtoa_r+0x598>)
 8004674:	f7fb fd7a 	bl	800016c <__adddf3>
 8004678:	4605      	mov	r5, r0
 800467a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800467e:	2c00      	cmp	r4, #0
 8004680:	d16a      	bne.n	8004758 <_dtoa_r+0x4e8>
 8004682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004686:	2200      	movs	r2, #0
 8004688:	4b60      	ldr	r3, [pc, #384]	@ (800480c <_dtoa_r+0x59c>)
 800468a:	f7fb fd6d 	bl	8000168 <__aeabi_dsub>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004696:	462a      	mov	r2, r5
 8004698:	4633      	mov	r3, r6
 800469a:	f7fc f9ad 	bl	80009f8 <__aeabi_dcmpgt>
 800469e:	2800      	cmp	r0, #0
 80046a0:	f040 8298 	bne.w	8004bd4 <_dtoa_r+0x964>
 80046a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046a8:	462a      	mov	r2, r5
 80046aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80046ae:	f7fc f985 	bl	80009bc <__aeabi_dcmplt>
 80046b2:	bb38      	cbnz	r0, 8004704 <_dtoa_r+0x494>
 80046b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80046b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80046bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f2c0 8157 	blt.w	8004972 <_dtoa_r+0x702>
 80046c4:	2f0e      	cmp	r7, #14
 80046c6:	f300 8154 	bgt.w	8004972 <_dtoa_r+0x702>
 80046ca:	4b4b      	ldr	r3, [pc, #300]	@ (80047f8 <_dtoa_r+0x588>)
 80046cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f280 80e5 	bge.w	80048aa <_dtoa_r+0x63a>
 80046e0:	9b08      	ldr	r3, [sp, #32]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f300 80e1 	bgt.w	80048aa <_dtoa_r+0x63a>
 80046e8:	d10c      	bne.n	8004704 <_dtoa_r+0x494>
 80046ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046ee:	2200      	movs	r2, #0
 80046f0:	4b46      	ldr	r3, [pc, #280]	@ (800480c <_dtoa_r+0x59c>)
 80046f2:	f7fb fef1 	bl	80004d8 <__aeabi_dmul>
 80046f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046fa:	f7fc f973 	bl	80009e4 <__aeabi_dcmpge>
 80046fe:	2800      	cmp	r0, #0
 8004700:	f000 8266 	beq.w	8004bd0 <_dtoa_r+0x960>
 8004704:	2400      	movs	r4, #0
 8004706:	4625      	mov	r5, r4
 8004708:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800470a:	4656      	mov	r6, sl
 800470c:	ea6f 0803 	mvn.w	r8, r3
 8004710:	2700      	movs	r7, #0
 8004712:	4621      	mov	r1, r4
 8004714:	4648      	mov	r0, r9
 8004716:	f000 fcbd 	bl	8005094 <_Bfree>
 800471a:	2d00      	cmp	r5, #0
 800471c:	f000 80bd 	beq.w	800489a <_dtoa_r+0x62a>
 8004720:	b12f      	cbz	r7, 800472e <_dtoa_r+0x4be>
 8004722:	42af      	cmp	r7, r5
 8004724:	d003      	beq.n	800472e <_dtoa_r+0x4be>
 8004726:	4639      	mov	r1, r7
 8004728:	4648      	mov	r0, r9
 800472a:	f000 fcb3 	bl	8005094 <_Bfree>
 800472e:	4629      	mov	r1, r5
 8004730:	4648      	mov	r0, r9
 8004732:	f000 fcaf 	bl	8005094 <_Bfree>
 8004736:	e0b0      	b.n	800489a <_dtoa_r+0x62a>
 8004738:	07e2      	lsls	r2, r4, #31
 800473a:	d505      	bpl.n	8004748 <_dtoa_r+0x4d8>
 800473c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004740:	f7fb feca 	bl	80004d8 <__aeabi_dmul>
 8004744:	2301      	movs	r3, #1
 8004746:	3601      	adds	r6, #1
 8004748:	1064      	asrs	r4, r4, #1
 800474a:	3508      	adds	r5, #8
 800474c:	e762      	b.n	8004614 <_dtoa_r+0x3a4>
 800474e:	2602      	movs	r6, #2
 8004750:	e765      	b.n	800461e <_dtoa_r+0x3ae>
 8004752:	46b8      	mov	r8, r7
 8004754:	9c08      	ldr	r4, [sp, #32]
 8004756:	e784      	b.n	8004662 <_dtoa_r+0x3f2>
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <_dtoa_r+0x588>)
 800475a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800475c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004764:	4454      	add	r4, sl
 8004766:	2900      	cmp	r1, #0
 8004768:	d054      	beq.n	8004814 <_dtoa_r+0x5a4>
 800476a:	2000      	movs	r0, #0
 800476c:	4928      	ldr	r1, [pc, #160]	@ (8004810 <_dtoa_r+0x5a0>)
 800476e:	f7fb ffdd 	bl	800072c <__aeabi_ddiv>
 8004772:	4633      	mov	r3, r6
 8004774:	462a      	mov	r2, r5
 8004776:	f7fb fcf7 	bl	8000168 <__aeabi_dsub>
 800477a:	4656      	mov	r6, sl
 800477c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004784:	f7fc f958 	bl	8000a38 <__aeabi_d2iz>
 8004788:	4605      	mov	r5, r0
 800478a:	f7fb fe3b 	bl	8000404 <__aeabi_i2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004796:	f7fb fce7 	bl	8000168 <__aeabi_dsub>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	3530      	adds	r5, #48	@ 0x30
 80047a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047a8:	f806 5b01 	strb.w	r5, [r6], #1
 80047ac:	f7fc f906 	bl	80009bc <__aeabi_dcmplt>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d172      	bne.n	800489a <_dtoa_r+0x62a>
 80047b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047b8:	2000      	movs	r0, #0
 80047ba:	4911      	ldr	r1, [pc, #68]	@ (8004800 <_dtoa_r+0x590>)
 80047bc:	f7fb fcd4 	bl	8000168 <__aeabi_dsub>
 80047c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047c4:	f7fc f8fa 	bl	80009bc <__aeabi_dcmplt>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f040 80b4 	bne.w	8004936 <_dtoa_r+0x6c6>
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	f43f af70 	beq.w	80046b4 <_dtoa_r+0x444>
 80047d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047d8:	2200      	movs	r2, #0
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <_dtoa_r+0x594>)
 80047dc:	f7fb fe7c 	bl	80004d8 <__aeabi_dmul>
 80047e0:	2200      	movs	r2, #0
 80047e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <_dtoa_r+0x594>)
 80047ec:	f7fb fe74 	bl	80004d8 <__aeabi_dmul>
 80047f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047f4:	e7c4      	b.n	8004780 <_dtoa_r+0x510>
 80047f6:	bf00      	nop
 80047f8:	08006458 	.word	0x08006458
 80047fc:	08006430 	.word	0x08006430
 8004800:	3ff00000 	.word	0x3ff00000
 8004804:	40240000 	.word	0x40240000
 8004808:	401c0000 	.word	0x401c0000
 800480c:	40140000 	.word	0x40140000
 8004810:	3fe00000 	.word	0x3fe00000
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	f7fb fe5e 	bl	80004d8 <__aeabi_dmul>
 800481c:	4656      	mov	r6, sl
 800481e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004822:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004828:	f7fc f906 	bl	8000a38 <__aeabi_d2iz>
 800482c:	4605      	mov	r5, r0
 800482e:	f7fb fde9 	bl	8000404 <__aeabi_i2d>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800483a:	f7fb fc95 	bl	8000168 <__aeabi_dsub>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	3530      	adds	r5, #48	@ 0x30
 8004844:	f806 5b01 	strb.w	r5, [r6], #1
 8004848:	42a6      	cmp	r6, r4
 800484a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	d124      	bne.n	800489e <_dtoa_r+0x62e>
 8004854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004858:	4bae      	ldr	r3, [pc, #696]	@ (8004b14 <_dtoa_r+0x8a4>)
 800485a:	f7fb fc87 	bl	800016c <__adddf3>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004866:	f7fc f8c7 	bl	80009f8 <__aeabi_dcmpgt>
 800486a:	2800      	cmp	r0, #0
 800486c:	d163      	bne.n	8004936 <_dtoa_r+0x6c6>
 800486e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004872:	2000      	movs	r0, #0
 8004874:	49a7      	ldr	r1, [pc, #668]	@ (8004b14 <_dtoa_r+0x8a4>)
 8004876:	f7fb fc77 	bl	8000168 <__aeabi_dsub>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004882:	f7fc f89b 	bl	80009bc <__aeabi_dcmplt>
 8004886:	2800      	cmp	r0, #0
 8004888:	f43f af14 	beq.w	80046b4 <_dtoa_r+0x444>
 800488c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800488e:	1e73      	subs	r3, r6, #1
 8004890:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004892:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004896:	2b30      	cmp	r3, #48	@ 0x30
 8004898:	d0f8      	beq.n	800488c <_dtoa_r+0x61c>
 800489a:	4647      	mov	r7, r8
 800489c:	e03b      	b.n	8004916 <_dtoa_r+0x6a6>
 800489e:	4b9e      	ldr	r3, [pc, #632]	@ (8004b18 <_dtoa_r+0x8a8>)
 80048a0:	f7fb fe1a 	bl	80004d8 <__aeabi_dmul>
 80048a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048a8:	e7bc      	b.n	8004824 <_dtoa_r+0x5b4>
 80048aa:	4656      	mov	r6, sl
 80048ac:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80048b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fb ff38 	bl	800072c <__aeabi_ddiv>
 80048bc:	f7fc f8bc 	bl	8000a38 <__aeabi_d2iz>
 80048c0:	4680      	mov	r8, r0
 80048c2:	f7fb fd9f 	bl	8000404 <__aeabi_i2d>
 80048c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ca:	f7fb fe05 	bl	80004d8 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4620      	mov	r0, r4
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7fb fc47 	bl	8000168 <__aeabi_dsub>
 80048da:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80048de:	9d08      	ldr	r5, [sp, #32]
 80048e0:	f806 4b01 	strb.w	r4, [r6], #1
 80048e4:	eba6 040a 	sub.w	r4, r6, sl
 80048e8:	42a5      	cmp	r5, r4
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	d133      	bne.n	8004958 <_dtoa_r+0x6e8>
 80048f0:	f7fb fc3c 	bl	800016c <__adddf3>
 80048f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	f7fc f87c 	bl	80009f8 <__aeabi_dcmpgt>
 8004900:	b9c0      	cbnz	r0, 8004934 <_dtoa_r+0x6c4>
 8004902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fc f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800490e:	b110      	cbz	r0, 8004916 <_dtoa_r+0x6a6>
 8004910:	f018 0f01 	tst.w	r8, #1
 8004914:	d10e      	bne.n	8004934 <_dtoa_r+0x6c4>
 8004916:	4648      	mov	r0, r9
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	f000 fbbb 	bl	8005094 <_Bfree>
 800491e:	2300      	movs	r3, #0
 8004920:	7033      	strb	r3, [r6, #0]
 8004922:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004924:	3701      	adds	r7, #1
 8004926:	601f      	str	r7, [r3, #0]
 8004928:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 824b 	beq.w	8004dc6 <_dtoa_r+0xb56>
 8004930:	601e      	str	r6, [r3, #0]
 8004932:	e248      	b.n	8004dc6 <_dtoa_r+0xb56>
 8004934:	46b8      	mov	r8, r7
 8004936:	4633      	mov	r3, r6
 8004938:	461e      	mov	r6, r3
 800493a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800493e:	2a39      	cmp	r2, #57	@ 0x39
 8004940:	d106      	bne.n	8004950 <_dtoa_r+0x6e0>
 8004942:	459a      	cmp	sl, r3
 8004944:	d1f8      	bne.n	8004938 <_dtoa_r+0x6c8>
 8004946:	2230      	movs	r2, #48	@ 0x30
 8004948:	f108 0801 	add.w	r8, r8, #1
 800494c:	f88a 2000 	strb.w	r2, [sl]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	3201      	adds	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e7a0      	b.n	800489a <_dtoa_r+0x62a>
 8004958:	2200      	movs	r2, #0
 800495a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b18 <_dtoa_r+0x8a8>)
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	2200      	movs	r2, #0
 8004962:	2300      	movs	r3, #0
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
 8004968:	f7fc f81e 	bl	80009a8 <__aeabi_dcmpeq>
 800496c:	2800      	cmp	r0, #0
 800496e:	d09f      	beq.n	80048b0 <_dtoa_r+0x640>
 8004970:	e7d1      	b.n	8004916 <_dtoa_r+0x6a6>
 8004972:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004974:	2a00      	cmp	r2, #0
 8004976:	f000 80ea 	beq.w	8004b4e <_dtoa_r+0x8de>
 800497a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800497c:	2a01      	cmp	r2, #1
 800497e:	f300 80cd 	bgt.w	8004b1c <_dtoa_r+0x8ac>
 8004982:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004984:	2a00      	cmp	r2, #0
 8004986:	f000 80c1 	beq.w	8004b0c <_dtoa_r+0x89c>
 800498a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800498e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004990:	9e04      	ldr	r6, [sp, #16]
 8004992:	9a04      	ldr	r2, [sp, #16]
 8004994:	2101      	movs	r1, #1
 8004996:	441a      	add	r2, r3
 8004998:	9204      	str	r2, [sp, #16]
 800499a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800499c:	4648      	mov	r0, r9
 800499e:	441a      	add	r2, r3
 80049a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80049a2:	f000 fc2b 	bl	80051fc <__i2b>
 80049a6:	4605      	mov	r5, r0
 80049a8:	b166      	cbz	r6, 80049c4 <_dtoa_r+0x754>
 80049aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd09      	ble.n	80049c4 <_dtoa_r+0x754>
 80049b0:	42b3      	cmp	r3, r6
 80049b2:	bfa8      	it	ge
 80049b4:	4633      	movge	r3, r6
 80049b6:	9a04      	ldr	r2, [sp, #16]
 80049b8:	1af6      	subs	r6, r6, r3
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	9204      	str	r2, [sp, #16]
 80049be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80049c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c6:	b30b      	cbz	r3, 8004a0c <_dtoa_r+0x79c>
 80049c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80c6 	beq.w	8004b5c <_dtoa_r+0x8ec>
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	f000 80c0 	beq.w	8004b56 <_dtoa_r+0x8e6>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4622      	mov	r2, r4
 80049da:	4648      	mov	r0, r9
 80049dc:	f000 fcc6 	bl	800536c <__pow5mult>
 80049e0:	9a03      	ldr	r2, [sp, #12]
 80049e2:	4601      	mov	r1, r0
 80049e4:	4605      	mov	r5, r0
 80049e6:	4648      	mov	r0, r9
 80049e8:	f000 fc1e 	bl	8005228 <__multiply>
 80049ec:	9903      	ldr	r1, [sp, #12]
 80049ee:	4680      	mov	r8, r0
 80049f0:	4648      	mov	r0, r9
 80049f2:	f000 fb4f 	bl	8005094 <_Bfree>
 80049f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049f8:	1b1b      	subs	r3, r3, r4
 80049fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80049fc:	f000 80b1 	beq.w	8004b62 <_dtoa_r+0x8f2>
 8004a00:	4641      	mov	r1, r8
 8004a02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a04:	4648      	mov	r0, r9
 8004a06:	f000 fcb1 	bl	800536c <__pow5mult>
 8004a0a:	9003      	str	r0, [sp, #12]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4648      	mov	r0, r9
 8004a10:	f000 fbf4 	bl	80051fc <__i2b>
 8004a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a16:	4604      	mov	r4, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 81d8 	beq.w	8004dce <_dtoa_r+0xb5e>
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4601      	mov	r1, r0
 8004a22:	4648      	mov	r0, r9
 8004a24:	f000 fca2 	bl	800536c <__pow5mult>
 8004a28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f300 809f 	bgt.w	8004b70 <_dtoa_r+0x900>
 8004a32:	9b06      	ldr	r3, [sp, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8097 	bne.w	8004b68 <_dtoa_r+0x8f8>
 8004a3a:	9b07      	ldr	r3, [sp, #28]
 8004a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 8093 	bne.w	8004b6c <_dtoa_r+0x8fc>
 8004a46:	9b07      	ldr	r3, [sp, #28]
 8004a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a4c:	0d1b      	lsrs	r3, r3, #20
 8004a4e:	051b      	lsls	r3, r3, #20
 8004a50:	b133      	cbz	r3, 8004a60 <_dtoa_r+0x7f0>
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	3301      	adds	r3, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5e:	2301      	movs	r3, #1
 8004a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 81b8 	beq.w	8004dda <_dtoa_r+0xb6a>
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a70:	6918      	ldr	r0, [r3, #16]
 8004a72:	f000 fb77 	bl	8005164 <__hi0bits>
 8004a76:	f1c0 0020 	rsb	r0, r0, #32
 8004a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a7c:	4418      	add	r0, r3
 8004a7e:	f010 001f 	ands.w	r0, r0, #31
 8004a82:	f000 8082 	beq.w	8004b8a <_dtoa_r+0x91a>
 8004a86:	f1c0 0320 	rsb	r3, r0, #32
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	dd73      	ble.n	8004b76 <_dtoa_r+0x906>
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	f1c0 001c 	rsb	r0, r0, #28
 8004a94:	4403      	add	r3, r0
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a9a:	4406      	add	r6, r0
 8004a9c:	4403      	add	r3, r0
 8004a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa0:	9b04      	ldr	r3, [sp, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	dd05      	ble.n	8004ab2 <_dtoa_r+0x842>
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4648      	mov	r0, r9
 8004aaa:	9903      	ldr	r1, [sp, #12]
 8004aac:	f000 fcb8 	bl	8005420 <__lshift>
 8004ab0:	9003      	str	r0, [sp, #12]
 8004ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	dd05      	ble.n	8004ac4 <_dtoa_r+0x854>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	461a      	mov	r2, r3
 8004abc:	4648      	mov	r0, r9
 8004abe:	f000 fcaf 	bl	8005420 <__lshift>
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d061      	beq.n	8004b8e <_dtoa_r+0x91e>
 8004aca:	4621      	mov	r1, r4
 8004acc:	9803      	ldr	r0, [sp, #12]
 8004ace:	f000 fd13 	bl	80054f8 <__mcmp>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	da5b      	bge.n	8004b8e <_dtoa_r+0x91e>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	220a      	movs	r2, #10
 8004ada:	4648      	mov	r0, r9
 8004adc:	9903      	ldr	r1, [sp, #12]
 8004ade:	f000 fafb 	bl	80050d8 <__multadd>
 8004ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ae4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ae8:	9003      	str	r0, [sp, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8177 	beq.w	8004dde <_dtoa_r+0xb6e>
 8004af0:	4629      	mov	r1, r5
 8004af2:	2300      	movs	r3, #0
 8004af4:	220a      	movs	r2, #10
 8004af6:	4648      	mov	r0, r9
 8004af8:	f000 faee 	bl	80050d8 <__multadd>
 8004afc:	f1bb 0f00 	cmp.w	fp, #0
 8004b00:	4605      	mov	r5, r0
 8004b02:	dc6f      	bgt.n	8004be4 <_dtoa_r+0x974>
 8004b04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	dc49      	bgt.n	8004b9e <_dtoa_r+0x92e>
 8004b0a:	e06b      	b.n	8004be4 <_dtoa_r+0x974>
 8004b0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b12:	e73c      	b.n	800498e <_dtoa_r+0x71e>
 8004b14:	3fe00000 	.word	0x3fe00000
 8004b18:	40240000 	.word	0x40240000
 8004b1c:	9b08      	ldr	r3, [sp, #32]
 8004b1e:	1e5c      	subs	r4, r3, #1
 8004b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	db09      	blt.n	8004b3a <_dtoa_r+0x8ca>
 8004b26:	1b1c      	subs	r4, r3, r4
 8004b28:	9b08      	ldr	r3, [sp, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f6bf af30 	bge.w	8004990 <_dtoa_r+0x720>
 8004b30:	9b04      	ldr	r3, [sp, #16]
 8004b32:	9a08      	ldr	r2, [sp, #32]
 8004b34:	1a9e      	subs	r6, r3, r2
 8004b36:	2300      	movs	r3, #0
 8004b38:	e72b      	b.n	8004992 <_dtoa_r+0x722>
 8004b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b3e:	1ae3      	subs	r3, r4, r3
 8004b40:	441a      	add	r2, r3
 8004b42:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b44:	9e04      	ldr	r6, [sp, #16]
 8004b46:	2400      	movs	r4, #0
 8004b48:	9b08      	ldr	r3, [sp, #32]
 8004b4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b4c:	e721      	b.n	8004992 <_dtoa_r+0x722>
 8004b4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b50:	9e04      	ldr	r6, [sp, #16]
 8004b52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b54:	e728      	b.n	80049a8 <_dtoa_r+0x738>
 8004b56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b5a:	e751      	b.n	8004a00 <_dtoa_r+0x790>
 8004b5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b5e:	9903      	ldr	r1, [sp, #12]
 8004b60:	e750      	b.n	8004a04 <_dtoa_r+0x794>
 8004b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b66:	e751      	b.n	8004a0c <_dtoa_r+0x79c>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e779      	b.n	8004a60 <_dtoa_r+0x7f0>
 8004b6c:	9b06      	ldr	r3, [sp, #24]
 8004b6e:	e777      	b.n	8004a60 <_dtoa_r+0x7f0>
 8004b70:	2300      	movs	r3, #0
 8004b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b74:	e779      	b.n	8004a6a <_dtoa_r+0x7fa>
 8004b76:	d093      	beq.n	8004aa0 <_dtoa_r+0x830>
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	331c      	adds	r3, #28
 8004b7c:	441a      	add	r2, r3
 8004b7e:	9204      	str	r2, [sp, #16]
 8004b80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b82:	441e      	add	r6, r3
 8004b84:	441a      	add	r2, r3
 8004b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b88:	e78a      	b.n	8004aa0 <_dtoa_r+0x830>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	e7f4      	b.n	8004b78 <_dtoa_r+0x908>
 8004b8e:	9b08      	ldr	r3, [sp, #32]
 8004b90:	46b8      	mov	r8, r7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dc20      	bgt.n	8004bd8 <_dtoa_r+0x968>
 8004b96:	469b      	mov	fp, r3
 8004b98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	dd1e      	ble.n	8004bdc <_dtoa_r+0x96c>
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	f47f adb1 	bne.w	8004708 <_dtoa_r+0x498>
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	465b      	mov	r3, fp
 8004baa:	2205      	movs	r2, #5
 8004bac:	4648      	mov	r0, r9
 8004bae:	f000 fa93 	bl	80050d8 <__multadd>
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	9803      	ldr	r0, [sp, #12]
 8004bb8:	f000 fc9e 	bl	80054f8 <__mcmp>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f77f ada3 	ble.w	8004708 <_dtoa_r+0x498>
 8004bc2:	4656      	mov	r6, sl
 8004bc4:	2331      	movs	r3, #49	@ 0x31
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	f806 3b01 	strb.w	r3, [r6], #1
 8004bce:	e59f      	b.n	8004710 <_dtoa_r+0x4a0>
 8004bd0:	46b8      	mov	r8, r7
 8004bd2:	9c08      	ldr	r4, [sp, #32]
 8004bd4:	4625      	mov	r5, r4
 8004bd6:	e7f4      	b.n	8004bc2 <_dtoa_r+0x952>
 8004bd8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8101 	beq.w	8004de6 <_dtoa_r+0xb76>
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	dd05      	ble.n	8004bf4 <_dtoa_r+0x984>
 8004be8:	4629      	mov	r1, r5
 8004bea:	4632      	mov	r2, r6
 8004bec:	4648      	mov	r0, r9
 8004bee:	f000 fc17 	bl	8005420 <__lshift>
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d05c      	beq.n	8004cb4 <_dtoa_r+0xa44>
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	6869      	ldr	r1, [r5, #4]
 8004bfe:	f000 fa09 	bl	8005014 <_Balloc>
 8004c02:	4606      	mov	r6, r0
 8004c04:	b928      	cbnz	r0, 8004c12 <_dtoa_r+0x9a2>
 8004c06:	4602      	mov	r2, r0
 8004c08:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c0c:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <_dtoa_r+0xba0>)
 8004c0e:	f7ff bb43 	b.w	8004298 <_dtoa_r+0x28>
 8004c12:	692a      	ldr	r2, [r5, #16]
 8004c14:	f105 010c 	add.w	r1, r5, #12
 8004c18:	3202      	adds	r2, #2
 8004c1a:	0092      	lsls	r2, r2, #2
 8004c1c:	300c      	adds	r0, #12
 8004c1e:	f000 ff9d 	bl	8005b5c <memcpy>
 8004c22:	2201      	movs	r2, #1
 8004c24:	4631      	mov	r1, r6
 8004c26:	4648      	mov	r0, r9
 8004c28:	f000 fbfa 	bl	8005420 <__lshift>
 8004c2c:	462f      	mov	r7, r5
 8004c2e:	4605      	mov	r5, r0
 8004c30:	f10a 0301 	add.w	r3, sl, #1
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	eb0a 030b 	add.w	r3, sl, fp
 8004c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c3c:	9b06      	ldr	r3, [sp, #24]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c44:	9b04      	ldr	r3, [sp, #16]
 8004c46:	4621      	mov	r1, r4
 8004c48:	9803      	ldr	r0, [sp, #12]
 8004c4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004c4e:	f7ff fa84 	bl	800415a <quorem>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4639      	mov	r1, r7
 8004c56:	3330      	adds	r3, #48	@ 0x30
 8004c58:	9006      	str	r0, [sp, #24]
 8004c5a:	9803      	ldr	r0, [sp, #12]
 8004c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c5e:	f000 fc4b 	bl	80054f8 <__mcmp>
 8004c62:	462a      	mov	r2, r5
 8004c64:	9008      	str	r0, [sp, #32]
 8004c66:	4621      	mov	r1, r4
 8004c68:	4648      	mov	r0, r9
 8004c6a:	f000 fc61 	bl	8005530 <__mdiff>
 8004c6e:	68c2      	ldr	r2, [r0, #12]
 8004c70:	4606      	mov	r6, r0
 8004c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c74:	bb02      	cbnz	r2, 8004cb8 <_dtoa_r+0xa48>
 8004c76:	4601      	mov	r1, r0
 8004c78:	9803      	ldr	r0, [sp, #12]
 8004c7a:	f000 fc3d 	bl	80054f8 <__mcmp>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c82:	4631      	mov	r1, r6
 8004c84:	4648      	mov	r0, r9
 8004c86:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004c8a:	f000 fa03 	bl	8005094 <_Bfree>
 8004c8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c92:	9e04      	ldr	r6, [sp, #16]
 8004c94:	ea42 0103 	orr.w	r1, r2, r3
 8004c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9a:	4319      	orrs	r1, r3
 8004c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c9e:	d10d      	bne.n	8004cbc <_dtoa_r+0xa4c>
 8004ca0:	2b39      	cmp	r3, #57	@ 0x39
 8004ca2:	d027      	beq.n	8004cf4 <_dtoa_r+0xa84>
 8004ca4:	9a08      	ldr	r2, [sp, #32]
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	dd01      	ble.n	8004cae <_dtoa_r+0xa3e>
 8004caa:	9b06      	ldr	r3, [sp, #24]
 8004cac:	3331      	adds	r3, #49	@ 0x31
 8004cae:	f88b 3000 	strb.w	r3, [fp]
 8004cb2:	e52e      	b.n	8004712 <_dtoa_r+0x4a2>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	e7b9      	b.n	8004c2c <_dtoa_r+0x9bc>
 8004cb8:	2201      	movs	r2, #1
 8004cba:	e7e2      	b.n	8004c82 <_dtoa_r+0xa12>
 8004cbc:	9908      	ldr	r1, [sp, #32]
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	db04      	blt.n	8004ccc <_dtoa_r+0xa5c>
 8004cc2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004cc4:	4301      	orrs	r1, r0
 8004cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cc8:	4301      	orrs	r1, r0
 8004cca:	d120      	bne.n	8004d0e <_dtoa_r+0xa9e>
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	ddee      	ble.n	8004cae <_dtoa_r+0xa3e>
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	9903      	ldr	r1, [sp, #12]
 8004cd4:	4648      	mov	r0, r9
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	f000 fba2 	bl	8005420 <__lshift>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	9003      	str	r0, [sp, #12]
 8004ce0:	f000 fc0a 	bl	80054f8 <__mcmp>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	dc02      	bgt.n	8004cf0 <_dtoa_r+0xa80>
 8004cea:	d1e0      	bne.n	8004cae <_dtoa_r+0xa3e>
 8004cec:	07da      	lsls	r2, r3, #31
 8004cee:	d5de      	bpl.n	8004cae <_dtoa_r+0xa3e>
 8004cf0:	2b39      	cmp	r3, #57	@ 0x39
 8004cf2:	d1da      	bne.n	8004caa <_dtoa_r+0xa3a>
 8004cf4:	2339      	movs	r3, #57	@ 0x39
 8004cf6:	f88b 3000 	strb.w	r3, [fp]
 8004cfa:	4633      	mov	r3, r6
 8004cfc:	461e      	mov	r6, r3
 8004cfe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2a39      	cmp	r2, #57	@ 0x39
 8004d06:	d04e      	beq.n	8004da6 <_dtoa_r+0xb36>
 8004d08:	3201      	adds	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e501      	b.n	8004712 <_dtoa_r+0x4a2>
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	dd03      	ble.n	8004d1a <_dtoa_r+0xaaa>
 8004d12:	2b39      	cmp	r3, #57	@ 0x39
 8004d14:	d0ee      	beq.n	8004cf4 <_dtoa_r+0xa84>
 8004d16:	3301      	adds	r3, #1
 8004d18:	e7c9      	b.n	8004cae <_dtoa_r+0xa3e>
 8004d1a:	9a04      	ldr	r2, [sp, #16]
 8004d1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d22:	428a      	cmp	r2, r1
 8004d24:	d028      	beq.n	8004d78 <_dtoa_r+0xb08>
 8004d26:	2300      	movs	r3, #0
 8004d28:	220a      	movs	r2, #10
 8004d2a:	9903      	ldr	r1, [sp, #12]
 8004d2c:	4648      	mov	r0, r9
 8004d2e:	f000 f9d3 	bl	80050d8 <__multadd>
 8004d32:	42af      	cmp	r7, r5
 8004d34:	9003      	str	r0, [sp, #12]
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	f04f 020a 	mov.w	r2, #10
 8004d3e:	4639      	mov	r1, r7
 8004d40:	4648      	mov	r0, r9
 8004d42:	d107      	bne.n	8004d54 <_dtoa_r+0xae4>
 8004d44:	f000 f9c8 	bl	80050d8 <__multadd>
 8004d48:	4607      	mov	r7, r0
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	e777      	b.n	8004c44 <_dtoa_r+0x9d4>
 8004d54:	f000 f9c0 	bl	80050d8 <__multadd>
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	220a      	movs	r2, #10
 8004d60:	4648      	mov	r0, r9
 8004d62:	f000 f9b9 	bl	80050d8 <__multadd>
 8004d66:	4605      	mov	r5, r0
 8004d68:	e7f0      	b.n	8004d4c <_dtoa_r+0xadc>
 8004d6a:	f1bb 0f00 	cmp.w	fp, #0
 8004d6e:	bfcc      	ite	gt
 8004d70:	465e      	movgt	r6, fp
 8004d72:	2601      	movle	r6, #1
 8004d74:	2700      	movs	r7, #0
 8004d76:	4456      	add	r6, sl
 8004d78:	2201      	movs	r2, #1
 8004d7a:	9903      	ldr	r1, [sp, #12]
 8004d7c:	4648      	mov	r0, r9
 8004d7e:	9304      	str	r3, [sp, #16]
 8004d80:	f000 fb4e 	bl	8005420 <__lshift>
 8004d84:	4621      	mov	r1, r4
 8004d86:	9003      	str	r0, [sp, #12]
 8004d88:	f000 fbb6 	bl	80054f8 <__mcmp>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	dcb4      	bgt.n	8004cfa <_dtoa_r+0xa8a>
 8004d90:	d102      	bne.n	8004d98 <_dtoa_r+0xb28>
 8004d92:	9b04      	ldr	r3, [sp, #16]
 8004d94:	07db      	lsls	r3, r3, #31
 8004d96:	d4b0      	bmi.n	8004cfa <_dtoa_r+0xa8a>
 8004d98:	4633      	mov	r3, r6
 8004d9a:	461e      	mov	r6, r3
 8004d9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004da0:	2a30      	cmp	r2, #48	@ 0x30
 8004da2:	d0fa      	beq.n	8004d9a <_dtoa_r+0xb2a>
 8004da4:	e4b5      	b.n	8004712 <_dtoa_r+0x4a2>
 8004da6:	459a      	cmp	sl, r3
 8004da8:	d1a8      	bne.n	8004cfc <_dtoa_r+0xa8c>
 8004daa:	2331      	movs	r3, #49	@ 0x31
 8004dac:	f108 0801 	add.w	r8, r8, #1
 8004db0:	f88a 3000 	strb.w	r3, [sl]
 8004db4:	e4ad      	b.n	8004712 <_dtoa_r+0x4a2>
 8004db6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004db8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004e14 <_dtoa_r+0xba4>
 8004dbc:	b11b      	cbz	r3, 8004dc6 <_dtoa_r+0xb56>
 8004dbe:	f10a 0308 	add.w	r3, sl, #8
 8004dc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	b017      	add	sp, #92	@ 0x5c
 8004dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	f77f ae2e 	ble.w	8004a32 <_dtoa_r+0x7c2>
 8004dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dda:	2001      	movs	r0, #1
 8004ddc:	e64d      	b.n	8004a7a <_dtoa_r+0x80a>
 8004dde:	f1bb 0f00 	cmp.w	fp, #0
 8004de2:	f77f aed9 	ble.w	8004b98 <_dtoa_r+0x928>
 8004de6:	4656      	mov	r6, sl
 8004de8:	4621      	mov	r1, r4
 8004dea:	9803      	ldr	r0, [sp, #12]
 8004dec:	f7ff f9b5 	bl	800415a <quorem>
 8004df0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004df4:	f806 3b01 	strb.w	r3, [r6], #1
 8004df8:	eba6 020a 	sub.w	r2, r6, sl
 8004dfc:	4593      	cmp	fp, r2
 8004dfe:	ddb4      	ble.n	8004d6a <_dtoa_r+0xafa>
 8004e00:	2300      	movs	r3, #0
 8004e02:	220a      	movs	r2, #10
 8004e04:	4648      	mov	r0, r9
 8004e06:	9903      	ldr	r1, [sp, #12]
 8004e08:	f000 f966 	bl	80050d8 <__multadd>
 8004e0c:	9003      	str	r0, [sp, #12]
 8004e0e:	e7eb      	b.n	8004de8 <_dtoa_r+0xb78>
 8004e10:	08006362 	.word	0x08006362
 8004e14:	080062e6 	.word	0x080062e6

08004e18 <_free_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d040      	beq.n	8004ea2 <_free_r+0x8a>
 8004e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e24:	1f0c      	subs	r4, r1, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bfb8      	it	lt
 8004e2a:	18e4      	addlt	r4, r4, r3
 8004e2c:	f000 f8e6 	bl	8004ffc <__malloc_lock>
 8004e30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <_free_r+0x8c>)
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	b933      	cbnz	r3, 8004e44 <_free_r+0x2c>
 8004e36:	6063      	str	r3, [r4, #4]
 8004e38:	6014      	str	r4, [r2, #0]
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e40:	f000 b8e2 	b.w	8005008 <__malloc_unlock>
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d908      	bls.n	8004e5a <_free_r+0x42>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	1821      	adds	r1, r4, r0
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf01      	itttt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	1809      	addeq	r1, r1, r0
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	e7ed      	b.n	8004e36 <_free_r+0x1e>
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	b10b      	cbz	r3, 8004e64 <_free_r+0x4c>
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d9fa      	bls.n	8004e5a <_free_r+0x42>
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	1850      	adds	r0, r2, r1
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d10b      	bne.n	8004e84 <_free_r+0x6c>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	4401      	add	r1, r0
 8004e70:	1850      	adds	r0, r2, r1
 8004e72:	4283      	cmp	r3, r0
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	d1e0      	bne.n	8004e3a <_free_r+0x22>
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4408      	add	r0, r1
 8004e7e:	6010      	str	r0, [r2, #0]
 8004e80:	6053      	str	r3, [r2, #4]
 8004e82:	e7da      	b.n	8004e3a <_free_r+0x22>
 8004e84:	d902      	bls.n	8004e8c <_free_r+0x74>
 8004e86:	230c      	movs	r3, #12
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	e7d6      	b.n	8004e3a <_free_r+0x22>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	6054      	str	r4, [r2, #4]
 8004ea0:	e7cb      	b.n	8004e3a <_free_r+0x22>
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	200003bc 	.word	0x200003bc

08004ea8 <malloc>:
 8004ea8:	4b02      	ldr	r3, [pc, #8]	@ (8004eb4 <malloc+0xc>)
 8004eaa:	4601      	mov	r1, r0
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	f000 b825 	b.w	8004efc <_malloc_r>
 8004eb2:	bf00      	nop
 8004eb4:	20000018 	.word	0x20000018

08004eb8 <sbrk_aligned>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4e0f      	ldr	r6, [pc, #60]	@ (8004ef8 <sbrk_aligned+0x40>)
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	6831      	ldr	r1, [r6, #0]
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	b911      	cbnz	r1, 8004eca <sbrk_aligned+0x12>
 8004ec4:	f000 fe3a 	bl	8005b3c <_sbrk_r>
 8004ec8:	6030      	str	r0, [r6, #0]
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 fe35 	bl	8005b3c <_sbrk_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	d103      	bne.n	8004ede <sbrk_aligned+0x26>
 8004ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8004eda:	4620      	mov	r0, r4
 8004edc:	bd70      	pop	{r4, r5, r6, pc}
 8004ede:	1cc4      	adds	r4, r0, #3
 8004ee0:	f024 0403 	bic.w	r4, r4, #3
 8004ee4:	42a0      	cmp	r0, r4
 8004ee6:	d0f8      	beq.n	8004eda <sbrk_aligned+0x22>
 8004ee8:	1a21      	subs	r1, r4, r0
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 fe26 	bl	8005b3c <_sbrk_r>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d1f2      	bne.n	8004eda <sbrk_aligned+0x22>
 8004ef4:	e7ef      	b.n	8004ed6 <sbrk_aligned+0x1e>
 8004ef6:	bf00      	nop
 8004ef8:	200003b8 	.word	0x200003b8

08004efc <_malloc_r>:
 8004efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f00:	1ccd      	adds	r5, r1, #3
 8004f02:	f025 0503 	bic.w	r5, r5, #3
 8004f06:	3508      	adds	r5, #8
 8004f08:	2d0c      	cmp	r5, #12
 8004f0a:	bf38      	it	cc
 8004f0c:	250c      	movcc	r5, #12
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	4606      	mov	r6, r0
 8004f12:	db01      	blt.n	8004f18 <_malloc_r+0x1c>
 8004f14:	42a9      	cmp	r1, r5
 8004f16:	d904      	bls.n	8004f22 <_malloc_r+0x26>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	6033      	str	r3, [r6, #0]
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ff8 <_malloc_r+0xfc>
 8004f26:	f000 f869 	bl	8004ffc <__malloc_lock>
 8004f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2e:	461c      	mov	r4, r3
 8004f30:	bb44      	cbnz	r4, 8004f84 <_malloc_r+0x88>
 8004f32:	4629      	mov	r1, r5
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff ffbf 	bl	8004eb8 <sbrk_aligned>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	d158      	bne.n	8004ff2 <_malloc_r+0xf6>
 8004f40:	f8d8 4000 	ldr.w	r4, [r8]
 8004f44:	4627      	mov	r7, r4
 8004f46:	2f00      	cmp	r7, #0
 8004f48:	d143      	bne.n	8004fd2 <_malloc_r+0xd6>
 8004f4a:	2c00      	cmp	r4, #0
 8004f4c:	d04b      	beq.n	8004fe6 <_malloc_r+0xea>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	4639      	mov	r1, r7
 8004f52:	4630      	mov	r0, r6
 8004f54:	eb04 0903 	add.w	r9, r4, r3
 8004f58:	f000 fdf0 	bl	8005b3c <_sbrk_r>
 8004f5c:	4581      	cmp	r9, r0
 8004f5e:	d142      	bne.n	8004fe6 <_malloc_r+0xea>
 8004f60:	6821      	ldr	r1, [r4, #0]
 8004f62:	4630      	mov	r0, r6
 8004f64:	1a6d      	subs	r5, r5, r1
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7ff ffa6 	bl	8004eb8 <sbrk_aligned>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d03a      	beq.n	8004fe6 <_malloc_r+0xea>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	442b      	add	r3, r5
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	bb62      	cbnz	r2, 8004fd8 <_malloc_r+0xdc>
 8004f7e:	f8c8 7000 	str.w	r7, [r8]
 8004f82:	e00f      	b.n	8004fa4 <_malloc_r+0xa8>
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	1b52      	subs	r2, r2, r5
 8004f88:	d420      	bmi.n	8004fcc <_malloc_r+0xd0>
 8004f8a:	2a0b      	cmp	r2, #11
 8004f8c:	d917      	bls.n	8004fbe <_malloc_r+0xc2>
 8004f8e:	1961      	adds	r1, r4, r5
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	6025      	str	r5, [r4, #0]
 8004f94:	bf18      	it	ne
 8004f96:	6059      	strne	r1, [r3, #4]
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	bf08      	it	eq
 8004f9c:	f8c8 1000 	streq.w	r1, [r8]
 8004fa0:	5162      	str	r2, [r4, r5]
 8004fa2:	604b      	str	r3, [r1, #4]
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 f82f 	bl	8005008 <__malloc_unlock>
 8004faa:	f104 000b 	add.w	r0, r4, #11
 8004fae:	1d23      	adds	r3, r4, #4
 8004fb0:	f020 0007 	bic.w	r0, r0, #7
 8004fb4:	1ac2      	subs	r2, r0, r3
 8004fb6:	bf1c      	itt	ne
 8004fb8:	1a1b      	subne	r3, r3, r0
 8004fba:	50a3      	strne	r3, [r4, r2]
 8004fbc:	e7af      	b.n	8004f1e <_malloc_r+0x22>
 8004fbe:	6862      	ldr	r2, [r4, #4]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	bf0c      	ite	eq
 8004fc4:	f8c8 2000 	streq.w	r2, [r8]
 8004fc8:	605a      	strne	r2, [r3, #4]
 8004fca:	e7eb      	b.n	8004fa4 <_malloc_r+0xa8>
 8004fcc:	4623      	mov	r3, r4
 8004fce:	6864      	ldr	r4, [r4, #4]
 8004fd0:	e7ae      	b.n	8004f30 <_malloc_r+0x34>
 8004fd2:	463c      	mov	r4, r7
 8004fd4:	687f      	ldr	r7, [r7, #4]
 8004fd6:	e7b6      	b.n	8004f46 <_malloc_r+0x4a>
 8004fd8:	461a      	mov	r2, r3
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	d1fb      	bne.n	8004fd8 <_malloc_r+0xdc>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6053      	str	r3, [r2, #4]
 8004fe4:	e7de      	b.n	8004fa4 <_malloc_r+0xa8>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	4630      	mov	r0, r6
 8004fea:	6033      	str	r3, [r6, #0]
 8004fec:	f000 f80c 	bl	8005008 <__malloc_unlock>
 8004ff0:	e794      	b.n	8004f1c <_malloc_r+0x20>
 8004ff2:	6005      	str	r5, [r0, #0]
 8004ff4:	e7d6      	b.n	8004fa4 <_malloc_r+0xa8>
 8004ff6:	bf00      	nop
 8004ff8:	200003bc 	.word	0x200003bc

08004ffc <__malloc_lock>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	@ (8005004 <__malloc_lock+0x8>)
 8004ffe:	f7ff b89c 	b.w	800413a <__retarget_lock_acquire_recursive>
 8005002:	bf00      	nop
 8005004:	200003b4 	.word	0x200003b4

08005008 <__malloc_unlock>:
 8005008:	4801      	ldr	r0, [pc, #4]	@ (8005010 <__malloc_unlock+0x8>)
 800500a:	f7ff b897 	b.w	800413c <__retarget_lock_release_recursive>
 800500e:	bf00      	nop
 8005010:	200003b4 	.word	0x200003b4

08005014 <_Balloc>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	69c6      	ldr	r6, [r0, #28]
 8005018:	4604      	mov	r4, r0
 800501a:	460d      	mov	r5, r1
 800501c:	b976      	cbnz	r6, 800503c <_Balloc+0x28>
 800501e:	2010      	movs	r0, #16
 8005020:	f7ff ff42 	bl	8004ea8 <malloc>
 8005024:	4602      	mov	r2, r0
 8005026:	61e0      	str	r0, [r4, #28]
 8005028:	b920      	cbnz	r0, 8005034 <_Balloc+0x20>
 800502a:	216b      	movs	r1, #107	@ 0x6b
 800502c:	4b17      	ldr	r3, [pc, #92]	@ (800508c <_Balloc+0x78>)
 800502e:	4818      	ldr	r0, [pc, #96]	@ (8005090 <_Balloc+0x7c>)
 8005030:	f000 fda2 	bl	8005b78 <__assert_func>
 8005034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005038:	6006      	str	r6, [r0, #0]
 800503a:	60c6      	str	r6, [r0, #12]
 800503c:	69e6      	ldr	r6, [r4, #28]
 800503e:	68f3      	ldr	r3, [r6, #12]
 8005040:	b183      	cbz	r3, 8005064 <_Balloc+0x50>
 8005042:	69e3      	ldr	r3, [r4, #28]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800504a:	b9b8      	cbnz	r0, 800507c <_Balloc+0x68>
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f605 	lsl.w	r6, r1, r5
 8005052:	1d72      	adds	r2, r6, #5
 8005054:	4620      	mov	r0, r4
 8005056:	0092      	lsls	r2, r2, #2
 8005058:	f000 fdac 	bl	8005bb4 <_calloc_r>
 800505c:	b160      	cbz	r0, 8005078 <_Balloc+0x64>
 800505e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005062:	e00e      	b.n	8005082 <_Balloc+0x6e>
 8005064:	2221      	movs	r2, #33	@ 0x21
 8005066:	2104      	movs	r1, #4
 8005068:	4620      	mov	r0, r4
 800506a:	f000 fda3 	bl	8005bb4 <_calloc_r>
 800506e:	69e3      	ldr	r3, [r4, #28]
 8005070:	60f0      	str	r0, [r6, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e4      	bne.n	8005042 <_Balloc+0x2e>
 8005078:	2000      	movs	r0, #0
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	6802      	ldr	r2, [r0, #0]
 800507e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005082:	2300      	movs	r3, #0
 8005084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005088:	e7f7      	b.n	800507a <_Balloc+0x66>
 800508a:	bf00      	nop
 800508c:	080062f3 	.word	0x080062f3
 8005090:	08006373 	.word	0x08006373

08005094 <_Bfree>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	69c6      	ldr	r6, [r0, #28]
 8005098:	4605      	mov	r5, r0
 800509a:	460c      	mov	r4, r1
 800509c:	b976      	cbnz	r6, 80050bc <_Bfree+0x28>
 800509e:	2010      	movs	r0, #16
 80050a0:	f7ff ff02 	bl	8004ea8 <malloc>
 80050a4:	4602      	mov	r2, r0
 80050a6:	61e8      	str	r0, [r5, #28]
 80050a8:	b920      	cbnz	r0, 80050b4 <_Bfree+0x20>
 80050aa:	218f      	movs	r1, #143	@ 0x8f
 80050ac:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <_Bfree+0x3c>)
 80050ae:	4809      	ldr	r0, [pc, #36]	@ (80050d4 <_Bfree+0x40>)
 80050b0:	f000 fd62 	bl	8005b78 <__assert_func>
 80050b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050b8:	6006      	str	r6, [r0, #0]
 80050ba:	60c6      	str	r6, [r0, #12]
 80050bc:	b13c      	cbz	r4, 80050ce <_Bfree+0x3a>
 80050be:	69eb      	ldr	r3, [r5, #28]
 80050c0:	6862      	ldr	r2, [r4, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050c8:	6021      	str	r1, [r4, #0]
 80050ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	080062f3 	.word	0x080062f3
 80050d4:	08006373 	.word	0x08006373

080050d8 <__multadd>:
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	4607      	mov	r7, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	461e      	mov	r6, r3
 80050e2:	2000      	movs	r0, #0
 80050e4:	690d      	ldr	r5, [r1, #16]
 80050e6:	f101 0c14 	add.w	ip, r1, #20
 80050ea:	f8dc 3000 	ldr.w	r3, [ip]
 80050ee:	3001      	adds	r0, #1
 80050f0:	b299      	uxth	r1, r3
 80050f2:	fb02 6101 	mla	r1, r2, r1, r6
 80050f6:	0c1e      	lsrs	r6, r3, #16
 80050f8:	0c0b      	lsrs	r3, r1, #16
 80050fa:	fb02 3306 	mla	r3, r2, r6, r3
 80050fe:	b289      	uxth	r1, r1
 8005100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005104:	4285      	cmp	r5, r0
 8005106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800510a:	f84c 1b04 	str.w	r1, [ip], #4
 800510e:	dcec      	bgt.n	80050ea <__multadd+0x12>
 8005110:	b30e      	cbz	r6, 8005156 <__multadd+0x7e>
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	42ab      	cmp	r3, r5
 8005116:	dc19      	bgt.n	800514c <__multadd+0x74>
 8005118:	6861      	ldr	r1, [r4, #4]
 800511a:	4638      	mov	r0, r7
 800511c:	3101      	adds	r1, #1
 800511e:	f7ff ff79 	bl	8005014 <_Balloc>
 8005122:	4680      	mov	r8, r0
 8005124:	b928      	cbnz	r0, 8005132 <__multadd+0x5a>
 8005126:	4602      	mov	r2, r0
 8005128:	21ba      	movs	r1, #186	@ 0xba
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <__multadd+0x84>)
 800512c:	480c      	ldr	r0, [pc, #48]	@ (8005160 <__multadd+0x88>)
 800512e:	f000 fd23 	bl	8005b78 <__assert_func>
 8005132:	6922      	ldr	r2, [r4, #16]
 8005134:	f104 010c 	add.w	r1, r4, #12
 8005138:	3202      	adds	r2, #2
 800513a:	0092      	lsls	r2, r2, #2
 800513c:	300c      	adds	r0, #12
 800513e:	f000 fd0d 	bl	8005b5c <memcpy>
 8005142:	4621      	mov	r1, r4
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff ffa5 	bl	8005094 <_Bfree>
 800514a:	4644      	mov	r4, r8
 800514c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005150:	3501      	adds	r5, #1
 8005152:	615e      	str	r6, [r3, #20]
 8005154:	6125      	str	r5, [r4, #16]
 8005156:	4620      	mov	r0, r4
 8005158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800515c:	08006362 	.word	0x08006362
 8005160:	08006373 	.word	0x08006373

08005164 <__hi0bits>:
 8005164:	4603      	mov	r3, r0
 8005166:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800516a:	bf3a      	itte	cc
 800516c:	0403      	lslcc	r3, r0, #16
 800516e:	2010      	movcc	r0, #16
 8005170:	2000      	movcs	r0, #0
 8005172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005176:	bf3c      	itt	cc
 8005178:	021b      	lslcc	r3, r3, #8
 800517a:	3008      	addcc	r0, #8
 800517c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005180:	bf3c      	itt	cc
 8005182:	011b      	lslcc	r3, r3, #4
 8005184:	3004      	addcc	r0, #4
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	bf3c      	itt	cc
 800518c:	009b      	lslcc	r3, r3, #2
 800518e:	3002      	addcc	r0, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	db05      	blt.n	80051a0 <__hi0bits+0x3c>
 8005194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005198:	f100 0001 	add.w	r0, r0, #1
 800519c:	bf08      	it	eq
 800519e:	2020      	moveq	r0, #32
 80051a0:	4770      	bx	lr

080051a2 <__lo0bits>:
 80051a2:	6803      	ldr	r3, [r0, #0]
 80051a4:	4602      	mov	r2, r0
 80051a6:	f013 0007 	ands.w	r0, r3, #7
 80051aa:	d00b      	beq.n	80051c4 <__lo0bits+0x22>
 80051ac:	07d9      	lsls	r1, r3, #31
 80051ae:	d421      	bmi.n	80051f4 <__lo0bits+0x52>
 80051b0:	0798      	lsls	r0, r3, #30
 80051b2:	bf49      	itett	mi
 80051b4:	085b      	lsrmi	r3, r3, #1
 80051b6:	089b      	lsrpl	r3, r3, #2
 80051b8:	2001      	movmi	r0, #1
 80051ba:	6013      	strmi	r3, [r2, #0]
 80051bc:	bf5c      	itt	pl
 80051be:	2002      	movpl	r0, #2
 80051c0:	6013      	strpl	r3, [r2, #0]
 80051c2:	4770      	bx	lr
 80051c4:	b299      	uxth	r1, r3
 80051c6:	b909      	cbnz	r1, 80051cc <__lo0bits+0x2a>
 80051c8:	2010      	movs	r0, #16
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	b2d9      	uxtb	r1, r3
 80051ce:	b909      	cbnz	r1, 80051d4 <__lo0bits+0x32>
 80051d0:	3008      	adds	r0, #8
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	0719      	lsls	r1, r3, #28
 80051d6:	bf04      	itt	eq
 80051d8:	091b      	lsreq	r3, r3, #4
 80051da:	3004      	addeq	r0, #4
 80051dc:	0799      	lsls	r1, r3, #30
 80051de:	bf04      	itt	eq
 80051e0:	089b      	lsreq	r3, r3, #2
 80051e2:	3002      	addeq	r0, #2
 80051e4:	07d9      	lsls	r1, r3, #31
 80051e6:	d403      	bmi.n	80051f0 <__lo0bits+0x4e>
 80051e8:	085b      	lsrs	r3, r3, #1
 80051ea:	f100 0001 	add.w	r0, r0, #1
 80051ee:	d003      	beq.n	80051f8 <__lo0bits+0x56>
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4770      	bx	lr
 80051f4:	2000      	movs	r0, #0
 80051f6:	4770      	bx	lr
 80051f8:	2020      	movs	r0, #32
 80051fa:	4770      	bx	lr

080051fc <__i2b>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	460c      	mov	r4, r1
 8005200:	2101      	movs	r1, #1
 8005202:	f7ff ff07 	bl	8005014 <_Balloc>
 8005206:	4602      	mov	r2, r0
 8005208:	b928      	cbnz	r0, 8005216 <__i2b+0x1a>
 800520a:	f240 1145 	movw	r1, #325	@ 0x145
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <__i2b+0x24>)
 8005210:	4804      	ldr	r0, [pc, #16]	@ (8005224 <__i2b+0x28>)
 8005212:	f000 fcb1 	bl	8005b78 <__assert_func>
 8005216:	2301      	movs	r3, #1
 8005218:	6144      	str	r4, [r0, #20]
 800521a:	6103      	str	r3, [r0, #16]
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08006362 	.word	0x08006362
 8005224:	08006373 	.word	0x08006373

08005228 <__multiply>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	4617      	mov	r7, r2
 800522e:	690a      	ldr	r2, [r1, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4689      	mov	r9, r1
 8005234:	429a      	cmp	r2, r3
 8005236:	bfa2      	ittt	ge
 8005238:	463b      	movge	r3, r7
 800523a:	460f      	movge	r7, r1
 800523c:	4699      	movge	r9, r3
 800523e:	693d      	ldr	r5, [r7, #16]
 8005240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	eb05 060a 	add.w	r6, r5, sl
 800524c:	42b3      	cmp	r3, r6
 800524e:	b085      	sub	sp, #20
 8005250:	bfb8      	it	lt
 8005252:	3101      	addlt	r1, #1
 8005254:	f7ff fede 	bl	8005014 <_Balloc>
 8005258:	b930      	cbnz	r0, 8005268 <__multiply+0x40>
 800525a:	4602      	mov	r2, r0
 800525c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005260:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <__multiply+0x13c>)
 8005262:	4841      	ldr	r0, [pc, #260]	@ (8005368 <__multiply+0x140>)
 8005264:	f000 fc88 	bl	8005b78 <__assert_func>
 8005268:	f100 0414 	add.w	r4, r0, #20
 800526c:	4623      	mov	r3, r4
 800526e:	2200      	movs	r2, #0
 8005270:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005274:	4573      	cmp	r3, lr
 8005276:	d320      	bcc.n	80052ba <__multiply+0x92>
 8005278:	f107 0814 	add.w	r8, r7, #20
 800527c:	f109 0114 	add.w	r1, r9, #20
 8005280:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005284:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	1beb      	subs	r3, r5, r7
 800528c:	3b15      	subs	r3, #21
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	3304      	adds	r3, #4
 8005294:	3715      	adds	r7, #21
 8005296:	42bd      	cmp	r5, r7
 8005298:	bf38      	it	cc
 800529a:	2304      	movcc	r3, #4
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	9103      	str	r1, [sp, #12]
 80052a2:	428b      	cmp	r3, r1
 80052a4:	d80c      	bhi.n	80052c0 <__multiply+0x98>
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	dd03      	ble.n	80052b2 <__multiply+0x8a>
 80052aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d055      	beq.n	800535e <__multiply+0x136>
 80052b2:	6106      	str	r6, [r0, #16]
 80052b4:	b005      	add	sp, #20
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	f843 2b04 	str.w	r2, [r3], #4
 80052be:	e7d9      	b.n	8005274 <__multiply+0x4c>
 80052c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80052c4:	f1ba 0f00 	cmp.w	sl, #0
 80052c8:	d01f      	beq.n	800530a <__multiply+0xe2>
 80052ca:	46c4      	mov	ip, r8
 80052cc:	46a1      	mov	r9, r4
 80052ce:	2700      	movs	r7, #0
 80052d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80052d4:	f8d9 3000 	ldr.w	r3, [r9]
 80052d8:	fa1f fb82 	uxth.w	fp, r2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	fb0a 330b 	mla	r3, sl, fp, r3
 80052e2:	443b      	add	r3, r7
 80052e4:	f8d9 7000 	ldr.w	r7, [r9]
 80052e8:	0c12      	lsrs	r2, r2, #16
 80052ea:	0c3f      	lsrs	r7, r7, #16
 80052ec:	fb0a 7202 	mla	r2, sl, r2, r7
 80052f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fa:	4565      	cmp	r5, ip
 80052fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005300:	f849 3b04 	str.w	r3, [r9], #4
 8005304:	d8e4      	bhi.n	80052d0 <__multiply+0xa8>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	50e7      	str	r7, [r4, r3]
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3104      	adds	r1, #4
 800530e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	d020      	beq.n	800535a <__multiply+0x132>
 8005318:	4647      	mov	r7, r8
 800531a:	46a4      	mov	ip, r4
 800531c:	f04f 0a00 	mov.w	sl, #0
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f8b7 b000 	ldrh.w	fp, [r7]
 8005326:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800532a:	b29b      	uxth	r3, r3
 800532c:	fb09 220b 	mla	r2, r9, fp, r2
 8005330:	4452      	add	r2, sl
 8005332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005336:	f84c 3b04 	str.w	r3, [ip], #4
 800533a:	f857 3b04 	ldr.w	r3, [r7], #4
 800533e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005342:	f8bc 3000 	ldrh.w	r3, [ip]
 8005346:	42bd      	cmp	r5, r7
 8005348:	fb09 330a 	mla	r3, r9, sl, r3
 800534c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005354:	d8e5      	bhi.n	8005322 <__multiply+0xfa>
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	50a3      	str	r3, [r4, r2]
 800535a:	3404      	adds	r4, #4
 800535c:	e79f      	b.n	800529e <__multiply+0x76>
 800535e:	3e01      	subs	r6, #1
 8005360:	e7a1      	b.n	80052a6 <__multiply+0x7e>
 8005362:	bf00      	nop
 8005364:	08006362 	.word	0x08006362
 8005368:	08006373 	.word	0x08006373

0800536c <__pow5mult>:
 800536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005370:	4615      	mov	r5, r2
 8005372:	f012 0203 	ands.w	r2, r2, #3
 8005376:	4607      	mov	r7, r0
 8005378:	460e      	mov	r6, r1
 800537a:	d007      	beq.n	800538c <__pow5mult+0x20>
 800537c:	4c25      	ldr	r4, [pc, #148]	@ (8005414 <__pow5mult+0xa8>)
 800537e:	3a01      	subs	r2, #1
 8005380:	2300      	movs	r3, #0
 8005382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005386:	f7ff fea7 	bl	80050d8 <__multadd>
 800538a:	4606      	mov	r6, r0
 800538c:	10ad      	asrs	r5, r5, #2
 800538e:	d03d      	beq.n	800540c <__pow5mult+0xa0>
 8005390:	69fc      	ldr	r4, [r7, #28]
 8005392:	b97c      	cbnz	r4, 80053b4 <__pow5mult+0x48>
 8005394:	2010      	movs	r0, #16
 8005396:	f7ff fd87 	bl	8004ea8 <malloc>
 800539a:	4602      	mov	r2, r0
 800539c:	61f8      	str	r0, [r7, #28]
 800539e:	b928      	cbnz	r0, 80053ac <__pow5mult+0x40>
 80053a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80053a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005418 <__pow5mult+0xac>)
 80053a6:	481d      	ldr	r0, [pc, #116]	@ (800541c <__pow5mult+0xb0>)
 80053a8:	f000 fbe6 	bl	8005b78 <__assert_func>
 80053ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053b0:	6004      	str	r4, [r0, #0]
 80053b2:	60c4      	str	r4, [r0, #12]
 80053b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80053b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053bc:	b94c      	cbnz	r4, 80053d2 <__pow5mult+0x66>
 80053be:	f240 2171 	movw	r1, #625	@ 0x271
 80053c2:	4638      	mov	r0, r7
 80053c4:	f7ff ff1a 	bl	80051fc <__i2b>
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80053d0:	6003      	str	r3, [r0, #0]
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	07eb      	lsls	r3, r5, #31
 80053d8:	d50a      	bpl.n	80053f0 <__pow5mult+0x84>
 80053da:	4631      	mov	r1, r6
 80053dc:	4622      	mov	r2, r4
 80053de:	4638      	mov	r0, r7
 80053e0:	f7ff ff22 	bl	8005228 <__multiply>
 80053e4:	4680      	mov	r8, r0
 80053e6:	4631      	mov	r1, r6
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff fe53 	bl	8005094 <_Bfree>
 80053ee:	4646      	mov	r6, r8
 80053f0:	106d      	asrs	r5, r5, #1
 80053f2:	d00b      	beq.n	800540c <__pow5mult+0xa0>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	b938      	cbnz	r0, 8005408 <__pow5mult+0x9c>
 80053f8:	4622      	mov	r2, r4
 80053fa:	4621      	mov	r1, r4
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ff13 	bl	8005228 <__multiply>
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	f8c0 9000 	str.w	r9, [r0]
 8005408:	4604      	mov	r4, r0
 800540a:	e7e4      	b.n	80053d6 <__pow5mult+0x6a>
 800540c:	4630      	mov	r0, r6
 800540e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005412:	bf00      	nop
 8005414:	08006424 	.word	0x08006424
 8005418:	080062f3 	.word	0x080062f3
 800541c:	08006373 	.word	0x08006373

08005420 <__lshift>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	460c      	mov	r4, r1
 8005426:	4607      	mov	r7, r0
 8005428:	4691      	mov	r9, r2
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6849      	ldr	r1, [r1, #4]
 800542e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005438:	f108 0601 	add.w	r6, r8, #1
 800543c:	42b3      	cmp	r3, r6
 800543e:	db0b      	blt.n	8005458 <__lshift+0x38>
 8005440:	4638      	mov	r0, r7
 8005442:	f7ff fde7 	bl	8005014 <_Balloc>
 8005446:	4605      	mov	r5, r0
 8005448:	b948      	cbnz	r0, 800545e <__lshift+0x3e>
 800544a:	4602      	mov	r2, r0
 800544c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005450:	4b27      	ldr	r3, [pc, #156]	@ (80054f0 <__lshift+0xd0>)
 8005452:	4828      	ldr	r0, [pc, #160]	@ (80054f4 <__lshift+0xd4>)
 8005454:	f000 fb90 	bl	8005b78 <__assert_func>
 8005458:	3101      	adds	r1, #1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	e7ee      	b.n	800543c <__lshift+0x1c>
 800545e:	2300      	movs	r3, #0
 8005460:	f100 0114 	add.w	r1, r0, #20
 8005464:	f100 0210 	add.w	r2, r0, #16
 8005468:	4618      	mov	r0, r3
 800546a:	4553      	cmp	r3, sl
 800546c:	db33      	blt.n	80054d6 <__lshift+0xb6>
 800546e:	6920      	ldr	r0, [r4, #16]
 8005470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005474:	f104 0314 	add.w	r3, r4, #20
 8005478:	f019 091f 	ands.w	r9, r9, #31
 800547c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005484:	d02b      	beq.n	80054de <__lshift+0xbe>
 8005486:	468a      	mov	sl, r1
 8005488:	2200      	movs	r2, #0
 800548a:	f1c9 0e20 	rsb	lr, r9, #32
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	fa00 f009 	lsl.w	r0, r0, r9
 8005494:	4310      	orrs	r0, r2
 8005496:	f84a 0b04 	str.w	r0, [sl], #4
 800549a:	f853 2b04 	ldr.w	r2, [r3], #4
 800549e:	459c      	cmp	ip, r3
 80054a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80054a4:	d8f3      	bhi.n	800548e <__lshift+0x6e>
 80054a6:	ebac 0304 	sub.w	r3, ip, r4
 80054aa:	3b15      	subs	r3, #21
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	3304      	adds	r3, #4
 80054b2:	f104 0015 	add.w	r0, r4, #21
 80054b6:	4560      	cmp	r0, ip
 80054b8:	bf88      	it	hi
 80054ba:	2304      	movhi	r3, #4
 80054bc:	50ca      	str	r2, [r1, r3]
 80054be:	b10a      	cbz	r2, 80054c4 <__lshift+0xa4>
 80054c0:	f108 0602 	add.w	r6, r8, #2
 80054c4:	3e01      	subs	r6, #1
 80054c6:	4638      	mov	r0, r7
 80054c8:	4621      	mov	r1, r4
 80054ca:	612e      	str	r6, [r5, #16]
 80054cc:	f7ff fde2 	bl	8005094 <_Bfree>
 80054d0:	4628      	mov	r0, r5
 80054d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80054da:	3301      	adds	r3, #1
 80054dc:	e7c5      	b.n	800546a <__lshift+0x4a>
 80054de:	3904      	subs	r1, #4
 80054e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e4:	459c      	cmp	ip, r3
 80054e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80054ea:	d8f9      	bhi.n	80054e0 <__lshift+0xc0>
 80054ec:	e7ea      	b.n	80054c4 <__lshift+0xa4>
 80054ee:	bf00      	nop
 80054f0:	08006362 	.word	0x08006362
 80054f4:	08006373 	.word	0x08006373

080054f8 <__mcmp>:
 80054f8:	4603      	mov	r3, r0
 80054fa:	690a      	ldr	r2, [r1, #16]
 80054fc:	6900      	ldr	r0, [r0, #16]
 80054fe:	b530      	push	{r4, r5, lr}
 8005500:	1a80      	subs	r0, r0, r2
 8005502:	d10e      	bne.n	8005522 <__mcmp+0x2a>
 8005504:	3314      	adds	r3, #20
 8005506:	3114      	adds	r1, #20
 8005508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800550c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005518:	4295      	cmp	r5, r2
 800551a:	d003      	beq.n	8005524 <__mcmp+0x2c>
 800551c:	d205      	bcs.n	800552a <__mcmp+0x32>
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	bd30      	pop	{r4, r5, pc}
 8005524:	42a3      	cmp	r3, r4
 8005526:	d3f3      	bcc.n	8005510 <__mcmp+0x18>
 8005528:	e7fb      	b.n	8005522 <__mcmp+0x2a>
 800552a:	2001      	movs	r0, #1
 800552c:	e7f9      	b.n	8005522 <__mcmp+0x2a>
	...

08005530 <__mdiff>:
 8005530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4689      	mov	r9, r1
 8005536:	4606      	mov	r6, r0
 8005538:	4611      	mov	r1, r2
 800553a:	4648      	mov	r0, r9
 800553c:	4614      	mov	r4, r2
 800553e:	f7ff ffdb 	bl	80054f8 <__mcmp>
 8005542:	1e05      	subs	r5, r0, #0
 8005544:	d112      	bne.n	800556c <__mdiff+0x3c>
 8005546:	4629      	mov	r1, r5
 8005548:	4630      	mov	r0, r6
 800554a:	f7ff fd63 	bl	8005014 <_Balloc>
 800554e:	4602      	mov	r2, r0
 8005550:	b928      	cbnz	r0, 800555e <__mdiff+0x2e>
 8005552:	f240 2137 	movw	r1, #567	@ 0x237
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <__mdiff+0x120>)
 8005558:	483e      	ldr	r0, [pc, #248]	@ (8005654 <__mdiff+0x124>)
 800555a:	f000 fb0d 	bl	8005b78 <__assert_func>
 800555e:	2301      	movs	r3, #1
 8005560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005564:	4610      	mov	r0, r2
 8005566:	b003      	add	sp, #12
 8005568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556c:	bfbc      	itt	lt
 800556e:	464b      	movlt	r3, r9
 8005570:	46a1      	movlt	r9, r4
 8005572:	4630      	mov	r0, r6
 8005574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005578:	bfba      	itte	lt
 800557a:	461c      	movlt	r4, r3
 800557c:	2501      	movlt	r5, #1
 800557e:	2500      	movge	r5, #0
 8005580:	f7ff fd48 	bl	8005014 <_Balloc>
 8005584:	4602      	mov	r2, r0
 8005586:	b918      	cbnz	r0, 8005590 <__mdiff+0x60>
 8005588:	f240 2145 	movw	r1, #581	@ 0x245
 800558c:	4b30      	ldr	r3, [pc, #192]	@ (8005650 <__mdiff+0x120>)
 800558e:	e7e3      	b.n	8005558 <__mdiff+0x28>
 8005590:	f100 0b14 	add.w	fp, r0, #20
 8005594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005598:	f109 0310 	add.w	r3, r9, #16
 800559c:	60c5      	str	r5, [r0, #12]
 800559e:	f04f 0c00 	mov.w	ip, #0
 80055a2:	f109 0514 	add.w	r5, r9, #20
 80055a6:	46d9      	mov	r9, fp
 80055a8:	6926      	ldr	r6, [r4, #16]
 80055aa:	f104 0e14 	add.w	lr, r4, #20
 80055ae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80055b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	9b01      	ldr	r3, [sp, #4]
 80055ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80055be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80055c2:	b281      	uxth	r1, r0
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	fa1f f38a 	uxth.w	r3, sl
 80055ca:	1a5b      	subs	r3, r3, r1
 80055cc:	0c00      	lsrs	r0, r0, #16
 80055ce:	4463      	add	r3, ip
 80055d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80055d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80055d8:	b29b      	uxth	r3, r3
 80055da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80055de:	4576      	cmp	r6, lr
 80055e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055e4:	f849 3b04 	str.w	r3, [r9], #4
 80055e8:	d8e6      	bhi.n	80055b8 <__mdiff+0x88>
 80055ea:	1b33      	subs	r3, r6, r4
 80055ec:	3b15      	subs	r3, #21
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	3415      	adds	r4, #21
 80055f4:	3304      	adds	r3, #4
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	bf38      	it	cc
 80055fa:	2304      	movcc	r3, #4
 80055fc:	441d      	add	r5, r3
 80055fe:	445b      	add	r3, fp
 8005600:	461e      	mov	r6, r3
 8005602:	462c      	mov	r4, r5
 8005604:	4544      	cmp	r4, r8
 8005606:	d30e      	bcc.n	8005626 <__mdiff+0xf6>
 8005608:	f108 0103 	add.w	r1, r8, #3
 800560c:	1b49      	subs	r1, r1, r5
 800560e:	f021 0103 	bic.w	r1, r1, #3
 8005612:	3d03      	subs	r5, #3
 8005614:	45a8      	cmp	r8, r5
 8005616:	bf38      	it	cc
 8005618:	2100      	movcc	r1, #0
 800561a:	440b      	add	r3, r1
 800561c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005620:	b199      	cbz	r1, 800564a <__mdiff+0x11a>
 8005622:	6117      	str	r7, [r2, #16]
 8005624:	e79e      	b.n	8005564 <__mdiff+0x34>
 8005626:	46e6      	mov	lr, ip
 8005628:	f854 1b04 	ldr.w	r1, [r4], #4
 800562c:	fa1f fc81 	uxth.w	ip, r1
 8005630:	44f4      	add	ip, lr
 8005632:	0c08      	lsrs	r0, r1, #16
 8005634:	4471      	add	r1, lr
 8005636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800563a:	b289      	uxth	r1, r1
 800563c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005640:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005644:	f846 1b04 	str.w	r1, [r6], #4
 8005648:	e7dc      	b.n	8005604 <__mdiff+0xd4>
 800564a:	3f01      	subs	r7, #1
 800564c:	e7e6      	b.n	800561c <__mdiff+0xec>
 800564e:	bf00      	nop
 8005650:	08006362 	.word	0x08006362
 8005654:	08006373 	.word	0x08006373

08005658 <__d2b>:
 8005658:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800565c:	2101      	movs	r1, #1
 800565e:	4690      	mov	r8, r2
 8005660:	4699      	mov	r9, r3
 8005662:	9e08      	ldr	r6, [sp, #32]
 8005664:	f7ff fcd6 	bl	8005014 <_Balloc>
 8005668:	4604      	mov	r4, r0
 800566a:	b930      	cbnz	r0, 800567a <__d2b+0x22>
 800566c:	4602      	mov	r2, r0
 800566e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005672:	4b23      	ldr	r3, [pc, #140]	@ (8005700 <__d2b+0xa8>)
 8005674:	4823      	ldr	r0, [pc, #140]	@ (8005704 <__d2b+0xac>)
 8005676:	f000 fa7f 	bl	8005b78 <__assert_func>
 800567a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800567e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005682:	b10d      	cbz	r5, 8005688 <__d2b+0x30>
 8005684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	f1b8 0300 	subs.w	r3, r8, #0
 800568e:	d024      	beq.n	80056da <__d2b+0x82>
 8005690:	4668      	mov	r0, sp
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	f7ff fd85 	bl	80051a2 <__lo0bits>
 8005698:	e9dd 1200 	ldrd	r1, r2, [sp]
 800569c:	b1d8      	cbz	r0, 80056d6 <__d2b+0x7e>
 800569e:	f1c0 0320 	rsb	r3, r0, #32
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	430b      	orrs	r3, r1
 80056a8:	40c2      	lsrs	r2, r0
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	9201      	str	r2, [sp, #4]
 80056ae:	9b01      	ldr	r3, [sp, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2201      	moveq	r2, #1
 80056b6:	2202      	movne	r2, #2
 80056b8:	61a3      	str	r3, [r4, #24]
 80056ba:	6122      	str	r2, [r4, #16]
 80056bc:	b1ad      	cbz	r5, 80056ea <__d2b+0x92>
 80056be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80056c2:	4405      	add	r5, r0
 80056c4:	6035      	str	r5, [r6, #0]
 80056c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80056ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056cc:	6018      	str	r0, [r3, #0]
 80056ce:	4620      	mov	r0, r4
 80056d0:	b002      	add	sp, #8
 80056d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80056d6:	6161      	str	r1, [r4, #20]
 80056d8:	e7e9      	b.n	80056ae <__d2b+0x56>
 80056da:	a801      	add	r0, sp, #4
 80056dc:	f7ff fd61 	bl	80051a2 <__lo0bits>
 80056e0:	9b01      	ldr	r3, [sp, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	6163      	str	r3, [r4, #20]
 80056e6:	3020      	adds	r0, #32
 80056e8:	e7e7      	b.n	80056ba <__d2b+0x62>
 80056ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80056ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80056f2:	6030      	str	r0, [r6, #0]
 80056f4:	6918      	ldr	r0, [r3, #16]
 80056f6:	f7ff fd35 	bl	8005164 <__hi0bits>
 80056fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80056fe:	e7e4      	b.n	80056ca <__d2b+0x72>
 8005700:	08006362 	.word	0x08006362
 8005704:	08006373 	.word	0x08006373

08005708 <__ssputs_r>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	461f      	mov	r7, r3
 800570e:	688e      	ldr	r6, [r1, #8]
 8005710:	4682      	mov	sl, r0
 8005712:	42be      	cmp	r6, r7
 8005714:	460c      	mov	r4, r1
 8005716:	4690      	mov	r8, r2
 8005718:	680b      	ldr	r3, [r1, #0]
 800571a:	d82d      	bhi.n	8005778 <__ssputs_r+0x70>
 800571c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005724:	d026      	beq.n	8005774 <__ssputs_r+0x6c>
 8005726:	6965      	ldr	r5, [r4, #20]
 8005728:	6909      	ldr	r1, [r1, #16]
 800572a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800572e:	eba3 0901 	sub.w	r9, r3, r1
 8005732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005736:	1c7b      	adds	r3, r7, #1
 8005738:	444b      	add	r3, r9
 800573a:	106d      	asrs	r5, r5, #1
 800573c:	429d      	cmp	r5, r3
 800573e:	bf38      	it	cc
 8005740:	461d      	movcc	r5, r3
 8005742:	0553      	lsls	r3, r2, #21
 8005744:	d527      	bpl.n	8005796 <__ssputs_r+0x8e>
 8005746:	4629      	mov	r1, r5
 8005748:	f7ff fbd8 	bl	8004efc <_malloc_r>
 800574c:	4606      	mov	r6, r0
 800574e:	b360      	cbz	r0, 80057aa <__ssputs_r+0xa2>
 8005750:	464a      	mov	r2, r9
 8005752:	6921      	ldr	r1, [r4, #16]
 8005754:	f000 fa02 	bl	8005b5c <memcpy>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800575e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	6126      	str	r6, [r4, #16]
 8005766:	444e      	add	r6, r9
 8005768:	6026      	str	r6, [r4, #0]
 800576a:	463e      	mov	r6, r7
 800576c:	6165      	str	r5, [r4, #20]
 800576e:	eba5 0509 	sub.w	r5, r5, r9
 8005772:	60a5      	str	r5, [r4, #8]
 8005774:	42be      	cmp	r6, r7
 8005776:	d900      	bls.n	800577a <__ssputs_r+0x72>
 8005778:	463e      	mov	r6, r7
 800577a:	4632      	mov	r2, r6
 800577c:	4641      	mov	r1, r8
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	f000 f9c2 	bl	8005b08 <memmove>
 8005784:	2000      	movs	r0, #0
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	1b9b      	subs	r3, r3, r6
 800578a:	60a3      	str	r3, [r4, #8]
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	4433      	add	r3, r6
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005796:	462a      	mov	r2, r5
 8005798:	f000 fa32 	bl	8005c00 <_realloc_r>
 800579c:	4606      	mov	r6, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d1e0      	bne.n	8005764 <__ssputs_r+0x5c>
 80057a2:	4650      	mov	r0, sl
 80057a4:	6921      	ldr	r1, [r4, #16]
 80057a6:	f7ff fb37 	bl	8004e18 <_free_r>
 80057aa:	230c      	movs	r3, #12
 80057ac:	f8ca 3000 	str.w	r3, [sl]
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295
 80057b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ba:	81a3      	strh	r3, [r4, #12]
 80057bc:	e7e9      	b.n	8005792 <__ssputs_r+0x8a>
	...

080057c0 <_svfiprintf_r>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	4698      	mov	r8, r3
 80057c6:	898b      	ldrh	r3, [r1, #12]
 80057c8:	4607      	mov	r7, r0
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	460d      	mov	r5, r1
 80057ce:	4614      	mov	r4, r2
 80057d0:	b09d      	sub	sp, #116	@ 0x74
 80057d2:	d510      	bpl.n	80057f6 <_svfiprintf_r+0x36>
 80057d4:	690b      	ldr	r3, [r1, #16]
 80057d6:	b973      	cbnz	r3, 80057f6 <_svfiprintf_r+0x36>
 80057d8:	2140      	movs	r1, #64	@ 0x40
 80057da:	f7ff fb8f 	bl	8004efc <_malloc_r>
 80057de:	6028      	str	r0, [r5, #0]
 80057e0:	6128      	str	r0, [r5, #16]
 80057e2:	b930      	cbnz	r0, 80057f2 <_svfiprintf_r+0x32>
 80057e4:	230c      	movs	r3, #12
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	b01d      	add	sp, #116	@ 0x74
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	2340      	movs	r3, #64	@ 0x40
 80057f4:	616b      	str	r3, [r5, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057fa:	2320      	movs	r3, #32
 80057fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005800:	2330      	movs	r3, #48	@ 0x30
 8005802:	f04f 0901 	mov.w	r9, #1
 8005806:	f8cd 800c 	str.w	r8, [sp, #12]
 800580a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80059a4 <_svfiprintf_r+0x1e4>
 800580e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005812:	4623      	mov	r3, r4
 8005814:	469a      	mov	sl, r3
 8005816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581a:	b10a      	cbz	r2, 8005820 <_svfiprintf_r+0x60>
 800581c:	2a25      	cmp	r2, #37	@ 0x25
 800581e:	d1f9      	bne.n	8005814 <_svfiprintf_r+0x54>
 8005820:	ebba 0b04 	subs.w	fp, sl, r4
 8005824:	d00b      	beq.n	800583e <_svfiprintf_r+0x7e>
 8005826:	465b      	mov	r3, fp
 8005828:	4622      	mov	r2, r4
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff6b 	bl	8005708 <__ssputs_r>
 8005832:	3001      	adds	r0, #1
 8005834:	f000 80a7 	beq.w	8005986 <_svfiprintf_r+0x1c6>
 8005838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800583a:	445a      	add	r2, fp
 800583c:	9209      	str	r2, [sp, #36]	@ 0x24
 800583e:	f89a 3000 	ldrb.w	r3, [sl]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 809f 	beq.w	8005986 <_svfiprintf_r+0x1c6>
 8005848:	2300      	movs	r3, #0
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005852:	f10a 0a01 	add.w	sl, sl, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800585e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005860:	4654      	mov	r4, sl
 8005862:	2205      	movs	r2, #5
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	484e      	ldr	r0, [pc, #312]	@ (80059a4 <_svfiprintf_r+0x1e4>)
 800586a:	f7fe fc68 	bl	800413e <memchr>
 800586e:	9a04      	ldr	r2, [sp, #16]
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfiprintf_r+0xea>
 8005872:	06d0      	lsls	r0, r2, #27
 8005874:	bf44      	itt	mi
 8005876:	2320      	movmi	r3, #32
 8005878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587c:	0711      	lsls	r1, r2, #28
 800587e:	bf44      	itt	mi
 8005880:	232b      	movmi	r3, #43	@ 0x2b
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005886:	f89a 3000 	ldrb.w	r3, [sl]
 800588a:	2b2a      	cmp	r3, #42	@ 0x2a
 800588c:	d015      	beq.n	80058ba <_svfiprintf_r+0xfa>
 800588e:	4654      	mov	r4, sl
 8005890:	2000      	movs	r0, #0
 8005892:	f04f 0c0a 	mov.w	ip, #10
 8005896:	9a07      	ldr	r2, [sp, #28]
 8005898:	4621      	mov	r1, r4
 800589a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589e:	3b30      	subs	r3, #48	@ 0x30
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d94b      	bls.n	800593c <_svfiprintf_r+0x17c>
 80058a4:	b1b0      	cbz	r0, 80058d4 <_svfiprintf_r+0x114>
 80058a6:	9207      	str	r2, [sp, #28]
 80058a8:	e014      	b.n	80058d4 <_svfiprintf_r+0x114>
 80058aa:	eba0 0308 	sub.w	r3, r0, r8
 80058ae:	fa09 f303 	lsl.w	r3, r9, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	46a2      	mov	sl, r4
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	e7d2      	b.n	8005860 <_svfiprintf_r+0xa0>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9103      	str	r1, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbb      	ittet	lt
 80058c6:	425b      	neglt	r3, r3
 80058c8:	f042 0202 	orrlt.w	r2, r2, #2
 80058cc:	9307      	strge	r3, [sp, #28]
 80058ce:	9307      	strlt	r3, [sp, #28]
 80058d0:	bfb8      	it	lt
 80058d2:	9204      	strlt	r2, [sp, #16]
 80058d4:	7823      	ldrb	r3, [r4, #0]
 80058d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80058d8:	d10a      	bne.n	80058f0 <_svfiprintf_r+0x130>
 80058da:	7863      	ldrb	r3, [r4, #1]
 80058dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80058de:	d132      	bne.n	8005946 <_svfiprintf_r+0x186>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	3402      	adds	r4, #2
 80058e4:	1d1a      	adds	r2, r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	9203      	str	r2, [sp, #12]
 80058ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058ee:	9305      	str	r3, [sp, #20]
 80058f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80059a8 <_svfiprintf_r+0x1e8>
 80058f4:	2203      	movs	r2, #3
 80058f6:	4650      	mov	r0, sl
 80058f8:	7821      	ldrb	r1, [r4, #0]
 80058fa:	f7fe fc20 	bl	800413e <memchr>
 80058fe:	b138      	cbz	r0, 8005910 <_svfiprintf_r+0x150>
 8005900:	2240      	movs	r2, #64	@ 0x40
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	eba0 000a 	sub.w	r0, r0, sl
 8005908:	4082      	lsls	r2, r0
 800590a:	4313      	orrs	r3, r2
 800590c:	3401      	adds	r4, #1
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005914:	2206      	movs	r2, #6
 8005916:	4825      	ldr	r0, [pc, #148]	@ (80059ac <_svfiprintf_r+0x1ec>)
 8005918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800591c:	f7fe fc0f 	bl	800413e <memchr>
 8005920:	2800      	cmp	r0, #0
 8005922:	d036      	beq.n	8005992 <_svfiprintf_r+0x1d2>
 8005924:	4b22      	ldr	r3, [pc, #136]	@ (80059b0 <_svfiprintf_r+0x1f0>)
 8005926:	bb1b      	cbnz	r3, 8005970 <_svfiprintf_r+0x1b0>
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	3307      	adds	r3, #7
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005936:	4433      	add	r3, r6
 8005938:	9309      	str	r3, [sp, #36]	@ 0x24
 800593a:	e76a      	b.n	8005812 <_svfiprintf_r+0x52>
 800593c:	460c      	mov	r4, r1
 800593e:	2001      	movs	r0, #1
 8005940:	fb0c 3202 	mla	r2, ip, r2, r3
 8005944:	e7a8      	b.n	8005898 <_svfiprintf_r+0xd8>
 8005946:	2300      	movs	r3, #0
 8005948:	f04f 0c0a 	mov.w	ip, #10
 800594c:	4619      	mov	r1, r3
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4620      	mov	r0, r4
 8005954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005958:	3a30      	subs	r2, #48	@ 0x30
 800595a:	2a09      	cmp	r2, #9
 800595c:	d903      	bls.n	8005966 <_svfiprintf_r+0x1a6>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c6      	beq.n	80058f0 <_svfiprintf_r+0x130>
 8005962:	9105      	str	r1, [sp, #20]
 8005964:	e7c4      	b.n	80058f0 <_svfiprintf_r+0x130>
 8005966:	4604      	mov	r4, r0
 8005968:	2301      	movs	r3, #1
 800596a:	fb0c 2101 	mla	r1, ip, r1, r2
 800596e:	e7f0      	b.n	8005952 <_svfiprintf_r+0x192>
 8005970:	ab03      	add	r3, sp, #12
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	462a      	mov	r2, r5
 8005976:	4638      	mov	r0, r7
 8005978:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <_svfiprintf_r+0x1f4>)
 800597a:	a904      	add	r1, sp, #16
 800597c:	f7fd fe46 	bl	800360c <_printf_float>
 8005980:	1c42      	adds	r2, r0, #1
 8005982:	4606      	mov	r6, r0
 8005984:	d1d6      	bne.n	8005934 <_svfiprintf_r+0x174>
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	065b      	lsls	r3, r3, #25
 800598a:	f53f af2d 	bmi.w	80057e8 <_svfiprintf_r+0x28>
 800598e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005990:	e72c      	b.n	80057ec <_svfiprintf_r+0x2c>
 8005992:	ab03      	add	r3, sp, #12
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	462a      	mov	r2, r5
 8005998:	4638      	mov	r0, r7
 800599a:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <_svfiprintf_r+0x1f4>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	f7fe f8d3 	bl	8003b48 <_printf_i>
 80059a2:	e7ed      	b.n	8005980 <_svfiprintf_r+0x1c0>
 80059a4:	080063cc 	.word	0x080063cc
 80059a8:	080063d2 	.word	0x080063d2
 80059ac:	080063d6 	.word	0x080063d6
 80059b0:	0800360d 	.word	0x0800360d
 80059b4:	08005709 	.word	0x08005709

080059b8 <__sflush_r>:
 80059b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	0716      	lsls	r6, r2, #28
 80059c0:	4605      	mov	r5, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	d454      	bmi.n	8005a70 <__sflush_r+0xb8>
 80059c6:	684b      	ldr	r3, [r1, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dc02      	bgt.n	80059d2 <__sflush_r+0x1a>
 80059cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dd48      	ble.n	8005a64 <__sflush_r+0xac>
 80059d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d045      	beq.n	8005a64 <__sflush_r+0xac>
 80059d8:	2300      	movs	r3, #0
 80059da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059de:	682f      	ldr	r7, [r5, #0]
 80059e0:	6a21      	ldr	r1, [r4, #32]
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	d030      	beq.n	8005a48 <__sflush_r+0x90>
 80059e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	0759      	lsls	r1, r3, #29
 80059ec:	d505      	bpl.n	80059fa <__sflush_r+0x42>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	1ad2      	subs	r2, r2, r3
 80059f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059f4:	b10b      	cbz	r3, 80059fa <__sflush_r+0x42>
 80059f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	4628      	mov	r0, r5
 80059fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a00:	6a21      	ldr	r1, [r4, #32]
 8005a02:	47b0      	blx	r6
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	d106      	bne.n	8005a18 <__sflush_r+0x60>
 8005a0a:	6829      	ldr	r1, [r5, #0]
 8005a0c:	291d      	cmp	r1, #29
 8005a0e:	d82b      	bhi.n	8005a68 <__sflush_r+0xb0>
 8005a10:	4a28      	ldr	r2, [pc, #160]	@ (8005ab4 <__sflush_r+0xfc>)
 8005a12:	40ca      	lsrs	r2, r1
 8005a14:	07d6      	lsls	r6, r2, #31
 8005a16:	d527      	bpl.n	8005a68 <__sflush_r+0xb0>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	6062      	str	r2, [r4, #4]
 8005a1c:	6922      	ldr	r2, [r4, #16]
 8005a1e:	04d9      	lsls	r1, r3, #19
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	d504      	bpl.n	8005a2e <__sflush_r+0x76>
 8005a24:	1c42      	adds	r2, r0, #1
 8005a26:	d101      	bne.n	8005a2c <__sflush_r+0x74>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b903      	cbnz	r3, 8005a2e <__sflush_r+0x76>
 8005a2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a30:	602f      	str	r7, [r5, #0]
 8005a32:	b1b9      	cbz	r1, 8005a64 <__sflush_r+0xac>
 8005a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d002      	beq.n	8005a42 <__sflush_r+0x8a>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f7ff f9eb 	bl	8004e18 <_free_r>
 8005a42:	2300      	movs	r3, #0
 8005a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a46:	e00d      	b.n	8005a64 <__sflush_r+0xac>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b0      	blx	r6
 8005a4e:	4602      	mov	r2, r0
 8005a50:	1c50      	adds	r0, r2, #1
 8005a52:	d1c9      	bne.n	80059e8 <__sflush_r+0x30>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0c6      	beq.n	80059e8 <__sflush_r+0x30>
 8005a5a:	2b1d      	cmp	r3, #29
 8005a5c:	d001      	beq.n	8005a62 <__sflush_r+0xaa>
 8005a5e:	2b16      	cmp	r3, #22
 8005a60:	d11d      	bne.n	8005a9e <__sflush_r+0xe6>
 8005a62:	602f      	str	r7, [r5, #0]
 8005a64:	2000      	movs	r0, #0
 8005a66:	e021      	b.n	8005aac <__sflush_r+0xf4>
 8005a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6c:	b21b      	sxth	r3, r3
 8005a6e:	e01a      	b.n	8005aa6 <__sflush_r+0xee>
 8005a70:	690f      	ldr	r7, [r1, #16]
 8005a72:	2f00      	cmp	r7, #0
 8005a74:	d0f6      	beq.n	8005a64 <__sflush_r+0xac>
 8005a76:	0793      	lsls	r3, r2, #30
 8005a78:	bf18      	it	ne
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	680e      	ldr	r6, [r1, #0]
 8005a7e:	bf08      	it	eq
 8005a80:	694b      	ldreq	r3, [r1, #20]
 8005a82:	1bf6      	subs	r6, r6, r7
 8005a84:	600f      	str	r7, [r1, #0]
 8005a86:	608b      	str	r3, [r1, #8]
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	ddeb      	ble.n	8005a64 <__sflush_r+0xac>
 8005a8c:	4633      	mov	r3, r6
 8005a8e:	463a      	mov	r2, r7
 8005a90:	4628      	mov	r0, r5
 8005a92:	6a21      	ldr	r1, [r4, #32]
 8005a94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005a98:	47e0      	blx	ip
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	dc07      	bgt.n	8005aae <__sflush_r+0xf6>
 8005a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aae:	4407      	add	r7, r0
 8005ab0:	1a36      	subs	r6, r6, r0
 8005ab2:	e7e9      	b.n	8005a88 <__sflush_r+0xd0>
 8005ab4:	20400001 	.word	0x20400001

08005ab8 <_fflush_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	b913      	cbnz	r3, 8005ac8 <_fflush_r+0x10>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	b118      	cbz	r0, 8005ad2 <_fflush_r+0x1a>
 8005aca:	6a03      	ldr	r3, [r0, #32]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <_fflush_r+0x1a>
 8005ace:	f7fe f9e5 	bl	8003e9c <__sinit>
 8005ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f3      	beq.n	8005ac2 <_fflush_r+0xa>
 8005ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005adc:	07d0      	lsls	r0, r2, #31
 8005ade:	d404      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae0:	0599      	lsls	r1, r3, #22
 8005ae2:	d402      	bmi.n	8005aea <_fflush_r+0x32>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ae6:	f7fe fb28 	bl	800413a <__retarget_lock_acquire_recursive>
 8005aea:	4628      	mov	r0, r5
 8005aec:	4621      	mov	r1, r4
 8005aee:	f7ff ff63 	bl	80059b8 <__sflush_r>
 8005af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af4:	4605      	mov	r5, r0
 8005af6:	07da      	lsls	r2, r3, #31
 8005af8:	d4e4      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	059b      	lsls	r3, r3, #22
 8005afe:	d4e1      	bmi.n	8005ac4 <_fflush_r+0xc>
 8005b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b02:	f7fe fb1b 	bl	800413c <__retarget_lock_release_recursive>
 8005b06:	e7dd      	b.n	8005ac4 <_fflush_r+0xc>

08005b08 <memmove>:
 8005b08:	4288      	cmp	r0, r1
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	eb01 0402 	add.w	r4, r1, r2
 8005b10:	d902      	bls.n	8005b18 <memmove+0x10>
 8005b12:	4284      	cmp	r4, r0
 8005b14:	4623      	mov	r3, r4
 8005b16:	d807      	bhi.n	8005b28 <memmove+0x20>
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	42a1      	cmp	r1, r4
 8005b1c:	d008      	beq.n	8005b30 <memmove+0x28>
 8005b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b26:	e7f8      	b.n	8005b1a <memmove+0x12>
 8005b28:	4601      	mov	r1, r0
 8005b2a:	4402      	add	r2, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	d100      	bne.n	8005b32 <memmove+0x2a>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3a:	e7f7      	b.n	8005b2c <memmove+0x24>

08005b3c <_sbrk_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	@ (8005b58 <_sbrk_r+0x1c>)
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fb fdea 	bl	8001720 <_sbrk>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_sbrk_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_sbrk_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	200003b0 	.word	0x200003b0

08005b5c <memcpy>:
 8005b5c:	440a      	add	r2, r1
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b64:	d100      	bne.n	8005b68 <memcpy+0xc>
 8005b66:	4770      	bx	lr
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6e:	4291      	cmp	r1, r2
 8005b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b74:	d1f9      	bne.n	8005b6a <memcpy+0xe>
 8005b76:	bd10      	pop	{r4, pc}

08005b78 <__assert_func>:
 8005b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <__assert_func+0x2c>)
 8005b80:	4605      	mov	r5, r0
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68d8      	ldr	r0, [r3, #12]
 8005b86:	b14c      	cbz	r4, 8005b9c <__assert_func+0x24>
 8005b88:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <__assert_func+0x30>)
 8005b8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b8e:	9100      	str	r1, [sp, #0]
 8005b90:	462b      	mov	r3, r5
 8005b92:	4906      	ldr	r1, [pc, #24]	@ (8005bac <__assert_func+0x34>)
 8005b94:	f000 f870 	bl	8005c78 <fiprintf>
 8005b98:	f000 f880 	bl	8005c9c <abort>
 8005b9c:	4b04      	ldr	r3, [pc, #16]	@ (8005bb0 <__assert_func+0x38>)
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	e7f3      	b.n	8005b8a <__assert_func+0x12>
 8005ba2:	bf00      	nop
 8005ba4:	20000018 	.word	0x20000018
 8005ba8:	080063e7 	.word	0x080063e7
 8005bac:	080063f4 	.word	0x080063f4
 8005bb0:	08006422 	.word	0x08006422

08005bb4 <_calloc_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	fba1 5402 	umull	r5, r4, r1, r2
 8005bba:	b934      	cbnz	r4, 8005bca <_calloc_r+0x16>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	f7ff f99d 	bl	8004efc <_malloc_r>
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	b928      	cbnz	r0, 8005bd2 <_calloc_r+0x1e>
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
 8005bca:	220c      	movs	r2, #12
 8005bcc:	2600      	movs	r6, #0
 8005bce:	6002      	str	r2, [r0, #0]
 8005bd0:	e7f9      	b.n	8005bc6 <_calloc_r+0x12>
 8005bd2:	462a      	mov	r2, r5
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	f7fe fa32 	bl	800403e <memset>
 8005bda:	e7f4      	b.n	8005bc6 <_calloc_r+0x12>

08005bdc <__ascii_mbtowc>:
 8005bdc:	b082      	sub	sp, #8
 8005bde:	b901      	cbnz	r1, 8005be2 <__ascii_mbtowc+0x6>
 8005be0:	a901      	add	r1, sp, #4
 8005be2:	b142      	cbz	r2, 8005bf6 <__ascii_mbtowc+0x1a>
 8005be4:	b14b      	cbz	r3, 8005bfa <__ascii_mbtowc+0x1e>
 8005be6:	7813      	ldrb	r3, [r2, #0]
 8005be8:	600b      	str	r3, [r1, #0]
 8005bea:	7812      	ldrb	r2, [r2, #0]
 8005bec:	1e10      	subs	r0, r2, #0
 8005bee:	bf18      	it	ne
 8005bf0:	2001      	movne	r0, #1
 8005bf2:	b002      	add	sp, #8
 8005bf4:	4770      	bx	lr
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	e7fb      	b.n	8005bf2 <__ascii_mbtowc+0x16>
 8005bfa:	f06f 0001 	mvn.w	r0, #1
 8005bfe:	e7f8      	b.n	8005bf2 <__ascii_mbtowc+0x16>

08005c00 <_realloc_r>:
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4607      	mov	r7, r0
 8005c06:	4614      	mov	r4, r2
 8005c08:	460d      	mov	r5, r1
 8005c0a:	b921      	cbnz	r1, 8005c16 <_realloc_r+0x16>
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	f7ff b973 	b.w	8004efc <_malloc_r>
 8005c16:	b92a      	cbnz	r2, 8005c24 <_realloc_r+0x24>
 8005c18:	f7ff f8fe 	bl	8004e18 <_free_r>
 8005c1c:	4625      	mov	r5, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c24:	f000 f841 	bl	8005caa <_malloc_usable_size_r>
 8005c28:	4284      	cmp	r4, r0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	d802      	bhi.n	8005c34 <_realloc_r+0x34>
 8005c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c32:	d8f4      	bhi.n	8005c1e <_realloc_r+0x1e>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7ff f960 	bl	8004efc <_malloc_r>
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	b908      	cbnz	r0, 8005c44 <_realloc_r+0x44>
 8005c40:	4645      	mov	r5, r8
 8005c42:	e7ec      	b.n	8005c1e <_realloc_r+0x1e>
 8005c44:	42b4      	cmp	r4, r6
 8005c46:	4622      	mov	r2, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	bf28      	it	cs
 8005c4c:	4632      	movcs	r2, r6
 8005c4e:	f7ff ff85 	bl	8005b5c <memcpy>
 8005c52:	4629      	mov	r1, r5
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff f8df 	bl	8004e18 <_free_r>
 8005c5a:	e7f1      	b.n	8005c40 <_realloc_r+0x40>

08005c5c <__ascii_wctomb>:
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	b141      	cbz	r1, 8005c74 <__ascii_wctomb+0x18>
 8005c62:	2aff      	cmp	r2, #255	@ 0xff
 8005c64:	d904      	bls.n	8005c70 <__ascii_wctomb+0x14>
 8005c66:	228a      	movs	r2, #138	@ 0x8a
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	4770      	bx	lr
 8005c70:	2001      	movs	r0, #1
 8005c72:	700a      	strb	r2, [r1, #0]
 8005c74:	4770      	bx	lr
	...

08005c78 <fiprintf>:
 8005c78:	b40e      	push	{r1, r2, r3}
 8005c7a:	b503      	push	{r0, r1, lr}
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	ab03      	add	r3, sp, #12
 8005c80:	4805      	ldr	r0, [pc, #20]	@ (8005c98 <fiprintf+0x20>)
 8005c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c86:	6800      	ldr	r0, [r0, #0]
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	f000 f83d 	bl	8005d08 <_vfiprintf_r>
 8005c8e:	b002      	add	sp, #8
 8005c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c94:	b003      	add	sp, #12
 8005c96:	4770      	bx	lr
 8005c98:	20000018 	.word	0x20000018

08005c9c <abort>:
 8005c9c:	2006      	movs	r0, #6
 8005c9e:	b508      	push	{r3, lr}
 8005ca0:	f000 fa06 	bl	80060b0 <raise>
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	f7fb fcc6 	bl	8001636 <_exit>

08005caa <_malloc_usable_size_r>:
 8005caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cae:	1f18      	subs	r0, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bfbc      	itt	lt
 8005cb4:	580b      	ldrlt	r3, [r1, r0]
 8005cb6:	18c0      	addlt	r0, r0, r3
 8005cb8:	4770      	bx	lr

08005cba <__sfputc_r>:
 8005cba:	6893      	ldr	r3, [r2, #8]
 8005cbc:	b410      	push	{r4}
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	6093      	str	r3, [r2, #8]
 8005cc4:	da07      	bge.n	8005cd6 <__sfputc_r+0x1c>
 8005cc6:	6994      	ldr	r4, [r2, #24]
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	db01      	blt.n	8005cd0 <__sfputc_r+0x16>
 8005ccc:	290a      	cmp	r1, #10
 8005cce:	d102      	bne.n	8005cd6 <__sfputc_r+0x1c>
 8005cd0:	bc10      	pop	{r4}
 8005cd2:	f000 b931 	b.w	8005f38 <__swbuf_r>
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	1c58      	adds	r0, r3, #1
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	7019      	strb	r1, [r3, #0]
 8005cde:	4608      	mov	r0, r1
 8005ce0:	bc10      	pop	{r4}
 8005ce2:	4770      	bx	lr

08005ce4 <__sfputs_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	460f      	mov	r7, r1
 8005cea:	4614      	mov	r4, r2
 8005cec:	18d5      	adds	r5, r2, r3
 8005cee:	42ac      	cmp	r4, r5
 8005cf0:	d101      	bne.n	8005cf6 <__sfputs_r+0x12>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e007      	b.n	8005d06 <__sfputs_r+0x22>
 8005cf6:	463a      	mov	r2, r7
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfe:	f7ff ffdc 	bl	8005cba <__sfputc_r>
 8005d02:	1c43      	adds	r3, r0, #1
 8005d04:	d1f3      	bne.n	8005cee <__sfputs_r+0xa>
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d08 <_vfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	4614      	mov	r4, r2
 8005d10:	4698      	mov	r8, r3
 8005d12:	4606      	mov	r6, r0
 8005d14:	b09d      	sub	sp, #116	@ 0x74
 8005d16:	b118      	cbz	r0, 8005d20 <_vfiprintf_r+0x18>
 8005d18:	6a03      	ldr	r3, [r0, #32]
 8005d1a:	b90b      	cbnz	r3, 8005d20 <_vfiprintf_r+0x18>
 8005d1c:	f7fe f8be 	bl	8003e9c <__sinit>
 8005d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d22:	07d9      	lsls	r1, r3, #31
 8005d24:	d405      	bmi.n	8005d32 <_vfiprintf_r+0x2a>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	059a      	lsls	r2, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_vfiprintf_r+0x2a>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d2e:	f7fe fa04 	bl	800413a <__retarget_lock_acquire_recursive>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	071b      	lsls	r3, r3, #28
 8005d36:	d501      	bpl.n	8005d3c <_vfiprintf_r+0x34>
 8005d38:	692b      	ldr	r3, [r5, #16]
 8005d3a:	b99b      	cbnz	r3, 8005d64 <_vfiprintf_r+0x5c>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f938 	bl	8005fb4 <__swsetup_r>
 8005d44:	b170      	cbz	r0, 8005d64 <_vfiprintf_r+0x5c>
 8005d46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d48:	07dc      	lsls	r4, r3, #31
 8005d4a:	d504      	bpl.n	8005d56 <_vfiprintf_r+0x4e>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	b01d      	add	sp, #116	@ 0x74
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	0598      	lsls	r0, r3, #22
 8005d5a:	d4f7      	bmi.n	8005d4c <_vfiprintf_r+0x44>
 8005d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d5e:	f7fe f9ed 	bl	800413c <__retarget_lock_release_recursive>
 8005d62:	e7f3      	b.n	8005d4c <_vfiprintf_r+0x44>
 8005d64:	2300      	movs	r3, #0
 8005d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d6e:	2330      	movs	r3, #48	@ 0x30
 8005d70:	f04f 0901 	mov.w	r9, #1
 8005d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d78:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005f24 <_vfiprintf_r+0x21c>
 8005d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d80:	4623      	mov	r3, r4
 8005d82:	469a      	mov	sl, r3
 8005d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d88:	b10a      	cbz	r2, 8005d8e <_vfiprintf_r+0x86>
 8005d8a:	2a25      	cmp	r2, #37	@ 0x25
 8005d8c:	d1f9      	bne.n	8005d82 <_vfiprintf_r+0x7a>
 8005d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d92:	d00b      	beq.n	8005dac <_vfiprintf_r+0xa4>
 8005d94:	465b      	mov	r3, fp
 8005d96:	4622      	mov	r2, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ffa2 	bl	8005ce4 <__sfputs_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	f000 80a7 	beq.w	8005ef4 <_vfiprintf_r+0x1ec>
 8005da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da8:	445a      	add	r2, fp
 8005daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dac:	f89a 3000 	ldrb.w	r3, [sl]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 809f 	beq.w	8005ef4 <_vfiprintf_r+0x1ec>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc0:	f10a 0a01 	add.w	sl, sl, #1
 8005dc4:	9304      	str	r3, [sp, #16]
 8005dc6:	9307      	str	r3, [sp, #28]
 8005dc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd6:	4853      	ldr	r0, [pc, #332]	@ (8005f24 <_vfiprintf_r+0x21c>)
 8005dd8:	f7fe f9b1 	bl	800413e <memchr>
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	b9d8      	cbnz	r0, 8005e18 <_vfiprintf_r+0x110>
 8005de0:	06d1      	lsls	r1, r2, #27
 8005de2:	bf44      	itt	mi
 8005de4:	2320      	movmi	r3, #32
 8005de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dea:	0713      	lsls	r3, r2, #28
 8005dec:	bf44      	itt	mi
 8005dee:	232b      	movmi	r3, #43	@ 0x2b
 8005df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfa:	d015      	beq.n	8005e28 <_vfiprintf_r+0x120>
 8005dfc:	4654      	mov	r4, sl
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f04f 0c0a 	mov.w	ip, #10
 8005e04:	9a07      	ldr	r2, [sp, #28]
 8005e06:	4621      	mov	r1, r4
 8005e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0c:	3b30      	subs	r3, #48	@ 0x30
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d94b      	bls.n	8005eaa <_vfiprintf_r+0x1a2>
 8005e12:	b1b0      	cbz	r0, 8005e42 <_vfiprintf_r+0x13a>
 8005e14:	9207      	str	r2, [sp, #28]
 8005e16:	e014      	b.n	8005e42 <_vfiprintf_r+0x13a>
 8005e18:	eba0 0308 	sub.w	r3, r0, r8
 8005e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	46a2      	mov	sl, r4
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	e7d2      	b.n	8005dce <_vfiprintf_r+0xc6>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	1d19      	adds	r1, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	9103      	str	r1, [sp, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfbb      	ittet	lt
 8005e34:	425b      	neglt	r3, r3
 8005e36:	f042 0202 	orrlt.w	r2, r2, #2
 8005e3a:	9307      	strge	r3, [sp, #28]
 8005e3c:	9307      	strlt	r3, [sp, #28]
 8005e3e:	bfb8      	it	lt
 8005e40:	9204      	strlt	r2, [sp, #16]
 8005e42:	7823      	ldrb	r3, [r4, #0]
 8005e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e46:	d10a      	bne.n	8005e5e <_vfiprintf_r+0x156>
 8005e48:	7863      	ldrb	r3, [r4, #1]
 8005e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4c:	d132      	bne.n	8005eb4 <_vfiprintf_r+0x1ac>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	3402      	adds	r4, #2
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	9203      	str	r2, [sp, #12]
 8005e58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e5c:	9305      	str	r3, [sp, #20]
 8005e5e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005f28 <_vfiprintf_r+0x220>
 8005e62:	2203      	movs	r2, #3
 8005e64:	4650      	mov	r0, sl
 8005e66:	7821      	ldrb	r1, [r4, #0]
 8005e68:	f7fe f969 	bl	800413e <memchr>
 8005e6c:	b138      	cbz	r0, 8005e7e <_vfiprintf_r+0x176>
 8005e6e:	2240      	movs	r2, #64	@ 0x40
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	eba0 000a 	sub.w	r0, r0, sl
 8005e76:	4082      	lsls	r2, r0
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e82:	2206      	movs	r2, #6
 8005e84:	4829      	ldr	r0, [pc, #164]	@ (8005f2c <_vfiprintf_r+0x224>)
 8005e86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e8a:	f7fe f958 	bl	800413e <memchr>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d03f      	beq.n	8005f12 <_vfiprintf_r+0x20a>
 8005e92:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <_vfiprintf_r+0x228>)
 8005e94:	bb1b      	cbnz	r3, 8005ede <_vfiprintf_r+0x1d6>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	3307      	adds	r3, #7
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	443b      	add	r3, r7
 8005ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea8:	e76a      	b.n	8005d80 <_vfiprintf_r+0x78>
 8005eaa:	460c      	mov	r4, r1
 8005eac:	2001      	movs	r0, #1
 8005eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb2:	e7a8      	b.n	8005e06 <_vfiprintf_r+0xfe>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f04f 0c0a 	mov.w	ip, #10
 8005eba:	4619      	mov	r1, r3
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec6:	3a30      	subs	r2, #48	@ 0x30
 8005ec8:	2a09      	cmp	r2, #9
 8005eca:	d903      	bls.n	8005ed4 <_vfiprintf_r+0x1cc>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0c6      	beq.n	8005e5e <_vfiprintf_r+0x156>
 8005ed0:	9105      	str	r1, [sp, #20]
 8005ed2:	e7c4      	b.n	8005e5e <_vfiprintf_r+0x156>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005edc:	e7f0      	b.n	8005ec0 <_vfiprintf_r+0x1b8>
 8005ede:	ab03      	add	r3, sp, #12
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <_vfiprintf_r+0x22c>)
 8005ee8:	a904      	add	r1, sp, #16
 8005eea:	f7fd fb8f 	bl	800360c <_printf_float>
 8005eee:	4607      	mov	r7, r0
 8005ef0:	1c78      	adds	r0, r7, #1
 8005ef2:	d1d6      	bne.n	8005ea2 <_vfiprintf_r+0x19a>
 8005ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ef6:	07d9      	lsls	r1, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_vfiprintf_r+0x1fe>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	059a      	lsls	r2, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_vfiprintf_r+0x1fe>
 8005f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f02:	f7fe f91b 	bl	800413c <__retarget_lock_release_recursive>
 8005f06:	89ab      	ldrh	r3, [r5, #12]
 8005f08:	065b      	lsls	r3, r3, #25
 8005f0a:	f53f af1f 	bmi.w	8005d4c <_vfiprintf_r+0x44>
 8005f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f10:	e71e      	b.n	8005d50 <_vfiprintf_r+0x48>
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	462a      	mov	r2, r5
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <_vfiprintf_r+0x22c>)
 8005f1c:	a904      	add	r1, sp, #16
 8005f1e:	f7fd fe13 	bl	8003b48 <_printf_i>
 8005f22:	e7e4      	b.n	8005eee <_vfiprintf_r+0x1e6>
 8005f24:	080063cc 	.word	0x080063cc
 8005f28:	080063d2 	.word	0x080063d2
 8005f2c:	080063d6 	.word	0x080063d6
 8005f30:	0800360d 	.word	0x0800360d
 8005f34:	08005ce5 	.word	0x08005ce5

08005f38 <__swbuf_r>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	460e      	mov	r6, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	4605      	mov	r5, r0
 8005f40:	b118      	cbz	r0, 8005f4a <__swbuf_r+0x12>
 8005f42:	6a03      	ldr	r3, [r0, #32]
 8005f44:	b90b      	cbnz	r3, 8005f4a <__swbuf_r+0x12>
 8005f46:	f7fd ffa9 	bl	8003e9c <__sinit>
 8005f4a:	69a3      	ldr	r3, [r4, #24]
 8005f4c:	60a3      	str	r3, [r4, #8]
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	071a      	lsls	r2, r3, #28
 8005f52:	d501      	bpl.n	8005f58 <__swbuf_r+0x20>
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	b943      	cbnz	r3, 8005f6a <__swbuf_r+0x32>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 f82a 	bl	8005fb4 <__swsetup_r>
 8005f60:	b118      	cbz	r0, 8005f6a <__swbuf_r+0x32>
 8005f62:	f04f 37ff 	mov.w	r7, #4294967295
 8005f66:	4638      	mov	r0, r7
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	b2f6      	uxtb	r6, r6
 8005f70:	1a98      	subs	r0, r3, r2
 8005f72:	6963      	ldr	r3, [r4, #20]
 8005f74:	4637      	mov	r7, r6
 8005f76:	4283      	cmp	r3, r0
 8005f78:	dc05      	bgt.n	8005f86 <__swbuf_r+0x4e>
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fd9b 	bl	8005ab8 <_fflush_r>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d1ed      	bne.n	8005f62 <__swbuf_r+0x2a>
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	60a3      	str	r3, [r4, #8]
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	6022      	str	r2, [r4, #0]
 8005f92:	701e      	strb	r6, [r3, #0]
 8005f94:	6962      	ldr	r2, [r4, #20]
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d004      	beq.n	8005fa6 <__swbuf_r+0x6e>
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	07db      	lsls	r3, r3, #31
 8005fa0:	d5e1      	bpl.n	8005f66 <__swbuf_r+0x2e>
 8005fa2:	2e0a      	cmp	r6, #10
 8005fa4:	d1df      	bne.n	8005f66 <__swbuf_r+0x2e>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff fd85 	bl	8005ab8 <_fflush_r>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0d9      	beq.n	8005f66 <__swbuf_r+0x2e>
 8005fb2:	e7d6      	b.n	8005f62 <__swbuf_r+0x2a>

08005fb4 <__swsetup_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4b29      	ldr	r3, [pc, #164]	@ (800605c <__swsetup_r+0xa8>)
 8005fb8:	4605      	mov	r5, r0
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	b118      	cbz	r0, 8005fc8 <__swsetup_r+0x14>
 8005fc0:	6a03      	ldr	r3, [r0, #32]
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <__swsetup_r+0x14>
 8005fc4:	f7fd ff6a 	bl	8003e9c <__sinit>
 8005fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fcc:	0719      	lsls	r1, r3, #28
 8005fce:	d422      	bmi.n	8006016 <__swsetup_r+0x62>
 8005fd0:	06da      	lsls	r2, r3, #27
 8005fd2:	d407      	bmi.n	8005fe4 <__swsetup_r+0x30>
 8005fd4:	2209      	movs	r2, #9
 8005fd6:	602a      	str	r2, [r5, #0]
 8005fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	e033      	b.n	800604c <__swsetup_r+0x98>
 8005fe4:	0758      	lsls	r0, r3, #29
 8005fe6:	d512      	bpl.n	800600e <__swsetup_r+0x5a>
 8005fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fea:	b141      	cbz	r1, 8005ffe <__swsetup_r+0x4a>
 8005fec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d002      	beq.n	8005ffa <__swsetup_r+0x46>
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f7fe ff0f 	bl	8004e18 <_free_r>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	2300      	movs	r3, #0
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	6923      	ldr	r3, [r4, #16]
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	f043 0308 	orr.w	r3, r3, #8
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	b94b      	cbnz	r3, 800602e <__swsetup_r+0x7a>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006024:	d003      	beq.n	800602e <__swsetup_r+0x7a>
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f882 	bl	8006132 <__smakebuf_r>
 800602e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006032:	f013 0201 	ands.w	r2, r3, #1
 8006036:	d00a      	beq.n	800604e <__swsetup_r+0x9a>
 8006038:	2200      	movs	r2, #0
 800603a:	60a2      	str	r2, [r4, #8]
 800603c:	6962      	ldr	r2, [r4, #20]
 800603e:	4252      	negs	r2, r2
 8006040:	61a2      	str	r2, [r4, #24]
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	b942      	cbnz	r2, 8006058 <__swsetup_r+0xa4>
 8006046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800604a:	d1c5      	bne.n	8005fd8 <__swsetup_r+0x24>
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	0799      	lsls	r1, r3, #30
 8006050:	bf58      	it	pl
 8006052:	6962      	ldrpl	r2, [r4, #20]
 8006054:	60a2      	str	r2, [r4, #8]
 8006056:	e7f4      	b.n	8006042 <__swsetup_r+0x8e>
 8006058:	2000      	movs	r0, #0
 800605a:	e7f7      	b.n	800604c <__swsetup_r+0x98>
 800605c:	20000018 	.word	0x20000018

08006060 <_raise_r>:
 8006060:	291f      	cmp	r1, #31
 8006062:	b538      	push	{r3, r4, r5, lr}
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
 8006068:	d904      	bls.n	8006074 <_raise_r+0x14>
 800606a:	2316      	movs	r3, #22
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	f04f 30ff 	mov.w	r0, #4294967295
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006076:	b112      	cbz	r2, 800607e <_raise_r+0x1e>
 8006078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800607c:	b94b      	cbnz	r3, 8006092 <_raise_r+0x32>
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f830 	bl	80060e4 <_getpid_r>
 8006084:	4622      	mov	r2, r4
 8006086:	4601      	mov	r1, r0
 8006088:	4628      	mov	r0, r5
 800608a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800608e:	f000 b817 	b.w	80060c0 <_kill_r>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d00a      	beq.n	80060ac <_raise_r+0x4c>
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	d103      	bne.n	80060a2 <_raise_r+0x42>
 800609a:	2316      	movs	r3, #22
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	2001      	movs	r0, #1
 80060a0:	e7e7      	b.n	8006072 <_raise_r+0x12>
 80060a2:	2100      	movs	r1, #0
 80060a4:	4620      	mov	r0, r4
 80060a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060aa:	4798      	blx	r3
 80060ac:	2000      	movs	r0, #0
 80060ae:	e7e0      	b.n	8006072 <_raise_r+0x12>

080060b0 <raise>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	@ (80060bc <raise+0xc>)
 80060b2:	4601      	mov	r1, r0
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f7ff bfd3 	b.w	8006060 <_raise_r>
 80060ba:	bf00      	nop
 80060bc:	20000018 	.word	0x20000018

080060c0 <_kill_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	2300      	movs	r3, #0
 80060c4:	4d06      	ldr	r5, [pc, #24]	@ (80060e0 <_kill_r+0x20>)
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	f7fb faa2 	bl	8001616 <_kill>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	d102      	bne.n	80060dc <_kill_r+0x1c>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	b103      	cbz	r3, 80060dc <_kill_r+0x1c>
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	bd38      	pop	{r3, r4, r5, pc}
 80060de:	bf00      	nop
 80060e0:	200003b0 	.word	0x200003b0

080060e4 <_getpid_r>:
 80060e4:	f7fb ba90 	b.w	8001608 <_getpid>

080060e8 <__swhatbuf_r>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	460c      	mov	r4, r1
 80060ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f0:	4615      	mov	r5, r2
 80060f2:	2900      	cmp	r1, #0
 80060f4:	461e      	mov	r6, r3
 80060f6:	b096      	sub	sp, #88	@ 0x58
 80060f8:	da0c      	bge.n	8006114 <__swhatbuf_r+0x2c>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	2100      	movs	r1, #0
 80060fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006102:	bf14      	ite	ne
 8006104:	2340      	movne	r3, #64	@ 0x40
 8006106:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800610a:	2000      	movs	r0, #0
 800610c:	6031      	str	r1, [r6, #0]
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	b016      	add	sp, #88	@ 0x58
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	466a      	mov	r2, sp
 8006116:	f000 f849 	bl	80061ac <_fstat_r>
 800611a:	2800      	cmp	r0, #0
 800611c:	dbed      	blt.n	80060fa <__swhatbuf_r+0x12>
 800611e:	9901      	ldr	r1, [sp, #4]
 8006120:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006124:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006128:	4259      	negs	r1, r3
 800612a:	4159      	adcs	r1, r3
 800612c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006130:	e7eb      	b.n	800610a <__swhatbuf_r+0x22>

08006132 <__smakebuf_r>:
 8006132:	898b      	ldrh	r3, [r1, #12]
 8006134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006136:	079d      	lsls	r5, r3, #30
 8006138:	4606      	mov	r6, r0
 800613a:	460c      	mov	r4, r1
 800613c:	d507      	bpl.n	800614e <__smakebuf_r+0x1c>
 800613e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	2301      	movs	r3, #1
 8006148:	6163      	str	r3, [r4, #20]
 800614a:	b003      	add	sp, #12
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800614e:	466a      	mov	r2, sp
 8006150:	ab01      	add	r3, sp, #4
 8006152:	f7ff ffc9 	bl	80060e8 <__swhatbuf_r>
 8006156:	9f00      	ldr	r7, [sp, #0]
 8006158:	4605      	mov	r5, r0
 800615a:	4639      	mov	r1, r7
 800615c:	4630      	mov	r0, r6
 800615e:	f7fe fecd 	bl	8004efc <_malloc_r>
 8006162:	b948      	cbnz	r0, 8006178 <__smakebuf_r+0x46>
 8006164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006168:	059a      	lsls	r2, r3, #22
 800616a:	d4ee      	bmi.n	800614a <__smakebuf_r+0x18>
 800616c:	f023 0303 	bic.w	r3, r3, #3
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	e7e2      	b.n	800613e <__smakebuf_r+0xc>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800617e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	6020      	str	r0, [r4, #0]
 8006188:	b15b      	cbz	r3, 80061a2 <__smakebuf_r+0x70>
 800618a:	4630      	mov	r0, r6
 800618c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006190:	f000 f81e 	bl	80061d0 <_isatty_r>
 8006194:	b128      	cbz	r0, 80061a2 <__smakebuf_r+0x70>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	431d      	orrs	r5, r3
 80061a6:	81a5      	strh	r5, [r4, #12]
 80061a8:	e7cf      	b.n	800614a <__smakebuf_r+0x18>
	...

080061ac <_fstat_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	2300      	movs	r3, #0
 80061b0:	4d06      	ldr	r5, [pc, #24]	@ (80061cc <_fstat_r+0x20>)
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	f7fb fa8b 	bl	80016d4 <_fstat>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d102      	bne.n	80061c8 <_fstat_r+0x1c>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	b103      	cbz	r3, 80061c8 <_fstat_r+0x1c>
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
 80061ca:	bf00      	nop
 80061cc:	200003b0 	.word	0x200003b0

080061d0 <_isatty_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	2300      	movs	r3, #0
 80061d4:	4d05      	ldr	r5, [pc, #20]	@ (80061ec <_isatty_r+0x1c>)
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fb fa89 	bl	80016f2 <_isatty>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_isatty_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_isatty_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	200003b0 	.word	0x200003b0

080061f0 <_init>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr

080061fc <_fini>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr
